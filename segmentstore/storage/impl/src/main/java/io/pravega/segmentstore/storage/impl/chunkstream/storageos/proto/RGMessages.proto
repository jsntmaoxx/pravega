/*
 *  Copyright (c) 2014 EMC Corporation
 * All Rights Reserved
 *
 * This software contains the intellectual property of EMC Corporation
 * or is licensed to EMC Corporation from third parties.  Use of this
 * software and the intellectual property contained therein is expressly
 * limited to the terms and conditions of the License Agreement under which
 * it is provided by or on behalf of EMC.
 */
package io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.protocol.resource;

option java_package = "io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.rg";
option java_outer_classname = "RGMessages";


import "SchemaKeyRecords.proto";
import "ReplicationGroup.proto";
import "Zone.proto";
/*
import "com/emc/storageos/data/object/utils/Cred.proto";
*/

/*message CreateRequest {
    required io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.ReplicationGroupInfo rgInfo = 1;
    required io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.utils.Credential cred = 2;
}

message CreateResponse {
    required string etag        = 1;
    required int64 ctime        = 2;
}

message GetRequest {
    required string rgId = 1;
    optional bool nonCachedGet = 2 [default = false];
    optional bool localRead = 3 [default = false];
}

message GetResponse {
    required io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.ReplicationGroupInfo rgInfo = 1;
}

message DeleteRequest {
    required string rgId     = 1;
    optional string etag     = 2;
}

message DeleteResponse {
}

message UpdateRequest {
    required string id                                                      = 1;
    optional string name                                                    = 2;
    optional string description                                             = 3;
    optional int64 lastStableUpdate                                         = 4;
    repeated io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.ZoneCosInfo zoneCosInfo = 5;
    optional string etag                                                    = 6;
    optional bool allowAllNamespaces                                        = 7;
    required io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.utils.Credential cred            = 8;
    optional bool isFullRep                                                 = 9;
    optional bool enableRebalancing                                         = 10;
}

message UpdateResponse {
    required io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.ReplicationGroupInfo rgInfo = 1;
}*/

message ListRequest {
    optional io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.types.SchemaKey schemaToken = 1;
    optional int32  maxEntries                                         = 2;
    optional bool includeDeleted                                            = 3 [default = false];
}

message ListResponse {
    optional io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.types.SchemaKey schemaToken          = 1;
    repeated io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.ReplicationGroupInfo rgInfo = 2;
}

/*message ZoneUpdateRequest {
    required string rgId                                                    = 1;
    required io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.UpdateType  updateType  = 2;
    repeated io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.ZoneCosInfo zoneCosInfo    = 3;
    repeated io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.zone.ZoneInfo zoneInfos           = 4;
    // This field should only be set to true when a zone needs to be removed from
    // systemRG (i.e., user-triggered 'Remove Vdc' operation).
    optional bool removeUnreferencedZone = 5;
    optional io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.utils.Credential cred = 6;
    optional bool overrideBootstrapCheck = 7;
    repeated string forcePSOZones = 8;
}

message ZoneUpdateResponse {
    optional io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.ReplicationGroupUpdate updateInfo = 1;
}

message GetUpdateRecordRequest {
    required string updId = 1;
}

message GetUpdateRecordResponse {
    required io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.ReplicationGroupUpdate updateInfo = 1;
}


message UpdateRecordUpdateRequest {
    required io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.ReplicationGroupUpdate updateInfo = 1;
}

message UpdateRecordUpdateResponse {
    required string etag    = 1;
}

message DeleteUpdateRecordRequest {
    required string id      = 1;
    optional string etag    = 2;
}

message DeleteUpdateRecordResponse {

}

message ListUpdateRecordRequest {
    optional io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.types.SchemaKey schemaToken = 1;
    optional int32  maxEntries                                         = 2;
}

message ListUpdateRecordResponse {
    optional io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.types.SchemaKey schemaToken                = 1;
    repeated io.pravega.segmentstore.storage.impl.chunkstream.storageos.data.object.repgroup.ReplicationGroupUpdate updateInfo = 2;
}*/

