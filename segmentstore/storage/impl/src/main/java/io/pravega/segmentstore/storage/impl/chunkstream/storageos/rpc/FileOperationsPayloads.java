// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileOperationsPayloads.proto

package io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc;

public final class FileOperationsPayloads {
  private FileOperationsPayloads() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.CommandType}
   */
  public enum CommandType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>RESPONSE_FAILURE = -1;</code>
     *
     * <pre>
     * it is assumed in the code that any request has even number
     * and any response has odd number
     * </pre>
     */
    RESPONSE_FAILURE(0, -1),
    /**
     * <code>REQUEST_CREATE_OBJECT = 0;</code>
     */
    REQUEST_CREATE_OBJECT(1, 0),
    /**
     * <code>RESPONSE_CREATE_OBJECT = 1;</code>
     */
    RESPONSE_CREATE_OBJECT(2, 1),
    /**
     * <code>REQUEST_COMPLETEMPU_OBJECT = 2;</code>
     */
    REQUEST_COMPLETEMPU_OBJECT(3, 2),
    /**
     * <code>RESPONSE_COMPLETEMPU_OBJECT = 3;</code>
     */
    RESPONSE_COMPLETEMPU_OBJECT(4, 3),
    /**
     * <code>REQUEST_UPDATE_OBJECT = 4;</code>
     */
    REQUEST_UPDATE_OBJECT(5, 4),
    /**
     * <code>RESPONSE_UPDATE_OBJECT = 5;</code>
     */
    RESPONSE_UPDATE_OBJECT(6, 5),
    /**
     * <code>REQUEST_MARKERUPDATE_OBJECT = 6;</code>
     */
    REQUEST_MARKERUPDATE_OBJECT(7, 6),
    /**
     * <code>RESPONSE_MARKERUPDATE_OBJECT = 7;</code>
     */
    RESPONSE_MARKERUPDATE_OBJECT(8, 7),
    /**
     * <code>REQUEST_REMOVEVERSION_OBJECT = 8;</code>
     */
    REQUEST_REMOVEVERSION_OBJECT(9, 8),
    /**
     * <code>RESPONSE_REMOVEVERSION_OBJECT = 9;</code>
     */
    RESPONSE_REMOVEVERSION_OBJECT(10, 9),
    /**
     * <code>REQUEST_INSERT_ENTRY = 10;</code>
     */
    REQUEST_INSERT_ENTRY(11, 10),
    /**
     * <code>RESPONSE_INSERT_ENTRY = 11;</code>
     */
    RESPONSE_INSERT_ENTRY(12, 11),
    /**
     * <code>REQUEST_GET_ENTRY = 12;</code>
     */
    REQUEST_GET_ENTRY(13, 12),
    /**
     * <code>RESPONSE_GET_ENTRY = 13;</code>
     */
    RESPONSE_GET_ENTRY(14, 13),
    /**
     * <code>REQUEST_REMOVE_ENTRY = 14;</code>
     */
    REQUEST_REMOVE_ENTRY(15, 14),
    /**
     * <code>RESPONSE_REMOVE_ENTRY = 15;</code>
     */
    RESPONSE_REMOVE_ENTRY(16, 15),
    /**
     * <code>REQUEST_LIST_ENTRY = 16;</code>
     */
    REQUEST_LIST_ENTRY(17, 16),
    /**
     * <code>RESPONSE_LIST_ENTRY = 17;</code>
     */
    RESPONSE_LIST_ENTRY(18, 17),
    /**
     * <code>REQUEST_UPLOAD_PART = 18;</code>
     */
    REQUEST_UPLOAD_PART(19, 18),
    /**
     * <code>RESPONSE_UPLOAD_PART = 19;</code>
     */
    RESPONSE_UPLOAD_PART(20, 19),
    /**
     * <code>REQUEST_ABORT_UPLOAD = 20;</code>
     */
    REQUEST_ABORT_UPLOAD(21, 20),
    /**
     * <code>RESPONSE_ABORT_UPLOAD = 21;</code>
     */
    RESPONSE_ABORT_UPLOAD(22, 21),
    /**
     * <code>REQUEST_CREATE_OBJECT_LIST_ENTRY = 22;</code>
     */
    REQUEST_CREATE_OBJECT_LIST_ENTRY(23, 22),
    /**
     * <code>RESPONSE_CREATE_OBJECT_LIST_ENTRY = 23;</code>
     */
    RESPONSE_CREATE_OBJECT_LIST_ENTRY(24, 23),
    /**
     * <code>REQUEST_REMOVE_OBJECT_LIST_ENTRY = 24;</code>
     */
    REQUEST_REMOVE_OBJECT_LIST_ENTRY(25, 24),
    /**
     * <code>RESPONSE_REMOVE_OBJECT_LIST_ENTRY = 25;</code>
     */
    RESPONSE_REMOVE_OBJECT_LIST_ENTRY(26, 25),
    /**
     * <code>REQUEST_PING = 26;</code>
     */
    REQUEST_PING(27, 26),
    /**
     * <code>RESPONSE_PING = 27;</code>
     */
    RESPONSE_PING(28, 27),
    /**
     * <code>REQUEST_OBJECT_QUERY = 28;</code>
     */
    REQUEST_OBJECT_QUERY(29, 28),
    /**
     * <code>RESPONSE_OBJECT_QUERY = 29;</code>
     */
    RESPONSE_OBJECT_QUERY(30, 29),
    /**
     * <code>REQUEST_CREATE_CHUNK = 30;</code>
     */
    REQUEST_CREATE_CHUNK(31, 30),
    /**
     * <code>RESPONSE_CREATE_CHUNK = 31;</code>
     */
    RESPONSE_CREATE_CHUNK(32, 31),
    /**
     * <code>REQUEST_DELETE_CHUNK = 32;</code>
     */
    REQUEST_DELETE_CHUNK(33, 32),
    /**
     * <code>RESPONSE_DELETE_CHUNK = 33;</code>
     */
    RESPONSE_DELETE_CHUNK(34, 33),
    /**
     * <code>REQUEST_SEAL_CHUNK = 34;</code>
     */
    REQUEST_SEAL_CHUNK(35, 34),
    /**
     * <code>RESPONSE_SEAL_CHUNK = 35;</code>
     */
    RESPONSE_SEAL_CHUNK(36, 35),
    /**
     * <code>REQUEST_QUERY_CHUNK = 36;</code>
     */
    REQUEST_QUERY_CHUNK(37, 36),
    /**
     * <code>RESPONSE_QUERY_CHUNK = 37;</code>
     */
    RESPONSE_QUERY_CHUNK(38, 37),
    /**
     * <code>REQUEST_REPORT_BLOCK_ERROR = 38;</code>
     */
    REQUEST_REPORT_BLOCK_ERROR(39, 38),
    /**
     * <code>RESPONSE_REPORT_BLOCK_ERROR = 39;</code>
     */
    RESPONSE_REPORT_BLOCK_ERROR(40, 39),
    /**
     * <code>REQUEST_FREE_BLOCK = 40;</code>
     */
    REQUEST_FREE_BLOCK(41, 40),
    /**
     * <code>RESPONSE_FREE_BLOCK = 41;</code>
     */
    RESPONSE_FREE_BLOCK(42, 41),
    /**
     * <code>REQUEST_CONFIRM_BLOCK_REFERENCE = 42;</code>
     */
    REQUEST_CONFIRM_BLOCK_REFERENCE(43, 42),
    /**
     * <code>RESPONSE_CONFIRM_BLOCK_REFERENCE = 43;</code>
     */
    RESPONSE_CONFIRM_BLOCK_REFERENCE(44, 43),
    /**
     * <code>REQUEST_ALLOCATE_BLOCK = 44;</code>
     */
    REQUEST_ALLOCATE_BLOCK(45, 44),
    /**
     * <code>RESPONSE_ALLOCATE_BLOCK = 45;</code>
     */
    RESPONSE_ALLOCATE_BLOCK(46, 45),
    /**
     * <code>REQUEST_JOB_SUBMIT = 46;</code>
     */
    REQUEST_JOB_SUBMIT(47, 46),
    /**
     * <code>RESPONSE_JOB_SUBMIT = 47;</code>
     */
    RESPONSE_JOB_SUBMIT(48, 47),
    /**
     * <code>REQUEST_JOB_DONE = 48;</code>
     */
    REQUEST_JOB_DONE(49, 48),
    /**
     * <code>RESPONSE_JOB_DONE = 49;</code>
     */
    RESPONSE_JOB_DONE(50, 49),
    /**
     * <code>REQUEST_INSERT_REGION = 50;</code>
     */
    REQUEST_INSERT_REGION(51, 50),
    /**
     * <code>RESPONSE_INSERT_REGION = 51;</code>
     */
    RESPONSE_INSERT_REGION(52, 51),
    /**
     * <code>REQUEST_LIST_REGION = 52;</code>
     */
    REQUEST_LIST_REGION(53, 52),
    /**
     * <code>RESPONSE_LIST_REGION = 53;</code>
     */
    RESPONSE_LIST_REGION(54, 53),
    /**
     * <code>REQUEST_GET_BPLUSTREE = 54;</code>
     */
    REQUEST_GET_BPLUSTREE(55, 54),
    /**
     * <code>RESPONSE_GET_BPLUSTREE = 55;</code>
     */
    RESPONSE_GET_BPLUSTREE(56, 55),
    /**
     * <code>REQUEST_DT_SYNC = 56;</code>
     */
    REQUEST_DT_SYNC(57, 56),
    /**
     * <code>RESPONSE_DT_SYNC = 57;</code>
     */
    RESPONSE_DT_SYNC(58, 57),
    /**
     * <code>REQUEST_UPDATE_REGIONS = 58;</code>
     */
    REQUEST_UPDATE_REGIONS(59, 58),
    /**
     * <code>RESPONSE_UPDATE_REGIONS = 59;</code>
     */
    RESPONSE_UPDATE_REGIONS(60, 59),
    /**
     * <code>REQUEST_GET_BPLUSTREE_PARSER_MARKER = 60;</code>
     */
    REQUEST_GET_BPLUSTREE_PARSER_MARKER(61, 60),
    /**
     * <code>RESPONSE_GET_BPLUSTREE_PARSER_MARKER = 61;</code>
     */
    RESPONSE_GET_BPLUSTREE_PARSER_MARKER(62, 61),
    /**
     * <code>REQUEST_SET_BPLUSTREE_PARSER_MARKER = 62;</code>
     */
    REQUEST_SET_BPLUSTREE_PARSER_MARKER(63, 62),
    /**
     * <code>RESPONSE_SET_BPLUSTREE_PARSER_MARKER = 63;</code>
     */
    RESPONSE_SET_BPLUSTREE_PARSER_MARKER(64, 63),
    /**
     * <code>REQUEST_GET_JOURNAL_PARSER_MARKER = 64;</code>
     */
    REQUEST_GET_JOURNAL_PARSER_MARKER(65, 64),
    /**
     * <code>RESPONSE_GET_JOURNAL_PARSER_MARKER = 65;</code>
     */
    RESPONSE_GET_JOURNAL_PARSER_MARKER(66, 65),
    /**
     * <code>REQUEST_SET_JOURNAL_PARSER_MARKER = 66;</code>
     */
    REQUEST_SET_JOURNAL_PARSER_MARKER(67, 66),
    /**
     * <code>RESPONSE_SET_JOURNAL_PARSER_MARKER = 67;</code>
     */
    RESPONSE_SET_JOURNAL_PARSER_MARKER(68, 67),
    /**
     * <code>REQUEST_CONFIRM_ALLOCATE_BLOCK = 68;</code>
     */
    REQUEST_CONFIRM_ALLOCATE_BLOCK(69, 68),
    /**
     * <code>RESPONSE_CONFIRM_ALLOCATE_BLOCK = 69;</code>
     */
    RESPONSE_CONFIRM_ALLOCATE_BLOCK(70, 69),
    /**
     * <code>REQUEST_EXTEND_CHUNK_TIMEOUT_LEASE = 70;</code>
     */
    REQUEST_EXTEND_CHUNK_TIMEOUT_LEASE(71, 70),
    /**
     * <code>RESPONSE_EXTEND_CHUNK_TIMEOUT_LEASE = 71;</code>
     */
    RESPONSE_EXTEND_CHUNK_TIMEOUT_LEASE(72, 71),
    /**
     * <code>REQUEST_INSERT_REMOTE_CHUNK = 72;</code>
     */
    REQUEST_INSERT_REMOTE_CHUNK(73, 72),
    /**
     * <code>RESPONSE_INSERT_REMOTE_CHUNK = 73;</code>
     */
    RESPONSE_INSERT_REMOTE_CHUNK(74, 73),
    /**
     * <code>REQUEST_UPDATE_REMOTE_CHUNK = 74;</code>
     */
    REQUEST_UPDATE_REMOTE_CHUNK(75, 74),
    /**
     * <code>RESPONSE_UPDATE_REMOTE_CHUNK = 75;</code>
     */
    RESPONSE_UPDATE_REMOTE_CHUNK(76, 75),
    /**
     * <code>REQUEST_DELETE_REMOTE_CHUNK = 76;</code>
     */
    REQUEST_DELETE_REMOTE_CHUNK(77, 76),
    /**
     * <code>RESPONSE_DELETE_REMOTE_CHUNK = 77;</code>
     */
    RESPONSE_DELETE_REMOTE_CHUNK(78, 77),
    /**
     * <code>REQUEST_GEO_START_COPY = 78;</code>
     */
    REQUEST_GEO_START_COPY(79, 78),
    /**
     * <code>RESPONSE_GEO_START_COPY = 79;</code>
     */
    RESPONSE_GEO_START_COPY(80, 79),
    /**
     * <code>REQUEST_GEO_COMMIT_COPY = 80;</code>
     */
    REQUEST_GEO_COMMIT_COPY(81, 80),
    /**
     * <code>RESPONSE_GEO_COMMIT_COPY = 81;</code>
     */
    RESPONSE_GEO_COMMIT_COPY(82, 81),
    /**
     * <code>REQUEST_GEO_REMOVE_COPY_ENTRY = 82;</code>
     */
    REQUEST_GEO_REMOVE_COPY_ENTRY(83, 82),
    /**
     * <code>RESPONSE_GEO_REMOVE_COPY_ENTRY = 83;</code>
     */
    RESPONSE_GEO_REMOVE_COPY_ENTRY(84, 83),
    /**
     * <code>REQUEST_GET_REFERENCE_COLLECTION_PROGRESS = 84;</code>
     */
    REQUEST_GET_REFERENCE_COLLECTION_PROGRESS(85, 84),
    /**
     * <code>RESPONSE_GET_REFERENCE_COLLECTION_PROGRESS = 85;</code>
     */
    RESPONSE_GET_REFERENCE_COLLECTION_PROGRESS(86, 85),
    /**
     * <code>REQUEST_SET_FAILPOINT = 86;</code>
     */
    REQUEST_SET_FAILPOINT(87, 86),
    /**
     * <code>RESPONSE_SET_FAILPOINT = 87;</code>
     */
    RESPONSE_SET_FAILPOINT(88, 87),
    /**
     * <code>REQUEST_INSERT_OWNERSHIP_INFO = 88;</code>
     */
    REQUEST_INSERT_OWNERSHIP_INFO(89, 88),
    /**
     * <code>RESPONSE_INSERT_OWNERSHIP_INFO = 89;</code>
     */
    RESPONSE_INSERT_OWNERSHIP_INFO(90, 89),
    /**
     * <code>REQUEST_REMOVE_OWNERSHIP_INFO = 90;</code>
     */
    REQUEST_REMOVE_OWNERSHIP_INFO(91, 90),
    /**
     * <code>RESPONSE_REMOVE_OWNERSHIP_INFO = 91;</code>
     */
    RESPONSE_REMOVE_OWNERSHIP_INFO(92, 91),
    /**
     * <code>REQUEST_GET_OWNERSHIP_INFO = 92;</code>
     */
    REQUEST_GET_OWNERSHIP_INFO(93, 92),
    /**
     * <code>RESPONSE_GET_OWNERSHIP_INFO = 93;</code>
     */
    RESPONSE_GET_OWNERSHIP_INFO(94, 93),
    /**
     * <code>REQUEST_GET_OWNERSHIP_INFO_FOR_TYPES = 94;</code>
     */
    REQUEST_GET_OWNERSHIP_INFO_FOR_TYPES(95, 94),
    /**
     * <code>RESPONSE_GET_OWNERSHIP_INFO_FOR_TYPES = 95;</code>
     */
    RESPONSE_GET_OWNERSHIP_INFO_FOR_TYPES(96, 95),
    /**
     * <code>REQUEST_UPDATE_OWNERSHIP_INFO = 96;</code>
     */
    REQUEST_UPDATE_OWNERSHIP_INFO(97, 96),
    /**
     * <code>RESPONSE_UPDATE_OWNERSHIP_INFO = 97;</code>
     */
    RESPONSE_UPDATE_OWNERSHIP_INFO(98, 97),
    /**
     * <code>REQUEST_GEO_DELETE_CHUNK = 98;</code>
     */
    REQUEST_GEO_DELETE_CHUNK(99, 98),
    /**
     * <code>RESPONSE_GEO_DELETE_CHUNK = 99;</code>
     */
    RESPONSE_GEO_DELETE_CHUNK(100, 99),
    /**
     * <code>REQUEST_DT_QUERY = 100;</code>
     */
    REQUEST_DT_QUERY(101, 100),
    /**
     * <code>RESPONSE_DT_QUERY = 101;</code>
     */
    RESPONSE_DT_QUERY(102, 101),
    /**
     * <code>REQUEST_LIST_BPLUSTREE = 102;</code>
     */
    REQUEST_LIST_BPLUSTREE(103, 102),
    /**
     * <code>RESPONSE_LIST_BPLUSTREE = 103;</code>
     */
    RESPONSE_LIST_BPLUSTREE(104, 103),
    /**
     * <code>REQUEST_BLOCK_STATUS_UPDATE = 104;</code>
     */
    REQUEST_BLOCK_STATUS_UPDATE(105, 104),
    /**
     * <code>RESPONSE_BLOCK_STATUS_UPDATE = 105;</code>
     */
    RESPONSE_BLOCK_STATUS_UPDATE(106, 105),
    /**
     * <code>REQUEST_MAINTENANCE_QUERY = 106;</code>
     */
    REQUEST_MAINTENANCE_QUERY(107, 106),
    /**
     * <code>RESPONSE_MAINTENANCE_QUERY = 107;</code>
     */
    RESPONSE_MAINTENANCE_QUERY(108, 107),
    /**
     * <code>REQUEST_GET_INDEX_FORMAT_VERSION = 108;</code>
     */
    REQUEST_GET_INDEX_FORMAT_VERSION(109, 108),
    /**
     * <code>RESPONSE_GET_INDEX_FORMAT_VERSION = 109;</code>
     */
    RESPONSE_GET_INDEX_FORMAT_VERSION(110, 109),
    /**
     * <code>REQUEST_SET_INDEX_FORMAT_VERSION = 110;</code>
     */
    REQUEST_SET_INDEX_FORMAT_VERSION(111, 110),
    /**
     * <code>RESPONSE_SET_INDEX_FORMAT_VERSION = 111;</code>
     */
    RESPONSE_SET_INDEX_FORMAT_VERSION(112, 111),
    /**
     * <code>REQUEST_INSERT_REMOTE_REGION = 112;</code>
     */
    REQUEST_INSERT_REMOTE_REGION(113, 112),
    /**
     * <code>RESPONSE_INSERT_REMOTE_REGION = 113;</code>
     */
    RESPONSE_INSERT_REMOTE_REGION(114, 113),
    /**
     * <code>REQUEST_INSERT_REMOTE_BTREE_MARKER = 114;</code>
     */
    REQUEST_INSERT_REMOTE_BTREE_MARKER(115, 114),
    /**
     * <code>RESPONSE_INSERT_REMOTE_BTREE_MARKER = 115;</code>
     */
    RESPONSE_INSERT_REMOTE_BTREE_MARKER(116, 115),
    /**
     * <code>REQUEST_GEO_REPLICATE_CHUNK = 116;</code>
     */
    REQUEST_GEO_REPLICATE_CHUNK(117, 116),
    /**
     * <code>RESPONSE_GEO_REPLICATE_CHUNK = 117;</code>
     */
    RESPONSE_GEO_REPLICATE_CHUNK(118, 117),
    /**
     * <code>REQUEST_CHUNK_REPLICATION_CHECK = 118;</code>
     */
    REQUEST_CHUNK_REPLICATION_CHECK(119, 118),
    /**
     * <code>RESPONSE_CHUNK_REPLICATION_CHECK = 119;</code>
     */
    RESPONSE_CHUNK_REPLICATION_CHECK(120, 119),
    /**
     * <code>REQUEST_GET_NEXT_CHECKER_MARKER_POSITION = 120;</code>
     */
    REQUEST_GET_NEXT_CHECKER_MARKER_POSITION(121, 120),
    /**
     * <code>RESPONSE_GET_NEXT_CHECKER_MARKER_POSITION = 121;</code>
     */
    RESPONSE_GET_NEXT_CHECKER_MARKER_POSITION(122, 121),
    /**
     * <code>REQUEST_INDEX_RECOVERY_STATE_TRANSITION = 122;</code>
     */
    REQUEST_INDEX_RECOVERY_STATE_TRANSITION(123, 122),
    /**
     * <code>RESPONSE_INDEX_RECOVERY_STATE_TRANSITION = 123;</code>
     */
    RESPONSE_INDEX_RECOVERY_STATE_TRANSITION(124, 123),
    /**
     * <code>REQUEST_REPGROUP_RECONFIG = 124;</code>
     */
    REQUEST_REPGROUP_RECONFIG(125, 124),
    /**
     * <code>RESPONSE_REPGROUP_RECONFIG = 125;</code>
     */
    RESPONSE_REPGROUP_RECONFIG(126, 125),
    /**
     * <code>REQUEST_GET_INDEX_RECOVERY_TRACKER = 126;</code>
     */
    REQUEST_GET_INDEX_RECOVERY_TRACKER(127, 126),
    /**
     * <code>RESPONSE_GET_INDEX_RECOVERY_TRACKER = 127;</code>
     */
    RESPONSE_GET_INDEX_RECOVERY_TRACKER(128, 127),
    /**
     * <code>REQUEST_INSERT_RECOVERY_POINT = 128;</code>
     */
    REQUEST_INSERT_RECOVERY_POINT(129, 128),
    /**
     * <code>RESPONSE_INSERT_RECOVERY_POINT = 129;</code>
     */
    RESPONSE_INSERT_RECOVERY_POINT(130, 129),
    /**
     * <code>REQUEST_CLEAN_UP_BPLUS_TREES = 130;</code>
     */
    REQUEST_CLEAN_UP_BPLUS_TREES(131, 130),
    /**
     * <code>RESPONSE_CLEAN_UP_BPLUS_TREES = 131;</code>
     */
    RESPONSE_CLEAN_UP_BPLUS_TREES(132, 131),
    /**
     * <code>REQUEST_DT_MEMORY_TABLE_FORCE_SEAL = 132;</code>
     */
    REQUEST_DT_MEMORY_TABLE_FORCE_SEAL(133, 132),
    /**
     * <code>RESPONSE_DT_MEMORY_TABLE_FORCE_SEAL = 133;</code>
     */
    RESPONSE_DT_MEMORY_TABLE_FORCE_SEAL(134, 133),
    /**
     * <code>REQUEST_CREATE_COMMODITY_DEVICE = 134;</code>
     *
     * <pre>
     *sendRequest to some SSM
     * </pre>
     */
    REQUEST_CREATE_COMMODITY_DEVICE(135, 134),
    /**
     * <code>RESPONSE_CREATE_COMMODITY_DEVICE = 135;</code>
     */
    RESPONSE_CREATE_COMMODITY_DEVICE(136, 135),
    /**
     * <code>REQUEST_CREATE_FS_DEVICE = 136;</code>
     */
    REQUEST_CREATE_FS_DEVICE(137, 136),
    /**
     * <code>RESPONSE_CREATE_FS_DEVICE = 137;</code>
     */
    RESPONSE_CREATE_FS_DEVICE(138, 137),
    /**
     * <code>REQUEST_CREATE_COMMODITY_DEVICE_TO_OWNER = 138;</code>
     *
     * <pre>
     *sent to the device owner
     * </pre>
     */
    REQUEST_CREATE_COMMODITY_DEVICE_TO_OWNER(139, 138),
    /**
     * <code>RESPONSE_CREATE_COMMODITY_DEVICE_FROM_OWNER = 139;</code>
     */
    RESPONSE_CREATE_COMMODITY_DEVICE_FROM_OWNER(140, 139),
    /**
     * <code>REQUEST_CREATE_FS_DEVICE_TO_OWNER = 140;</code>
     */
    REQUEST_CREATE_FS_DEVICE_TO_OWNER(141, 140),
    /**
     * <code>RESPONSE_CREATE_FS_DEVICE_FROM_OWNER = 141;</code>
     */
    RESPONSE_CREATE_FS_DEVICE_FROM_OWNER(142, 141),
    /**
     * <code>REQUEST_LIST_HOSTING_DEVICES = 142;</code>
     */
    REQUEST_LIST_HOSTING_DEVICES(143, 142),
    /**
     * <code>RESPONSE_LIST_HOSTING_DEVICES = 143;</code>
     */
    RESPONSE_LIST_HOSTING_DEVICES(144, 143),
    /**
     * <code>REQUEST_DEVICE_CREATE_COMPLETE = 144;</code>
     *
     * <pre>
     *used by lower level DT to notify higher level DTs about completion of device init
     * </pre>
     */
    REQUEST_DEVICE_CREATE_COMPLETE(145, 144),
    /**
     * <code>RESPONSE_DEVICE_CREATE_COMPLETE = 145;</code>
     */
    RESPONSE_DEVICE_CREATE_COMPLETE(146, 145),
    /**
     * <code>REQUEST_START_DT_CREATION = 146;</code>
     */
    REQUEST_START_DT_CREATION(147, 146),
    /**
     * <code>RESPONSE_START_DT_CREATION = 147;</code>
     */
    RESPONSE_START_DT_CREATION(148, 147),
    /**
     * <code>REQUEST_HOSTING_DEVICE_INFO = 148;</code>
     */
    REQUEST_HOSTING_DEVICE_INFO(149, 148),
    /**
     * <code>RESPONSE_HOSTING_DEVICE_INFO = 149;</code>
     */
    RESPONSE_HOSTING_DEVICE_INFO(150, 149),
    /**
     * <code>RESPONSE_HOSTING_DEVICE_INFO_NULL = 151;</code>
     *
     * <pre>
     *skipping a number so that the response type can be odd
     * </pre>
     */
    RESPONSE_HOSTING_DEVICE_INFO_NULL(151, 151),
    /**
     * <code>REQUEST_RESET_FAILPOINT = 152;</code>
     */
    REQUEST_RESET_FAILPOINT(152, 152),
    /**
     * <code>RESPONSE_RESET_FAILPOINT = 153;</code>
     */
    RESPONSE_RESET_FAILPOINT(153, 153),
    /**
     * <code>REQUEST_DT_BOOTSTRAP_QUERY = 154;</code>
     */
    REQUEST_DT_BOOTSTRAP_QUERY(154, 154),
    /**
     * <code>RESPONSE_DT_BOOTSTRAP_QUERY = 155;</code>
     */
    RESPONSE_DT_BOOTSTRAP_QUERY(155, 155),
    /**
     * <code>REQUEST_GC_TEST_GET_OBJ_INFO = 156;</code>
     */
    REQUEST_GC_TEST_GET_OBJ_INFO(156, 156),
    /**
     * <code>RESPONSE_GC_TEST_GET_OBJ_INFO = 157;</code>
     */
    RESPONSE_GC_TEST_GET_OBJ_INFO(157, 157),
    /**
     * <code>REQUEST_NAMESPACE_CREATE = 158;</code>
     *
     * <pre>
     * === Begin Namespace Commands === 
     * </pre>
     */
    REQUEST_NAMESPACE_CREATE(158, 158),
    /**
     * <code>RESPONSE_NAMESPACE_CREATE = 159;</code>
     */
    RESPONSE_NAMESPACE_CREATE(159, 159),
    /**
     * <code>REQUEST_NAMESPACE_GET = 160;</code>
     */
    REQUEST_NAMESPACE_GET(160, 160),
    /**
     * <code>RESPONSE_NAMESPACE_GET = 161;</code>
     */
    RESPONSE_NAMESPACE_GET(161, 161),
    /**
     * <code>REQUEST_NAMESPACE_DELETE = 162;</code>
     */
    REQUEST_NAMESPACE_DELETE(162, 162),
    /**
     * <code>RESPONSE_NAMESPACE_DELETE = 163;</code>
     */
    RESPONSE_NAMESPACE_DELETE(163, 163),
    /**
     * <code>REQUEST_NAMESPACE_UPDATE = 164;</code>
     */
    REQUEST_NAMESPACE_UPDATE(164, 164),
    /**
     * <code>RESPONSE_NAMESPACE_UPDATE = 165;</code>
     */
    RESPONSE_NAMESPACE_UPDATE(165, 165),
    /**
     * <code>REQUEST_NAMESPACE_LIST = 166;</code>
     */
    REQUEST_NAMESPACE_LIST(166, 166),
    /**
     * <code>RESPONSE_NAMESPACE_LIST = 167;</code>
     *
     * <pre>
     * === End Namespace Commands === 
     * </pre>
     */
    RESPONSE_NAMESPACE_LIST(167, 167),
    /**
     * <code>REQUEST_PAXOS_QUERY = 168;</code>
     */
    REQUEST_PAXOS_QUERY(168, 168),
    /**
     * <code>RESPONSE_PAXOS_QUERY = 169;</code>
     */
    RESPONSE_PAXOS_QUERY(169, 169),
    /**
     * <code>REQUEST_PAXOS_ACCEPT = 170;</code>
     */
    REQUEST_PAXOS_ACCEPT(170, 170),
    /**
     * <code>RESPONSE_PAXOS_ACCEPT = 171;</code>
     */
    RESPONSE_PAXOS_ACCEPT(171, 171),
    /**
     * <code>REQUEST_PAXOS_COMMIT = 172;</code>
     */
    REQUEST_PAXOS_COMMIT(172, 172),
    /**
     * <code>RESPONSE_PAXOS_COMMIT = 173;</code>
     */
    RESPONSE_PAXOS_COMMIT(173, 173),
    /**
     * <code>REQUEST_PAXOS_READ = 174;</code>
     */
    REQUEST_PAXOS_READ(174, 174),
    /**
     * <code>RESPONSE_PAXOS_READ = 175;</code>
     */
    RESPONSE_PAXOS_READ(175, 175),
    /**
     * <code>REQUEST_PAXOS_ABORT = 176;</code>
     */
    REQUEST_PAXOS_ABORT(176, 176),
    /**
     * <code>RESPONSE_PAXOS_ABORT = 177;</code>
     */
    RESPONSE_PAXOS_ABORT(177, 177),
    /**
     * <code>REQUEST_GET_JOURNAL_CONSUMPTION_PROGRESS = 178;</code>
     */
    REQUEST_GET_JOURNAL_CONSUMPTION_PROGRESS(178, 178),
    /**
     * <code>RESPONSE_GET_JOURNAL_CONSUMPTION_PROGRESS = 179;</code>
     */
    RESPONSE_GET_JOURNAL_CONSUMPTION_PROGRESS(179, 179),
    /**
     * <code>REQUEST_GET_BPLUSTREE_REFERENCE_COLLECTION_PROGRESS = 180;</code>
     */
    REQUEST_GET_BPLUSTREE_REFERENCE_COLLECTION_PROGRESS(180, 180),
    /**
     * <code>RESPONSE_GET_BPLUSTREE_REFERENCE_COLLECTION_PROGRESS = 181;</code>
     */
    RESPONSE_GET_BPLUSTREE_REFERENCE_COLLECTION_PROGRESS(181, 181),
    /**
     * <code>REQUEST_SET_JOURNAL_CONSUMPTION_PROGRESS = 182;</code>
     */
    REQUEST_SET_JOURNAL_CONSUMPTION_PROGRESS(182, 182),
    /**
     * <code>RESPONSE_SET_JOURNAL_CONSUMPTION_PROGRESS = 183;</code>
     */
    RESPONSE_SET_JOURNAL_CONSUMPTION_PROGRESS(183, 183),
    /**
     * <code>REQUEST_GET_CAPACITY_DETAILS = 184;</code>
     */
    REQUEST_GET_CAPACITY_DETAILS(184, 184),
    /**
     * <code>RESPONSE_GET_CAPACITY_DETAILS = 185;</code>
     */
    RESPONSE_GET_CAPACITY_DETAILS(185, 185),
    /**
     * <code>REQUEST_BATCH_EXEC_ENTRY = 186;</code>
     */
    REQUEST_BATCH_EXEC_ENTRY(186, 186),
    /**
     * <code>RESPONSE_BATCH_EXEC_ENTRY = 187;</code>
     */
    RESPONSE_BATCH_EXEC_ENTRY(187, 187),
    /**
     * <code>REQUEST_PREPARE_COPY_OBJECT = 188;</code>
     */
    REQUEST_PREPARE_COPY_OBJECT(188, 188),
    /**
     * <code>RESPONSE_PREPARE_COPY_OBJECT = 189;</code>
     */
    RESPONSE_PREPARE_COPY_OBJECT(189, 189),
    /**
     * <code>REQUEST_GET_LAST_JOURNAL_REGION = 190;</code>
     */
    REQUEST_GET_LAST_JOURNAL_REGION(190, 190),
    /**
     * <code>RESPONSE_GET_LAST_JOURNAL_REGION = 191;</code>
     */
    RESPONSE_GET_LAST_JOURNAL_REGION(191, 191),
    /**
     * <code>REQUEST_RESOURCE_TABLE_INSERT_COMPLETE = 192;</code>
     */
    REQUEST_RESOURCE_TABLE_INSERT_COMPLETE(192, 192),
    /**
     * <code>RESPONSE_RESOURCE_TABLE_INSERT_COMPLETE = 193;</code>
     */
    RESPONSE_RESOURCE_TABLE_INSERT_COMPLETE(193, 193),
    /**
     * <code>REQUEST_REFRESH_OWNERSHIP_INFO = 194;</code>
     */
    REQUEST_REFRESH_OWNERSHIP_INFO(194, 194),
    /**
     * <code>RESPONSE_REFRESH_OWNERSHIP_INFO = 195;</code>
     */
    RESPONSE_REFRESH_OWNERSHIP_INFO(195, 195),
    /**
     * <code>REQUEST_GEO_LIST_OBJ = 196;</code>
     */
    REQUEST_GEO_LIST_OBJ(196, 196),
    /**
     * <code>RESPONSE_GEO_LIST_OBJ = 197;</code>
     */
    RESPONSE_GEO_LIST_OBJ(197, 197),
    /**
     * <code>REQUEST_GEO_LIST_OBJ_UPDATES = 198;</code>
     */
    REQUEST_GEO_LIST_OBJ_UPDATES(198, 198),
    /**
     * <code>RESPONSE_GEO_LIST_OBJ_UPDATES = 199;</code>
     */
    RESPONSE_GEO_LIST_OBJ_UPDATES(199, 199),
    /**
     * <code>REQUEST_GEO_LIST_OBJ_INDEX = 200;</code>
     */
    REQUEST_GEO_LIST_OBJ_INDEX(200, 200),
    /**
     * <code>RESPONSE_GEO_LIST_OBJ_INDEX = 201;</code>
     */
    RESPONSE_GEO_LIST_OBJ_INDEX(201, 201),
    /**
     * <code>REQUEST_GET_OBJECT_LIST_ENTRY = 202;</code>
     */
    REQUEST_GET_OBJECT_LIST_ENTRY(202, 202),
    /**
     * <code>RESPONSE_GET_OBJECT_LIST_ENTRY = 203;</code>
     */
    RESPONSE_GET_OBJECT_LIST_ENTRY(203, 203),
    /**
     * <code>REQUEST_BLOCK_REALLOCATION = 204;</code>
     */
    REQUEST_BLOCK_REALLOCATION(204, 204),
    /**
     * <code>RESPONSE_BLOCK_REALLOCATION = 205;</code>
     */
    RESPONSE_BLOCK_REALLOCATION(205, 205),
    /**
     * <code>BLOCK_REALLOCATION_CONFIRMATION = 206;</code>
     */
    BLOCK_REALLOCATION_CONFIRMATION(206, 206),
    /**
     * <code>REQUEST_BLOCK_REALLOCATION_CONFIRMATION = 208;</code>
     *
     * <pre>
     *Skipping a number
     * </pre>
     */
    REQUEST_BLOCK_REALLOCATION_CONFIRMATION(207, 208),
    /**
     * <code>RESPONSE_BLOCK_REALLOCATION_CONFIRMATION = 209;</code>
     */
    RESPONSE_BLOCK_REALLOCATION_CONFIRMATION(208, 209),
    /**
     * <code>REQUEST_USER_CREATE = 210;</code>
     *
     * <pre>
     * === Begin User Commands === 
     * </pre>
     */
    REQUEST_USER_CREATE(209, 210),
    /**
     * <code>RESPONSE_USER_CREATE = 211;</code>
     */
    RESPONSE_USER_CREATE(210, 211),
    /**
     * <code>REQUEST_USER_GET = 212;</code>
     */
    REQUEST_USER_GET(211, 212),
    /**
     * <code>RESPONSE_USER_GET = 213;</code>
     */
    RESPONSE_USER_GET(212, 213),
    /**
     * <code>REQUEST_USER_DELETE = 214;</code>
     */
    REQUEST_USER_DELETE(213, 214),
    /**
     * <code>RESPONSE_USER_DELETE = 215;</code>
     */
    RESPONSE_USER_DELETE(214, 215),
    /**
     * <code>REQUEST_USER_LIST = 216;</code>
     */
    REQUEST_USER_LIST(215, 216),
    /**
     * <code>RESPONSE_USER_LIST = 217;</code>
     */
    RESPONSE_USER_LIST(216, 217),
    /**
     * <code>REQUEST_USER_PASSWD_SET = 218;</code>
     */
    REQUEST_USER_PASSWD_SET(217, 218),
    /**
     * <code>RESPONSE_USER_PASSWD_SET = 219;</code>
     */
    RESPONSE_USER_PASSWD_SET(218, 219),
    /**
     * <code>REQUEST_USER_PASSWD_DELETE = 220;</code>
     */
    REQUEST_USER_PASSWD_DELETE(219, 220),
    /**
     * <code>RESPONSE_USER_PASSWD_DELETE = 221;</code>
     */
    RESPONSE_USER_PASSWD_DELETE(220, 221),
    /**
     * <code>REQUEST_USER_METADATA_SET = 222;</code>
     */
    REQUEST_USER_METADATA_SET(221, 222),
    /**
     * <code>RESPONSE_USER_METADATA_SET = 223;</code>
     */
    RESPONSE_USER_METADATA_SET(222, 223),
    /**
     * <code>REQUEST_USER_METADATA_GET = 224;</code>
     */
    REQUEST_USER_METADATA_GET(223, 224),
    /**
     * <code>RESPONSE_USER_METADATA_GET = 225;</code>
     *
     * <pre>
     * === End User Commands === 
     * </pre>
     */
    RESPONSE_USER_METADATA_GET(224, 225),
    /**
     * <code>REQUEST_BUCKET_CREATE = 226;</code>
     *
     * <pre>
     * === Begin Bucket Commands === 
     * </pre>
     */
    REQUEST_BUCKET_CREATE(225, 226),
    /**
     * <code>RESPONSE_BUCKET_CREATE = 227;</code>
     */
    RESPONSE_BUCKET_CREATE(226, 227),
    /**
     * <code>REQUEST_BUCKET_GET = 228;</code>
     */
    REQUEST_BUCKET_GET(227, 228),
    /**
     * <code>RESPONSE_BUCKET_GET = 229;</code>
     */
    RESPONSE_BUCKET_GET(228, 229),
    /**
     * <code>REQUEST_BUCKET_DELETE = 230;</code>
     */
    REQUEST_BUCKET_DELETE(229, 230),
    /**
     * <code>RESPONSE_BUCKET_DELETE = 231;</code>
     */
    RESPONSE_BUCKET_DELETE(230, 231),
    /**
     * <code>REQUEST_BUCKET_UPDATE = 232;</code>
     */
    REQUEST_BUCKET_UPDATE(231, 232),
    /**
     * <code>RESPONSE_BUCKET_UPDATE = 233;</code>
     */
    RESPONSE_BUCKET_UPDATE(232, 233),
    /**
     * <code>REQUEST_BUCKET_LIST = 234;</code>
     */
    REQUEST_BUCKET_LIST(233, 234),
    /**
     * <code>RESPONSE_BUCKET_LIST = 235;</code>
     */
    RESPONSE_BUCKET_LIST(234, 235),
    /**
     * <code>REQUEST_BUCKET_SET_ACL = 236;</code>
     */
    REQUEST_BUCKET_SET_ACL(235, 236),
    /**
     * <code>RESPONSE_BUCKET_SET_ACL = 237;</code>
     */
    RESPONSE_BUCKET_SET_ACL(236, 237),
    /**
     * <code>REQUEST_BUCKET_GET_ACL = 238;</code>
     */
    REQUEST_BUCKET_GET_ACL(237, 238),
    /**
     * <code>RESPONSE_BUCKET_GET_ACL = 239;</code>
     */
    RESPONSE_BUCKET_GET_ACL(238, 239),
    /**
     * <code>REQUEST_BUCKET_CHANGE_OWNER = 240;</code>
     */
    REQUEST_BUCKET_CHANGE_OWNER(239, 240),
    /**
     * <code>RESPONSE_BUCKET_CHANGE_OWNER = 241;</code>
     */
    RESPONSE_BUCKET_CHANGE_OWNER(240, 241),
    /**
     * <code>REQUEST_BUCKET_SET_CORS_CONF = 242;</code>
     */
    REQUEST_BUCKET_SET_CORS_CONF(241, 242),
    /**
     * <code>RESPONSE_BUCKET_SET_CORS_CONF = 243;</code>
     */
    RESPONSE_BUCKET_SET_CORS_CONF(242, 243),
    /**
     * <code>REQUEST_BUCKET_SET_EXPIRATION_POLICY = 244;</code>
     */
    REQUEST_BUCKET_SET_EXPIRATION_POLICY(243, 244),
    /**
     * <code>RESPONSE_BUCKET_SET_EXPIRATION_POLICY = 245;</code>
     */
    RESPONSE_BUCKET_SET_EXPIRATION_POLICY(244, 245),
    /**
     * <code>REQUEST_BUCKET_SET_VERSIONING = 246;</code>
     */
    REQUEST_BUCKET_SET_VERSIONING(245, 246),
    /**
     * <code>RESPONSE_BUCKET_SET_VERSIONING = 247;</code>
     */
    RESPONSE_BUCKET_SET_VERSIONING(246, 247),
    /**
     * <code>REQUEST_BUCKET_DELETE_CORS_CONF = 248;</code>
     */
    REQUEST_BUCKET_DELETE_CORS_CONF(247, 248),
    /**
     * <code>RESPONSE_BUCKET_DELETE_CORS_CONF = 249;</code>
     */
    RESPONSE_BUCKET_DELETE_CORS_CONF(248, 249),
    /**
     * <code>REQUEST_BUCKET_DELETE_EXPIRATION_POLICY = 250;</code>
     */
    REQUEST_BUCKET_DELETE_EXPIRATION_POLICY(249, 250),
    /**
     * <code>RESPONSE_BUCKET_DELETE_EXPIRATION_POLICY = 251;</code>
     */
    RESPONSE_BUCKET_DELETE_EXPIRATION_POLICY(250, 251),
    /**
     * <code>REQUEST_BUCKET_SET_VERSIONING_SOURCE = 252;</code>
     */
    REQUEST_BUCKET_SET_VERSIONING_SOURCE(251, 252),
    /**
     * <code>RESPONSE_BUCKET_SET_VERSIONING_SOURCE = 253;</code>
     */
    RESPONSE_BUCKET_SET_VERSIONING_SOURCE(252, 253),
    /**
     * <code>REQUEST_BUCKET_SET_METADATA = 254;</code>
     */
    REQUEST_BUCKET_SET_METADATA(253, 254),
    /**
     * <code>RESPONSE_BUCKET_SET_METADATA = 255;</code>
     */
    RESPONSE_BUCKET_SET_METADATA(254, 255),
    /**
     * <code>REQUEST_BUCKET_GET_METADATA = 256;</code>
     */
    REQUEST_BUCKET_GET_METADATA(255, 256),
    /**
     * <code>RESPONSE_BUCKET_GET_METADATA = 257;</code>
     */
    RESPONSE_BUCKET_GET_METADATA(256, 257),
    /**
     * <code>REQUEST_BUCKET_SET_HEAD_METADATA = 258;</code>
     */
    REQUEST_BUCKET_SET_HEAD_METADATA(257, 258),
    /**
     * <code>RESPONSE_BUCKET_SET_HEAD_METADATA = 259;</code>
     */
    RESPONSE_BUCKET_SET_HEAD_METADATA(258, 259),
    /**
     * <code>REQUEST_BUCKET_GET_HEAD_METADATA = 260;</code>
     */
    REQUEST_BUCKET_GET_HEAD_METADATA(259, 260),
    /**
     * <code>RESPONSE_BUCKET_GET_HEAD_METADATA = 261;</code>
     */
    RESPONSE_BUCKET_GET_HEAD_METADATA(260, 261),
    /**
     * <code>REQUEST_DEVICE_INFO_UPDATE = 262;</code>
     */
    REQUEST_DEVICE_INFO_UPDATE(261, 262),
    /**
     * <code>RESPONSE_DEVICE_INFO_UPDATE = 263;</code>
     */
    RESPONSE_DEVICE_INFO_UPDATE(262, 263),
    /**
     * <code>REQUEST_RG_CREATE = 264;</code>
     *
     * <pre>
     * === Begin Replication Group Commands === 
     * </pre>
     */
    REQUEST_RG_CREATE(263, 264),
    /**
     * <code>RESPONSE_RG_CREATE = 265;</code>
     */
    RESPONSE_RG_CREATE(264, 265),
    /**
     * <code>REQUEST_RG_UPDATE = 266;</code>
     */
    REQUEST_RG_UPDATE(265, 266),
    /**
     * <code>RESPONSE_RG_UPDATE = 267;</code>
     */
    RESPONSE_RG_UPDATE(266, 267),
    /**
     * <code>REQUEST_RG_DELETE = 268;</code>
     */
    REQUEST_RG_DELETE(267, 268),
    /**
     * <code>RESPONSE_RG_DELETE = 269;</code>
     */
    RESPONSE_RG_DELETE(268, 269),
    /**
     * <code>REQUEST_RG_LIST = 270;</code>
     */
    REQUEST_RG_LIST(269, 270),
    /**
     * <code>RESPONSE_RG_LIST = 271;</code>
     */
    RESPONSE_RG_LIST(270, 271),
    /**
     * <code>REQUEST_RG_GET = 272;</code>
     */
    REQUEST_RG_GET(271, 272),
    /**
     * <code>RESPONSE_RG_GET = 273;</code>
     */
    RESPONSE_RG_GET(272, 273),
    /**
     * <code>REQUEST_RG_GET_UPDATE = 274;</code>
     */
    REQUEST_RG_GET_UPDATE(273, 274),
    /**
     * <code>RESPONSE_RG_GET_UPDATE = 275;</code>
     */
    RESPONSE_RG_GET_UPDATE(274, 275),
    /**
     * <code>REQUEST_RG_UPD_UPDATE = 276;</code>
     */
    REQUEST_RG_UPD_UPDATE(275, 276),
    /**
     * <code>RESPONSE_RG_UPD_UPDATE = 277;</code>
     */
    RESPONSE_RG_UPD_UPDATE(276, 277),
    /**
     * <code>REQUEST_RG_DEL_UPDATE = 278;</code>
     */
    REQUEST_RG_DEL_UPDATE(277, 278),
    /**
     * <code>RESPONSE_RG_DEL_UPDATE = 279;</code>
     */
    RESPONSE_RG_DEL_UPDATE(278, 279),
    /**
     * <code>REQUEST_RG_LIST_UPDATE = 280;</code>
     */
    REQUEST_RG_LIST_UPDATE(279, 280),
    /**
     * <code>RESPONSE_RG_LIST_UPDATE = 281;</code>
     */
    RESPONSE_RG_LIST_UPDATE(280, 281),
    /**
     * <code>REQUEST_RG_KEY_LIST_UPDATE = 282;</code>
     */
    REQUEST_RG_KEY_LIST_UPDATE(281, 282),
    /**
     * <code>RESPONSE_RG_KEY_LIST_UPDATE = 283;</code>
     */
    RESPONSE_RG_KEY_LIST_UPDATE(282, 283),
    /**
     * <code>REQUEST_RG_ZONE_ADD = 284;</code>
     */
    REQUEST_RG_ZONE_ADD(283, 284),
    /**
     * <code>RESPONSE_RG_ZONE_ADD = 285;</code>
     */
    RESPONSE_RG_ZONE_ADD(284, 285),
    /**
     * <code>REQUEST_RG_ZONE_DEL = 286;</code>
     */
    REQUEST_RG_ZONE_DEL(285, 286),
    /**
     * <code>RESPONSE_RG_ZONE_DEL = 287;</code>
     *
     * <pre>
     * === End Replication Group Commands === 
     * </pre>
     */
    RESPONSE_RG_ZONE_DEL(286, 287),
    /**
     * <code>REQUEST_START_DT_DELETION = 288;</code>
     */
    REQUEST_START_DT_DELETION(287, 288),
    /**
     * <code>RESPONSE_START_DT_DELETION = 289;</code>
     */
    RESPONSE_START_DT_DELETION(288, 289),
    /**
     * <code>REQUEST_DATASTORE_DELETION = 290;</code>
     */
    REQUEST_DATASTORE_DELETION(289, 290),
    /**
     * <code>RESPONSE_DATASTORE_DELETION = 291;</code>
     */
    RESPONSE_DATASTORE_DELETION(290, 291),
    /**
     * <code>REQUEST_GET_GC_PROGRESS = 292;</code>
     */
    REQUEST_GET_GC_PROGRESS(291, 292),
    /**
     * <code>RESPONSE_GET_GC_PROGRESS = 293;</code>
     */
    RESPONSE_GET_GC_PROGRESS(292, 293),
    /**
     * <code>REQUEST_GET_OB_CC_MARKER = 294;</code>
     */
    REQUEST_GET_OB_CC_MARKER(293, 294),
    /**
     * <code>RESPONSE_GET_OB_CC_MARKER = 295;</code>
     */
    RESPONSE_GET_OB_CC_MARKER(294, 295),
    /**
     * <code>REQUEST_CONFIG_USER_SCOPE_GET = 296;</code>
     *
     * <pre>
     * === Begin Config Commands === 
     * </pre>
     */
    REQUEST_CONFIG_USER_SCOPE_GET(295, 296),
    /**
     * <code>RESPONSE_CONFIG_USER_SCOPE_GET = 297;</code>
     */
    RESPONSE_CONFIG_USER_SCOPE_GET(296, 297),
    /**
     * <code>REQUEST_CONFIG_USER_SCOPE_SET = 298;</code>
     */
    REQUEST_CONFIG_USER_SCOPE_SET(297, 298),
    /**
     * <code>RESPONSE_CONFIG_USER_SCOPE_SET = 299;</code>
     */
    RESPONSE_CONFIG_USER_SCOPE_SET(298, 299),
    /**
     * <code>REQUEST_CONFIG_HAS_USER_SET = 300;</code>
     */
    REQUEST_CONFIG_HAS_USER_SET(299, 300),
    /**
     * <code>RESPONSE_CONFIG_HAS_USER_SET = 301;</code>
     *
     * <pre>
     * === End Config Commands === 
     * </pre>
     */
    RESPONSE_CONFIG_HAS_USER_SET(300, 301),
    /**
     * <code>REQUEST_GET_FLOOR_ENTRY = 302;</code>
     */
    REQUEST_GET_FLOOR_ENTRY(301, 302),
    /**
     * <code>RESPONSE_GET_FLOOR_ENTRY = 303;</code>
     */
    RESPONSE_GET_FLOOR_ENTRY(302, 303),
    /**
     * <code>REQUEST_SET_CHUNK_STATUS = 304;</code>
     */
    REQUEST_SET_CHUNK_STATUS(303, 304),
    /**
     * <code>RESPONSE_SET_CHUNK_STATUS = 305;</code>
     */
    RESPONSE_SET_CHUNK_STATUS(304, 305),
    /**
     * <code>REQUEST_GET_CT_PROGRESS_COUNTER = 306;</code>
     */
    REQUEST_GET_CT_PROGRESS_COUNTER(305, 306),
    /**
     * <code>RESPONSE_GET_CT_PROGRESS_COUNTER = 307;</code>
     */
    RESPONSE_GET_CT_PROGRESS_COUNTER(306, 307),
    /**
     * <code>REQUEST_PAXOS_ELECT = 308;</code>
     *
     * <pre>
     * ideally would be nice to have these moved with other PAXOS variables
     * </pre>
     */
    REQUEST_PAXOS_ELECT(307, 308),
    /**
     * <code>RESPONSE_PAXOS_ELECT = 309;</code>
     */
    RESPONSE_PAXOS_ELECT(308, 309),
    /**
     * <code>REQUEST_PAXOS_INITIATE_ABORT = 310;</code>
     *
     * <pre>
     * ideally would be nice to have these moved with other PAXOS variables
     * </pre>
     */
    REQUEST_PAXOS_INITIATE_ABORT(309, 310),
    /**
     * <code>RESPONSE_PAXOS_INITIATE_ABORT = 311;</code>
     */
    RESPONSE_PAXOS_INITIATE_ABORT(310, 311),
    /**
     * <code>REQUEST_UPDATE_OBJECT_ACL = 312;</code>
     */
    REQUEST_UPDATE_OBJECT_ACL(311, 312),
    /**
     * <code>RESPONSE_UPDATE_OBJECT_ACL = 313;</code>
     */
    RESPONSE_UPDATE_OBJECT_ACL(312, 313),
    /**
     * <code>REQUEST_NODE_MODE = 314;</code>
     *
     * <pre>
     * === Begin node mode handling commands === 
     * </pre>
     */
    REQUEST_NODE_MODE(313, 314),
    /**
     * <code>RESPONSE_NODE_MODE = 315;</code>
     */
    RESPONSE_NODE_MODE(314, 315),
    /**
     * <code>REQUEST_PREPARE_FOR_MAINTENANCE = 316;</code>
     */
    REQUEST_PREPARE_FOR_MAINTENANCE(315, 316),
    /**
     * <code>RESPONSE_PREPARE_FOR_MAINTENANCE = 317;</code>
     *
     * <pre>
     * === Begin node mode handling commands === 
     * </pre>
     */
    RESPONSE_PREPARE_FOR_MAINTENANCE(316, 317),
    /**
     * <code>REQUEST_BTREE_PRINT = 318;</code>
     */
    REQUEST_BTREE_PRINT(317, 318),
    /**
     * <code>RESPONSE_BTREE_PRINT = 319;</code>
     */
    RESPONSE_BTREE_PRINT(318, 319),
    /**
     * <code>REQUEST_RESOURCE_EXPANDABLE = 320;</code>
     */
    REQUEST_RESOURCE_EXPANDABLE(319, 320),
    /**
     * <code>RESPONSE_RESOURCE_EXPANDABLE = 321;</code>
     *
     * <pre>
     * 322-325 not used
     * </pre>
     */
    RESPONSE_RESOURCE_EXPANDABLE(320, 321),
    /**
     * <code>REQUEST_UPDATE_PARENT_DIR = 326;</code>
     */
    REQUEST_UPDATE_PARENT_DIR(321, 326),
    /**
     * <code>RESPONSE_UPDATE_PARENT_DIR = 327;</code>
     */
    RESPONSE_UPDATE_PARENT_DIR(322, 327),
    /**
     * <code>REQUEST_BUCKET_BILLING_INFO = 328;</code>
     *
     * <pre>
     * === Metering commands  === 
     * </pre>
     */
    REQUEST_BUCKET_BILLING_INFO(323, 328),
    /**
     * <code>RESPONSE_BUCKET_BILLING_INFO = 329;</code>
     */
    RESPONSE_BUCKET_BILLING_INFO(324, 329),
    /**
     * <code>REQUEST_BUCKET_BILLING_SAMPLE = 330;</code>
     */
    REQUEST_BUCKET_BILLING_SAMPLE(325, 330),
    /**
     * <code>RESPONSE_BUCKET_BILLING_SAMPLE = 331;</code>
     */
    RESPONSE_BUCKET_BILLING_SAMPLE(326, 331),
    /**
     * <code>REQUEST_NAMESPACE_BILLING_INFO = 332;</code>
     */
    REQUEST_NAMESPACE_BILLING_INFO(327, 332),
    /**
     * <code>RESPONSE_NAMESPACE_BILLING_INFO = 333;</code>
     */
    RESPONSE_NAMESPACE_BILLING_INFO(328, 333),
    /**
     * <code>REQUEST_NAMESPACE_BILLING_SAMPLE = 334;</code>
     */
    REQUEST_NAMESPACE_BILLING_SAMPLE(329, 334),
    /**
     * <code>RESPONSE_NAMESPACE_BILLING_SAMPLE = 335;</code>
     */
    RESPONSE_NAMESPACE_BILLING_SAMPLE(330, 335),
    /**
     * <code>REQUEST_INSERT_POSIVITIVE_ON_DISK_DELTA = 336;</code>
     */
    REQUEST_INSERT_POSIVITIVE_ON_DISK_DELTA(331, 336),
    /**
     * <code>RESPONSE_INSERT_POSIVITIVE_ON_DISK_DELTA = 337;</code>
     */
    RESPONSE_INSERT_POSIVITIVE_ON_DISK_DELTA(332, 337),
    /**
     * <code>REQUEST_INSERT_NEGATIIVE_ON_DISK_DELTA = 338;</code>
     */
    REQUEST_INSERT_NEGATIIVE_ON_DISK_DELTA(333, 338),
    /**
     * <code>RESPONSE_INSERT_NEGATIIVE_ON_DISK_DELTA = 339;</code>
     */
    RESPONSE_INSERT_NEGATIIVE_ON_DISK_DELTA(334, 339),
    /**
     * <code>REQUEST_INSERT_BANDWIDTH_DATA = 340;</code>
     */
    REQUEST_INSERT_BANDWIDTH_DATA(335, 340),
    /**
     * <code>RESPONSE_INSERT_BANDWIDTH_DATA = 341;</code>
     */
    RESPONSE_INSERT_BANDWIDTH_DATA(336, 341),
    /**
     * <code>REQUEST_BUCKET_SET_LOCK = 342;</code>
     */
    REQUEST_BUCKET_SET_LOCK(337, 342),
    /**
     * <code>RESPONSE_BUCKET_SET_LOCK = 343;</code>
     */
    RESPONSE_BUCKET_SET_LOCK(338, 343),
    /**
     * <code>REQUEST_SET_USER_LOCK = 344;</code>
     */
    REQUEST_SET_USER_LOCK(339, 344),
    /**
     * <code>RESPONSE_SET_USER_LOCK = 345;</code>
     */
    RESPONSE_SET_USER_LOCK(340, 345),
    /**
     * <code>REQUEST_INSERT_OBMETERCOLLECTOR_BTREE_MARKER = 346;</code>
     */
    REQUEST_INSERT_OBMETERCOLLECTOR_BTREE_MARKER(341, 346),
    /**
     * <code>RESPONSE_INSERT_OBMETERCOLLECTOR_BTREE_MARKER = 347;</code>
     */
    RESPONSE_INSERT_OBMETERCOLLECTOR_BTREE_MARKER(342, 347),
    /**
     * <code>REQUEST_REMOVE_OBMETERCOLLECTOR_BTREE_MARKER = 348;</code>
     */
    REQUEST_REMOVE_OBMETERCOLLECTOR_BTREE_MARKER(343, 348),
    /**
     * <code>RESPONSE_REMOVE_OBMETERCOLLECTOR_BTREE_MARKER = 349;</code>
     */
    RESPONSE_REMOVE_OBMETERCOLLECTOR_BTREE_MARKER(344, 349),
    /**
     * <code>REQUEST_SET_BUCKET_QUOTA = 350;</code>
     */
    REQUEST_SET_BUCKET_QUOTA(345, 350),
    /**
     * <code>RESPONSE_SET_BUCKET_QUOTA = 351;</code>
     */
    RESPONSE_SET_BUCKET_QUOTA(346, 351),
    /**
     * <code>REQUEST_SET_NAMESPACE_SOFT_QUOTA = 352;</code>
     */
    REQUEST_SET_NAMESPACE_SOFT_QUOTA(347, 352),
    /**
     * <code>RESPONSE_SET_NAMESPACE_SOFT_QUOTA = 353;</code>
     */
    RESPONSE_SET_NAMESPACE_SOFT_QUOTA(348, 353),
    /**
     * <code>REQUEST_LIST_CHUNK_GC_SCAN_TASKS = 354;</code>
     */
    REQUEST_LIST_CHUNK_GC_SCAN_TASKS(349, 354),
    /**
     * <code>RESPONSE_LIST_CHUNK_GC_SCAN_TASKS = 355;</code>
     */
    RESPONSE_LIST_CHUNK_GC_SCAN_TASKS(350, 355),
    /**
     * <code>REQUEST_BLOCK_ASSIGNMENT_CONFIRM = 356;</code>
     */
    REQUEST_BLOCK_ASSIGNMENT_CONFIRM(351, 356),
    /**
     * <code>RESPONSE_BLOCK_ASSIGNMENT_CONFIRM = 357;</code>
     */
    RESPONSE_BLOCK_ASSIGNMENT_CONFIRM(352, 357),
    /**
     * <code>REQUEST_GET_DT_STATS = 358;</code>
     */
    REQUEST_GET_DT_STATS(353, 358),
    /**
     * <code>RESPONSE_GET_DT_STATS = 359;</code>
     */
    RESPONSE_GET_DT_STATS(354, 359),
    /**
     * <code>REQUEST_GET_DT_CHUNK_CREATION_STATS = 360;</code>
     */
    REQUEST_GET_DT_CHUNK_CREATION_STATS(355, 360),
    /**
     * <code>RESPONSE_GET_DT_CHUNK_CREATION_STATS = 361;</code>
     */
    RESPONSE_GET_DT_CHUNK_CREATION_STATS(356, 361),
    /**
     * <code>REQUEST_UPDATE_VNEST_CONFIG = 362;</code>
     */
    REQUEST_UPDATE_VNEST_CONFIG(357, 362),
    /**
     * <code>RESPONSE_UPDATE_VNEST_CONFIG = 363;</code>
     */
    RESPONSE_UPDATE_VNEST_CONFIG(358, 363),
    /**
     * <code>REQUEST_GET_DATANODES = 364;</code>
     */
    REQUEST_GET_DATANODES(359, 364),
    /**
     * <code>RESPONSE_GET_DATANODES = 365;</code>
     */
    RESPONSE_GET_DATANODES(360, 365),
    /**
     * <code>REQUEST_GET_GROUPMEMBERSHIP = 366;</code>
     */
    REQUEST_GET_GROUPMEMBERSHIP(361, 366),
    /**
     * <code>RESPONSE_GET_GROUPMEMBERSHIP = 367;</code>
     */
    RESPONSE_GET_GROUPMEMBERSHIP(362, 367),
    /**
     * <code>REQUEST_GROUPMEMBER_BOOTSTRAP = 368;</code>
     */
    REQUEST_GROUPMEMBER_BOOTSTRAP(363, 368),
    /**
     * <code>RESPONSE_GROUPMEMBER_BOOTSTRAP = 369;</code>
     */
    RESPONSE_GROUPMEMBER_BOOTSTRAP(364, 369),
    /**
     * <code>REQUEST_GROUPMEMBER_PRE_BOOTSTRAP = 370;</code>
     */
    REQUEST_GROUPMEMBER_PRE_BOOTSTRAP(365, 370),
    /**
     * <code>RESPONSE_GROUPMEMBER_PRE_BOOTSTRAP = 371;</code>
     */
    RESPONSE_GROUPMEMBER_PRE_BOOTSTRAP(366, 371),
    /**
     * <code>REQUEST_UNSEALED_GEO_START_COPY = 372;</code>
     *
     * <pre>
     * === Begin unsealed geo commands === 
     * </pre>
     */
    REQUEST_UNSEALED_GEO_START_COPY(367, 372),
    /**
     * <code>RESPONSE_UNSEALED_GEO_START_COPY = 373;</code>
     */
    RESPONSE_UNSEALED_GEO_START_COPY(368, 373),
    /**
     * <code>REQUEST_UNSEALED_GEO_COMMIT_COPY = 374;</code>
     */
    REQUEST_UNSEALED_GEO_COMMIT_COPY(369, 374),
    /**
     * <code>RESPONSE_UNSEALED_GEO_COMMIT_COPY = 375;</code>
     */
    RESPONSE_UNSEALED_GEO_COMMIT_COPY(370, 375),
    /**
     * <code>REQUEST_UNSEALED_GEO_HEARTBEAT = 376;</code>
     */
    REQUEST_UNSEALED_GEO_HEARTBEAT(371, 376),
    /**
     * <code>RESPONSE_UNSEALED_GEO_HEARTBEAT = 377;</code>
     */
    RESPONSE_UNSEALED_GEO_HEARTBEAT(372, 377),
    /**
     * <code>REQUEST_UNSEALED_GEO_COMMIT_COPY_RANGE = 378;</code>
     */
    REQUEST_UNSEALED_GEO_COMMIT_COPY_RANGE(373, 378),
    /**
     * <code>RESPONSE_UNSEALED_GEO_COMMIT_COPY_RANGE = 379;</code>
     */
    RESPONSE_UNSEALED_GEO_COMMIT_COPY_RANGE(374, 379),
    /**
     * <code>REQUEST_UPDATE_CHUNK_SECONDARY = 380;</code>
     */
    REQUEST_UPDATE_CHUNK_SECONDARY(375, 380),
    /**
     * <code>RESPONSE_UPDATE_CHUNK_SECONDARY = 381;</code>
     */
    RESPONSE_UPDATE_CHUNK_SECONDARY(376, 381),
    /**
     * <code>REQUEST_GET_OBJECT_OWNER_HISTORY = 382;</code>
     *
     * <pre>
     * object ownership history commands
     * </pre>
     */
    REQUEST_GET_OBJECT_OWNER_HISTORY(377, 382),
    /**
     * <code>RESPONSE_GET_OBJECT_OWNER_HISTORY = 383;</code>
     */
    RESPONSE_GET_OBJECT_OWNER_HISTORY(378, 383),
    /**
     * <code>REQUEST_CREATE_OBJECT_OWNER_HISTORY = 384;</code>
     */
    REQUEST_CREATE_OBJECT_OWNER_HISTORY(379, 384),
    /**
     * <code>RESPONSE_CREATE_OBJECT_OWNER_HISTORY = 385;</code>
     */
    RESPONSE_CREATE_OBJECT_OWNER_HISTORY(380, 385),
    /**
     * <code>REQUEST_APPEND_TO_OBJECT_OWNER_HISTORY = 386;</code>
     */
    REQUEST_APPEND_TO_OBJECT_OWNER_HISTORY(381, 386),
    /**
     * <code>RESPONSE_APPEND_TO_OBJECT_OWNER_HISTORY = 387;</code>
     */
    RESPONSE_APPEND_TO_OBJECT_OWNER_HISTORY(382, 387),
    /**
     * <code>REQUEST_GRAB_OBJECT_OWNERSHIP = 388;</code>
     */
    REQUEST_GRAB_OBJECT_OWNERSHIP(383, 388),
    /**
     * <code>RESPONSE_GRAB_OBJECT_OWNERSHIP = 389;</code>
     */
    RESPONSE_GRAB_OBJECT_OWNERSHIP(384, 389),
    /**
     * <code>REQUEST_UPDATE_DATANODES = 390;</code>
     *
     * <pre>
     * vnest add/remove data nodes
     * </pre>
     */
    REQUEST_UPDATE_DATANODES(385, 390),
    /**
     * <code>RESPONSE_UPDATE_DATANODES = 391;</code>
     */
    RESPONSE_UPDATE_DATANODES(386, 391),
    /**
     * <code>REQUEST_GET_DATANODE_INFO = 392;</code>
     */
    REQUEST_GET_DATANODE_INFO(387, 392),
    /**
     * <code>RESPONSE_GET_DATANODE_INFO = 393;</code>
     */
    RESPONSE_GET_DATANODE_INFO(388, 393),
    /**
     * <code>REQUEST_BUCKET_QUERY = 394;</code>
     *
     * <pre>
     * === Begin Additional Bucket Commands 
     * </pre>
     */
    REQUEST_BUCKET_QUERY(389, 394),
    /**
     * <code>RESPONSE_BUCKET_QUERY = 395;</code>
     *
     * <pre>
     * === End Additional Bucket Commands 
     * </pre>
     */
    RESPONSE_BUCKET_QUERY(390, 395),
    /**
     * <code>REQUEST_TEMP_FAILED_ZONE_GET = 396;</code>
     */
    REQUEST_TEMP_FAILED_ZONE_GET(391, 396),
    /**
     * <code>RESPONSE_TEMP_FAILED_ZONE_GET = 397;</code>
     */
    RESPONSE_TEMP_FAILED_ZONE_GET(392, 397),
    /**
     * <code>REQUEST_TEMP_FAILED_ZONE_SET = 398;</code>
     */
    REQUEST_TEMP_FAILED_ZONE_SET(393, 398),
    /**
     * <code>RESPONSE_TEMP_FAILED_ZONE_SET = 399;</code>
     */
    RESPONSE_TEMP_FAILED_ZONE_SET(394, 399),
    /**
     * <code>REQUEST_TEMP_FAILED_ZONE_UNSET = 400;</code>
     */
    REQUEST_TEMP_FAILED_ZONE_UNSET(395, 400),
    /**
     * <code>RESPONSE_TEMP_FAILED_ZONE_UNSET = 401;</code>
     */
    RESPONSE_TEMP_FAILED_ZONE_UNSET(396, 401),
    /**
     * <code>REQUEST_TEMP_FAILED_ZONE_CHANGE_STATUS = 402;</code>
     */
    REQUEST_TEMP_FAILED_ZONE_CHANGE_STATUS(397, 402),
    /**
     * <code>RESPONSE_TEMP_FAILED_ZONE_CHANGE_STATUS = 403;</code>
     */
    RESPONSE_TEMP_FAILED_ZONE_CHANGE_STATUS(398, 403),
    /**
     * <code>REQUEST_GET_BTREE_INIT_STATS = 404;</code>
     */
    REQUEST_GET_BTREE_INIT_STATS(399, 404),
    /**
     * <code>RESPONSE_GET_BTREE_INIT_STATS = 405;</code>
     */
    RESPONSE_GET_BTREE_INIT_STATS(400, 405),
    /**
     * <code>REQUEST_UPDATE_ZK_ENSEMBLE = 406;</code>
     */
    REQUEST_UPDATE_ZK_ENSEMBLE(401, 406),
    /**
     * <code>RESPONSE_UPDATE_ZK_ENSEMBLE = 407;</code>
     */
    RESPONSE_UPDATE_ZK_ENSEMBLE(402, 407),
    /**
     * <code>REQUEST_REMOTE_VARRAY_LIST = 408;</code>
     */
    REQUEST_REMOTE_VARRAY_LIST(403, 408),
    /**
     * <code>RESPONSE_REMOTE_VARRAY_LIST = 409;</code>
     */
    RESPONSE_REMOTE_VARRAY_LIST(404, 409),
    /**
     * <code>REQUEST_GET_REFERENCED_REPO_FROM_BTREE = 410;</code>
     */
    REQUEST_GET_REFERENCED_REPO_FROM_BTREE(405, 410),
    /**
     * <code>RESPONSE_GET_REFERENCED_REPO_FROM_BTREE = 411;</code>
     */
    RESPONSE_GET_REFERENCED_REPO_FROM_BTREE(406, 411),
    /**
     * <code>REQUEST_DELETE_OBJECT = 412;</code>
     */
    REQUEST_DELETE_OBJECT(407, 412),
    /**
     * <code>RESPONSE_DELETE_OBJECT = 413;</code>
     */
    RESPONSE_DELETE_OBJECT(408, 413),
    /**
     * <code>REQUEST_LIST_UPLOADS = 414;</code>
     */
    REQUEST_LIST_UPLOADS(409, 414),
    /**
     * <code>RESPONSE_LIST_UPLOADS = 415;</code>
     */
    RESPONSE_LIST_UPLOADS(410, 415),
    /**
     * <code>REQUEST_LIST_PARTS = 416;</code>
     */
    REQUEST_LIST_PARTS(411, 416),
    /**
     * <code>RESPONSE_LIST_PARTS = 417;</code>
     */
    RESPONSE_LIST_PARTS(412, 417),
    /**
     * <code>REQUEST_INSERT_MPULIST = 418;</code>
     */
    REQUEST_INSERT_MPULIST(413, 418),
    /**
     * <code>RESPONSE_INSERT_MPULIST = 419;</code>
     */
    RESPONSE_INSERT_MPULIST(414, 419),
    /**
     * <code>REQUEST_GET_REMOTE_ZONES = 420;</code>
     */
    REQUEST_GET_REMOTE_ZONES(415, 420),
    /**
     * <code>RESPONSE_GET_REMOTE_ZONES = 421;</code>
     */
    RESPONSE_GET_REMOTE_ZONES(416, 421),
    /**
     * <code>REQUEST_REJOIN_TASK_BATCH = 422;</code>
     */
    REQUEST_REJOIN_TASK_BATCH(417, 422),
    /**
     * <code>RESPONSE_REJOIN_TASK_BATCH = 423;</code>
     */
    RESPONSE_REJOIN_TASK_BATCH(418, 423),
    /**
     * <code>REQUEST_BUCKET_CHANGE_ISSTALEALLOWED = 424;</code>
     */
    REQUEST_BUCKET_CHANGE_ISSTALEALLOWED(419, 424),
    /**
     * <code>RESPONSE_BUCKET_CHANGE_ISSTALEALLOWED = 425;</code>
     */
    RESPONSE_BUCKET_CHANGE_ISSTALEALLOWED(420, 425),
    /**
     * <code>REQUEST_PUT_REBUILD_REFTABLE_TASK_MARKER = 426;</code>
     */
    REQUEST_PUT_REBUILD_REFTABLE_TASK_MARKER(421, 426),
    /**
     * <code>RESPONSE_PUT_REBUILD_REFTABLE_TASK_MARKER = 427;</code>
     */
    RESPONSE_PUT_REBUILD_REFTABLE_TASK_MARKER(422, 427),
    /**
     * <code>REQUEST_REBUILD_OBJECT_REFERENCES = 428;</code>
     */
    REQUEST_REBUILD_OBJECT_REFERENCES(423, 428),
    /**
     * <code>RESPONSE_REBUILD_OBJECT_REFERENCES = 429;</code>
     */
    RESPONSE_REBUILD_OBJECT_REFERENCES(424, 429),
    /**
     * <code>REQUEST_INSERT_ZONE_LEVEL_METERING_INFO = 430;</code>
     *
     * <pre>
     * == begin zone level metering commands == 
     * </pre>
     */
    REQUEST_INSERT_ZONE_LEVEL_METERING_INFO(425, 430),
    /**
     * <code>RESPONSE_INSERT_ZONE_LEVEL_METERING_INFO = 431;</code>
     */
    RESPONSE_INSERT_ZONE_LEVEL_METERING_INFO(426, 431),
    /**
     * <code>REQUEST_INSERT_ZONE_LEVEL_METERING_INFO_BULK = 432;</code>
     */
    REQUEST_INSERT_ZONE_LEVEL_METERING_INFO_BULK(427, 432),
    /**
     * <code>RESPONSE_INSERT_ZONE_LEVEL_METERING_INFO_BULK = 433;</code>
     */
    RESPONSE_INSERT_ZONE_LEVEL_METERING_INFO_BULK(428, 433),
    /**
     * <code>REQUEST_ZONE_LEVEL_METERING_INFO = 434;</code>
     */
    REQUEST_ZONE_LEVEL_METERING_INFO(429, 434),
    /**
     * <code>RESPONSE_ZONE_LEVEL_METERING_INFO = 435;</code>
     *
     * <pre>
     * == end zone level metering commands == 
     * </pre>
     */
    RESPONSE_ZONE_LEVEL_METERING_INFO(430, 435),
    /**
     * <code>REQUEST_INSERT_BUCKET_INTERMEDIATE = 436;</code>
     */
    REQUEST_INSERT_BUCKET_INTERMEDIATE(431, 436),
    /**
     * <code>RESPONSE_INSERT_BUCKET_INTERMEDIATE = 437;</code>
     */
    RESPONSE_INSERT_BUCKET_INTERMEDIATE(432, 437),
    /**
     * <code>REQUEST_INSERT_NAMESPACE_INTERMEDIATE = 438;</code>
     */
    REQUEST_INSERT_NAMESPACE_INTERMEDIATE(433, 438),
    /**
     * <code>RESPONSE_INSERT_NAMESPACE_INTERMEDIATE = 439;</code>
     */
    RESPONSE_INSERT_NAMESPACE_INTERMEDIATE(434, 439),
    /**
     * <code>REQUEST_INSERT_NODE_LEVEL_METERING_INFO = 440;</code>
     */
    REQUEST_INSERT_NODE_LEVEL_METERING_INFO(435, 440),
    /**
     * <code>RESPONSE_INSERT_NODE_LEVEL_METERING_INFO = 441;</code>
     */
    RESPONSE_INSERT_NODE_LEVEL_METERING_INFO(436, 441),
    /**
     * <code>REQUEST_NODE_LEVEL_METERING_INFO = 442;</code>
     */
    REQUEST_NODE_LEVEL_METERING_INFO(437, 442),
    /**
     * <code>RESPONSE_NODE_LEVEL_METERING_INFO = 443;</code>
     */
    RESPONSE_NODE_LEVEL_METERING_INFO(438, 443),
    /**
     * <code>REQUEST_ALERT_CREATE = 444;</code>
     *
     * <pre>
     *===== Alert commands===
     * </pre>
     */
    REQUEST_ALERT_CREATE(439, 444),
    /**
     * <code>RESPONSE_ALERT_CREATE = 445;</code>
     */
    RESPONSE_ALERT_CREATE(440, 445),
    /**
     * <code>REQUEST_ALERT_GET = 446;</code>
     */
    REQUEST_ALERT_GET(441, 446),
    /**
     * <code>RESPONSE_ALERT_GET = 447;</code>
     */
    RESPONSE_ALERT_GET(442, 447),
    /**
     * <code>REQUEST_ALERT_LIST = 448;</code>
     */
    REQUEST_ALERT_LIST(443, 448),
    /**
     * <code>RESPONSE_ALERT_LIST = 449;</code>
     *
     * <pre>
     *===== end Alert commands====
     * </pre>
     */
    RESPONSE_ALERT_LIST(444, 449),
    /**
     * <code>REQUEST_AUDIT_CREATE = 450;</code>
     *
     * <pre>
     *===== Audit commands===
     * </pre>
     */
    REQUEST_AUDIT_CREATE(445, 450),
    /**
     * <code>RESPONSE_AUDIT_CREATE = 451;</code>
     */
    RESPONSE_AUDIT_CREATE(446, 451),
    /**
     * <code>REQUEST_AUDIT_GET = 452;</code>
     */
    REQUEST_AUDIT_GET(447, 452),
    /**
     * <code>RESPONSE_AUDIT_GET = 453;</code>
     */
    RESPONSE_AUDIT_GET(448, 453),
    /**
     * <code>REQUEST_AUDIT_LIST = 454;</code>
     */
    REQUEST_AUDIT_LIST(449, 454),
    /**
     * <code>RESPONSE_AUDIT_LIST = 455;</code>
     *
     * <pre>
     *===== end Audit commands====
     * </pre>
     */
    RESPONSE_AUDIT_LIST(450, 455),
    /**
     * <code>REQUEST_PAXOS_LIST = 456;</code>
     *
     * <pre>
     * Paxos bulk list request
     * </pre>
     */
    REQUEST_PAXOS_LIST(451, 456),
    /**
     * <code>RESPONSE_PAXOS_LIST = 457;</code>
     */
    RESPONSE_PAXOS_LIST(452, 457),
    /**
     * <code>REQUEST_GET_COMPACTION_STATE = 458;</code>
     *
     * <pre>
     * compaction state commands
     * </pre>
     */
    REQUEST_GET_COMPACTION_STATE(453, 458),
    /**
     * <code>RESPONSE_GET_COMPACTION_STATE = 459;</code>
     */
    RESPONSE_GET_COMPACTION_STATE(454, 459),
    /**
     * <code>REQUEST_INSERT_ENTRY_IF_ABSENT = 460;</code>
     */
    REQUEST_INSERT_ENTRY_IF_ABSENT(455, 460),
    /**
     * <code>RESPONSE_INSERT_ENTRY_IF_ABSENT = 461;</code>
     */
    RESPONSE_INSERT_ENTRY_IF_ABSENT(456, 461),
    /**
     * <code>REQUEST_SET_BUCKET_HARD_QUOTA = 462;</code>
     */
    REQUEST_SET_BUCKET_HARD_QUOTA(457, 462),
    /**
     * <code>RESPONSE_SET_BUCKET_HARD_QUOTA = 463;</code>
     */
    RESPONSE_SET_BUCKET_HARD_QUOTA(458, 463),
    /**
     * <code>REQUEST_ERCA_HEARTBEAT = 464;</code>
     */
    REQUEST_ERCA_HEARTBEAT(459, 464),
    /**
     * <code>RESPONSE_ERCA_HEARTBEAT = 465;</code>
     */
    RESPONSE_ERCA_HEARTBEAT(460, 465),
    /**
     * <code>REQUEST_CLIENT_EC_COMPLETE = 466;</code>
     */
    REQUEST_CLIENT_EC_COMPLETE(461, 466),
    /**
     * <code>RESPONSE_CLIENT_EC_COMPLETE = 467;</code>
     */
    RESPONSE_CLIENT_EC_COMPLETE(462, 467),
    /**
     * <code>REQUEST_GET_REMOTE_FILE_VERSION = 470;</code>
     */
    REQUEST_GET_REMOTE_FILE_VERSION(463, 470),
    /**
     * <code>RESPONSE_GET_REMOTE_FILE_VERSION = 471;</code>
     */
    RESPONSE_GET_REMOTE_FILE_VERSION(464, 471),
    /**
     * <code>REQUEST_GET_REMOTE_FILE_VOLATILE_IMAGE = 472;</code>
     */
    REQUEST_GET_REMOTE_FILE_VOLATILE_IMAGE(465, 472),
    /**
     * <code>RESPONSE_GET_REMOTE_FILE_VOLATILE_IMAGE = 473;</code>
     */
    RESPONSE_GET_REMOTE_FILE_VOLATILE_IMAGE(466, 473),
    /**
     * <code>REQUEST_PAXOS_BULK_QUERY = 474;</code>
     *
     * <pre>
     * Paxos bulk query and delete request
     * </pre>
     */
    REQUEST_PAXOS_BULK_QUERY(467, 474),
    /**
     * <code>RESPONSE_PAXOS_BULK_QUERY = 475;</code>
     */
    RESPONSE_PAXOS_BULK_QUERY(468, 475),
    /**
     * <code>REQUEST_PAXOS_DELETE = 476;</code>
     */
    REQUEST_PAXOS_DELETE(469, 476),
    /**
     * <code>RESPONSE_PAXOS_DELETE = 477;</code>
     */
    RESPONSE_PAXOS_DELETE(470, 477),
    /**
     * <code>REQUEST_PAXOS_DELETE_COMPLETE = 478;</code>
     */
    REQUEST_PAXOS_DELETE_COMPLETE(471, 478),
    /**
     * <code>RESPONSE_PAXOS_DELETE_COMPLETE = 479;</code>
     */
    RESPONSE_PAXOS_DELETE_COMPLETE(472, 479),
    /**
     * <code>REQUEST_CREATE_NFS_EXPORT_DEVICE = 480;</code>
     *
     * <pre>
     * === Commands for the NFS Export Datastore === 
     * </pre>
     */
    REQUEST_CREATE_NFS_EXPORT_DEVICE(473, 480),
    /**
     * <code>RESPONSE_CREATE_NFS_EXPORT_DEVICE = 481;</code>
     */
    RESPONSE_CREATE_NFS_EXPORT_DEVICE(474, 481),
    /**
     * <code>REQUEST_CREATE_NFS_EXPORT_DEVICE_TO_OWNER = 482;</code>
     */
    REQUEST_CREATE_NFS_EXPORT_DEVICE_TO_OWNER(475, 482),
    /**
     * <code>RESPONSE_CREATE_NFS_EXPORT_DEVICE_FROM_OWNER = 483;</code>
     */
    RESPONSE_CREATE_NFS_EXPORT_DEVICE_FROM_OWNER(476, 483),
    /**
     * <code>REQUEST_NAMESPACE_FOR_USER = 484;</code>
     *
     * <pre>
     * User namespace query
     * </pre>
     */
    REQUEST_NAMESPACE_FOR_USER(477, 484),
    /**
     * <code>RESPONSE_NAMESPACE_FOR_USER = 485;</code>
     */
    RESPONSE_NAMESPACE_FOR_USER(478, 485),
    /**
     * <code>REQUEST_WRITE_CURRENT_OBJECT_OWNER_FLAG = 486;</code>
     */
    REQUEST_WRITE_CURRENT_OBJECT_OWNER_FLAG(479, 486),
    /**
     * <code>RESPONSE_WRITE_CURRENT_OBJECT_OWNER_FLAG = 487;</code>
     */
    RESPONSE_WRITE_CURRENT_OBJECT_OWNER_FLAG(480, 487),
    /**
     * <code>REQUEST_OBJECT_ACL_QUERY = 488;</code>
     */
    REQUEST_OBJECT_ACL_QUERY(481, 488),
    /**
     * <code>RESPONSE_OBJECT_ACL_QUERY = 489;</code>
     */
    RESPONSE_OBJECT_ACL_QUERY(482, 489),
    /**
     * <code>REQUEST_CHECK_NODE = 490;</code>
     *
     * <pre>
     * vnest
     * </pre>
     */
    REQUEST_CHECK_NODE(483, 490),
    /**
     * <code>RESPONSE_CHECK_NODE = 491;</code>
     */
    RESPONSE_CHECK_NODE(484, 491),
    /**
     * <code>REQUEST_DT_MEMORY_USAGE = 492;</code>
     *
     * <pre>
     * DT memory
     * </pre>
     */
    REQUEST_DT_MEMORY_USAGE(485, 492),
    /**
     * <code>RESPONSE_DT_MEMORY_USAGE = 493;</code>
     */
    RESPONSE_DT_MEMORY_USAGE(486, 493),
    /**
     * <code>REQUEST_CONFIG_ENCKEY_GET = 494;</code>
     */
    REQUEST_CONFIG_ENCKEY_GET(487, 494),
    /**
     * <code>RESPONSE_CONFIG_ENCKEY_GET = 495;</code>
     */
    RESPONSE_CONFIG_ENCKEY_GET(488, 495),
    /**
     * <code>REQUEST_AUTHPROVIDER_CREATE = 496;</code>
     */
    REQUEST_AUTHPROVIDER_CREATE(489, 496),
    /**
     * <code>RESPONSE_AUTHPROVIDER_CREATE = 497;</code>
     */
    RESPONSE_AUTHPROVIDER_CREATE(490, 497),
    /**
     * <code>REQUEST_AUTHPROVIDER_GET = 498;</code>
     */
    REQUEST_AUTHPROVIDER_GET(491, 498),
    /**
     * <code>RESPONSE_AUTHPROVIDER_GET = 499;</code>
     */
    RESPONSE_AUTHPROVIDER_GET(492, 499),
    /**
     * <code>REQUEST_AUTHPROVIDER_UPDATE = 500;</code>
     */
    REQUEST_AUTHPROVIDER_UPDATE(493, 500),
    /**
     * <code>RESPONSE_AUTHPROVIDER_UPDATE = 501;</code>
     */
    RESPONSE_AUTHPROVIDER_UPDATE(494, 501),
    /**
     * <code>REQUEST_AUTHPROVIDER_DELETE = 502;</code>
     */
    REQUEST_AUTHPROVIDER_DELETE(495, 502),
    /**
     * <code>RESPONSE_AUTHPROVIDER_DELETE = 503;</code>
     */
    RESPONSE_AUTHPROVIDER_DELETE(496, 503),
    /**
     * <code>REQUEST_AUTHPROVIDER_LIST = 504;</code>
     */
    REQUEST_AUTHPROVIDER_LIST(497, 504),
    /**
     * <code>RESPONSE_AUTHPROVIDER_LIST = 505;</code>
     */
    RESPONSE_AUTHPROVIDER_LIST(498, 505),
    /**
     * <code>REQUEST_CHANGE_LOG_LEVEL = 506;</code>
     *
     * <pre>
     * log level
     * </pre>
     */
    REQUEST_CHANGE_LOG_LEVEL(499, 506),
    /**
     * <code>RESPONSE_CHANGE_LOG_LEVEL = 507;</code>
     */
    RESPONSE_CHANGE_LOG_LEVEL(500, 507),
    /**
     * <code>REQUEST_LATEST_ZONE_LEVEL_METERING_INFO = 508;</code>
     */
    REQUEST_LATEST_ZONE_LEVEL_METERING_INFO(501, 508),
    /**
     * <code>RESPONSE_LATEST_ZONE_LEVEL_METERING_INFO = 509;</code>
     */
    RESPONSE_LATEST_ZONE_LEVEL_METERING_INFO(502, 509),
    /**
     * <code>REQUEST_ZONE_LEVEL_METERING_INFOS = 510;</code>
     */
    REQUEST_ZONE_LEVEL_METERING_INFOS(503, 510),
    /**
     * <code>RESPONSE_ZONE_LEVEL_METERING_INFOS = 511;</code>
     */
    RESPONSE_ZONE_LEVEL_METERING_INFOS(504, 511),
    /**
     * <code>REQUEST_LATEST_NODE_LEVEL_METERING_INFO = 512;</code>
     */
    REQUEST_LATEST_NODE_LEVEL_METERING_INFO(505, 512),
    /**
     * <code>RESPONSE_LATEST_NODE_LEVEL_METERING_INFO = 513;</code>
     */
    RESPONSE_LATEST_NODE_LEVEL_METERING_INFO(506, 513),
    /**
     * <code>REQUEST_NODE_LEVEL_METERING_INFOS = 514;</code>
     */
    REQUEST_NODE_LEVEL_METERING_INFOS(507, 514),
    /**
     * <code>RESPONSE_NODE_LEVEL_METERING_INFOS = 515;</code>
     */
    RESPONSE_NODE_LEVEL_METERING_INFOS(508, 515),
    /**
     * <code>REQUEST_PAXOS_INSERT_TASK = 516;</code>
     */
    REQUEST_PAXOS_INSERT_TASK(509, 516),
    /**
     * <code>RESPONSE_PAXOS_INSERT_TASK = 517;</code>
     */
    RESPONSE_PAXOS_INSERT_TASK(510, 517),
    /**
     * <code>REQUEST_REBUILD_OBJECT_OWNER_HISTORY = 518;</code>
     *
     * <pre>
     *temp site outage
     * </pre>
     */
    REQUEST_REBUILD_OBJECT_OWNER_HISTORY(511, 518),
    /**
     * <code>RESPONSE_REBUILD_OBJECT_OWNER_HISTORY = 519;</code>
     */
    RESPONSE_REBUILD_OBJECT_OWNER_HISTORY(512, 519),
    /**
     * <code>REQUEST_ENABLE_NEST_DIAGNOSTIC = 520;</code>
     */
    REQUEST_ENABLE_NEST_DIAGNOSTIC(513, 520),
    /**
     * <code>RESPONSE_ENABLE_NEST_DIAGNOSTIC = 521;</code>
     */
    RESPONSE_ENABLE_NEST_DIAGNOSTIC(514, 521),
    /**
     * <code>REQUEST_XOR_DECODE_FOR_READ_CHUNK = 522;</code>
     *
     * <pre>
     * XOR Decode for READ
     * </pre>
     */
    REQUEST_XOR_DECODE_FOR_READ_CHUNK(515, 522),
    /**
     * <code>RESPONSE_XOR_DECODE_FOR_READ_CHUNK = 523;</code>
     */
    RESPONSE_XOR_DECODE_FOR_READ_CHUNK(516, 523),
    /**
     * <code>REQUEST_LIST_OBJECTS = 524;</code>
     */
    REQUEST_LIST_OBJECTS(517, 524),
    /**
     * <code>RESPONSE_LIST_OBJECTS = 525;</code>
     */
    RESPONSE_LIST_OBJECTS(518, 525),
    /**
     * <code>REQUEST_LIST_OBJECT_VERSIONS = 526;</code>
     */
    REQUEST_LIST_OBJECT_VERSIONS(519, 526),
    /**
     * <code>RESPONSE_LIST_OBJECT_VERSIONS = 527;</code>
     */
    RESPONSE_LIST_OBJECT_VERSIONS(520, 527),
    /**
     * <code>REQUEST_CACHE_INVALIDATE = 528;</code>
     *
     * <pre>
     * Invalidation Request
     * </pre>
     */
    REQUEST_CACHE_INVALIDATE(521, 528),
    /**
     * <code>RESPONSE_CACHE_INVALIDATE = 529;</code>
     */
    RESPONSE_CACHE_INVALIDATE(522, 529),
    /**
     * <code>REQUEST_FIND_MPU = 576;</code>
     *
     * <pre>
     * For MPU
     * </pre>
     */
    REQUEST_FIND_MPU(523, 576),
    /**
     * <code>RESPONSE_FIND_MPU = 577;</code>
     */
    RESPONSE_FIND_MPU(524, 577),
    /**
     * <code>REQUEST_GET_MPU_OWNERSHIP = 578;</code>
     */
    REQUEST_GET_MPU_OWNERSHIP(525, 578),
    /**
     * <code>RESPONSE_GET_MPU_OWNERSHIP = 579;</code>
     */
    RESPONSE_GET_MPU_OWNERSHIP(526, 579),
    /**
     * <code>REQUEST_RECYCLE_MPU_T_ENTRY = 580;</code>
     */
    REQUEST_RECYCLE_MPU_T_ENTRY(527, 580),
    /**
     * <code>RESPONSE_RECYCLE_MPU_T_ENTRY = 581;</code>
     */
    RESPONSE_RECYCLE_MPU_T_ENTRY(528, 581),
    /**
     * <code>REQUEST_DELETE_MPUSCANNER_MARKER_PROGRESS = 582;</code>
     */
    REQUEST_DELETE_MPUSCANNER_MARKER_PROGRESS(529, 582),
    /**
     * <code>RESPONSE_DELETE_MPUSCANNER_MARKER_PROGRESS = 583;</code>
     */
    RESPONSE_DELETE_MPUSCANNER_MARKER_PROGRESS(530, 583),
    /**
     * <code>REQUEST_LIST_ALL_UPLOADS = 584;</code>
     */
    REQUEST_LIST_ALL_UPLOADS(531, 584),
    /**
     * <code>RESPONSE_LIST_ALL_UPLOADS = 585;</code>
     */
    RESPONSE_LIST_ALL_UPLOADS(532, 585),
    /**
     * <code>REQUEST_UPDATE_REPO_USAGE = 586;</code>
     *
     * <pre>
     * RR DT
     * </pre>
     */
    REQUEST_UPDATE_REPO_USAGE(533, 586),
    /**
     * <code>RESPONSE_UPDATE_REPO_USAGE = 587;</code>
     */
    RESPONSE_UPDATE_REPO_USAGE(534, 587),
    /**
     * <code>REQUEST_INSERT_REMOTE_PARTIALGC_TASK = 588;</code>
     */
    REQUEST_INSERT_REMOTE_PARTIALGC_TASK(535, 588),
    /**
     * <code>RESPONSE_INSERT_REMOTE_PARTIALGC_TASK = 589;</code>
     */
    RESPONSE_INSERT_REMOTE_PARTIALGC_TASK(536, 589),
    /**
     * <code>REQUEST_INSERT_REMOTE_PARTIALGC_CONTEXT = 590;</code>
     */
    REQUEST_INSERT_REMOTE_PARTIALGC_CONTEXT(537, 590),
    /**
     * <code>RESPONSE_INSERT_REMOTE_PARTIALGC_CONTEXT = 591;</code>
     */
    RESPONSE_INSERT_REMOTE_PARTIALGC_CONTEXT(538, 591),
    /**
     * <code>REQUEST_UPDATE_OBJECT_FOR_PARTIALGC = 592;</code>
     *
     * <pre>
     * OB DT
     * </pre>
     */
    REQUEST_UPDATE_OBJECT_FOR_PARTIALGC(539, 592),
    /**
     * <code>RESPONSE_UPDATE_OBJECT_FOR_PARTIALGC = 593;</code>
     */
    RESPONSE_UPDATE_OBJECT_FOR_PARTIALGC(540, 593),
    /**
     * <code>REQUEST_ALERT_SET_ACK = 594;</code>
     *
     * <pre>
     *set alert acknowledgement command
     * </pre>
     */
    REQUEST_ALERT_SET_ACK(541, 594),
    /**
     * <code>RESPONSE_ALERT_SET_ACK = 595;</code>
     */
    RESPONSE_ALERT_SET_ACK(542, 595),
    /**
     * <code>REQUEST_GET_KEK = 596;</code>
     */
    REQUEST_GET_KEK(543, 596),
    /**
     * <code>RESPONSE_GET_KEK = 597;</code>
     */
    RESPONSE_GET_KEK(544, 597),
    /**
     * <code>REQUEST_SET_KEK = 598;</code>
     */
    REQUEST_SET_KEK(545, 598),
    /**
     * <code>RESPONSE_SET_KEK = 599;</code>
     */
    RESPONSE_SET_KEK(546, 599),
    /**
     * <code>REQUEST_GET_STAT = 600;</code>
     *
     * <pre>
     * don't move please
     * </pre>
     */
    REQUEST_GET_STAT(547, 600),
    /**
     * <code>RESPONSE_GET_STAT = 601;</code>
     */
    RESPONSE_GET_STAT(548, 601),
    /**
     * <code>REQUEST_PUSH_STAT = 602;</code>
     */
    REQUEST_PUSH_STAT(549, 602),
    /**
     * <code>RESPONSE_PUSH_STAT = 603;</code>
     */
    RESPONSE_PUSH_STAT(550, 603),
    /**
     * <code>REQUEST_GET_HISTORY = 604;</code>
     */
    REQUEST_GET_HISTORY(551, 604),
    /**
     * <code>RESPONSE_GET_HISTORY = 605;</code>
     */
    RESPONSE_GET_HISTORY(552, 605),
    /**
     * <code>REQUEST_STAT_UPDATE = 606;</code>
     */
    REQUEST_STAT_UPDATE(553, 606),
    /**
     * <code>RESPONSE_STAT_UPDATE = 607;</code>
     */
    RESPONSE_STAT_UPDATE(554, 607),
    /**
     * <code>REQUEST_BACKUP_STAT = 608;</code>
     *
     * <pre>
     * statistics backup
     * </pre>
     */
    REQUEST_BACKUP_STAT(555, 608),
    /**
     * <code>RESPONSE_BACKUP_STAT = 609;</code>
     */
    RESPONSE_BACKUP_STAT(556, 609),
    /**
     * <code>REQUEST_STAT_REMOVE = 610;</code>
     */
    REQUEST_STAT_REMOVE(557, 610),
    /**
     * <code>RESPONSE_STAT_REMOVE = 611;</code>
     */
    RESPONSE_STAT_REMOVE(558, 611),
    /**
     * <code>REQUEST_STAT_RESERVED_5 = 612;</code>
     */
    REQUEST_STAT_RESERVED_5(559, 612),
    /**
     * <code>REQUEST_STAT_RESERVED_6 = 613;</code>
     */
    REQUEST_STAT_RESERVED_6(560, 613),
    /**
     * <code>REQUEST_OVERTAKE_OWNER_FOR_FAILED_NODE = 614;</code>
     *
     * <pre>
     * Ownership Overtake for failed nodes request
     * </pre>
     */
    REQUEST_OVERTAKE_OWNER_FOR_FAILED_NODE(561, 614),
    /**
     * <code>RESPONSE_OVERTAKE_OWNER_FOR_FAILED_NODE = 615;</code>
     */
    RESPONSE_OVERTAKE_OWNER_FOR_FAILED_NODE(562, 615),
    /**
     * <code>REQUEST_SET_ACTIVEMASTERKEY_RECORD = 616;</code>
     */
    REQUEST_SET_ACTIVEMASTERKEY_RECORD(563, 616),
    /**
     * <code>RESPONSE_SET_ACTIVEMASTERKEY_RECORD = 617;</code>
     */
    RESPONSE_SET_ACTIVEMASTERKEY_RECORD(564, 617),
    /**
     * <code>REQUEST_SET_MASTERKEY_RECORD = 618;</code>
     */
    REQUEST_SET_MASTERKEY_RECORD(565, 618),
    /**
     * <code>RESPONSE_SET_MASTERKEY_RECORD = 619;</code>
     */
    RESPONSE_SET_MASTERKEY_RECORD(566, 619),
    /**
     * <code>REQUEST_GET_MASTERKEY_RECORD = 620;</code>
     */
    REQUEST_GET_MASTERKEY_RECORD(567, 620),
    /**
     * <code>RESPONSE_GET_MASTERKEY_RECORD = 621;</code>
     */
    RESPONSE_GET_MASTERKEY_RECORD(568, 621),
    /**
     * <code>REQUEST_CREATE_MASTERKEY_RECORD = 622;</code>
     */
    REQUEST_CREATE_MASTERKEY_RECORD(569, 622),
    /**
     * <code>RESPONSE_CREATE_MASTERKEY_RECORD = 623;</code>
     */
    RESPONSE_CREATE_MASTERKEY_RECORD(570, 623),
    /**
     * <code>REQUEST_PARTIALGC_CHECK_DELETING = 624;</code>
     */
    REQUEST_PARTIALGC_CHECK_DELETING(571, 624),
    /**
     * <code>RESPONSE_PARTIALGC_CHECK_DELETING = 625;</code>
     */
    RESPONSE_PARTIALGC_CHECK_DELETING(572, 625),
    /**
     * <code>REQUEST_SET_BUCKET_ACTIVE_KEY = 626;</code>
     */
    REQUEST_SET_BUCKET_ACTIVE_KEY(573, 626),
    /**
     * <code>RESPONSE_SET_BUCKET_ACTIVE_KEY = 627;</code>
     */
    RESPONSE_SET_BUCKET_ACTIVE_KEY(574, 627),
    /**
     * <code>REQUEST_SET_NAMESPACE_ACTIVE_KEY = 628;</code>
     */
    REQUEST_SET_NAMESPACE_ACTIVE_KEY(575, 628),
    /**
     * <code>RESPONSE_SET_NAMESPACE_ACTIVE_KEY = 629;</code>
     */
    RESPONSE_SET_NAMESPACE_ACTIVE_KEY(576, 629),
    /**
     * <code>REQUEST_GET_ACTIVEMASTERKEY_RECORD = 630;</code>
     */
    REQUEST_GET_ACTIVEMASTERKEY_RECORD(577, 630),
    /**
     * <code>RESPONSE_GET_ACTIVEMASTERKEY_RECORD = 631;</code>
     */
    RESPONSE_GET_ACTIVEMASTERKEY_RECORD(578, 631),
    /**
     * <code>REQUEST_ADD_GENERIC_METADATA = 632;</code>
     */
    REQUEST_ADD_GENERIC_METADATA(579, 632),
    /**
     * <code>RESPONSE_ADD_GENERIC_METADATA = 633;</code>
     */
    RESPONSE_ADD_GENERIC_METADATA(580, 633),
    /**
     * <code>REQUEST_UPDATE_GENERIC_METADATA = 634;</code>
     */
    REQUEST_UPDATE_GENERIC_METADATA(581, 634),
    /**
     * <code>RESPONSE_UPDATE_GENERIC_METADATA = 635;</code>
     */
    RESPONSE_UPDATE_GENERIC_METADATA(582, 635),
    /**
     * <code>REQUEST_DELETE_GENERIC_METADATA = 636;</code>
     */
    REQUEST_DELETE_GENERIC_METADATA(583, 636),
    /**
     * <code>RESPONSE_DELETE_GENERIC_METADATA = 637;</code>
     */
    RESPONSE_DELETE_GENERIC_METADATA(584, 637),
    /**
     * <code>REQUEST_CLEAR_BUCKET_LOCK = 638;</code>
     */
    REQUEST_CLEAR_BUCKET_LOCK(585, 638),
    /**
     * <code>RESPONSE_CLEAR_BUCKET_LOCK = 639;</code>
     */
    RESPONSE_CLEAR_BUCKET_LOCK(586, 639),
    /**
     * <code>REQUEST_FILEKEYVAL_CREATE = 644;</code>
     *
     * <pre>
     * === Begin filesvc Commands === 
     * </pre>
     */
    REQUEST_FILEKEYVAL_CREATE(587, 644),
    /**
     * <code>RESPONSE_FILEKEYVAL_CREATE = 645;</code>
     */
    RESPONSE_FILEKEYVAL_CREATE(588, 645),
    /**
     * <code>REQUEST_FILEKEYVAL_GET = 646;</code>
     */
    REQUEST_FILEKEYVAL_GET(589, 646),
    /**
     * <code>RESPONSE_FILEKEYVAL_GET = 647;</code>
     */
    RESPONSE_FILEKEYVAL_GET(590, 647),
    /**
     * <code>REQUEST_FILEKEYVAL_DELETE = 648;</code>
     */
    REQUEST_FILEKEYVAL_DELETE(591, 648),
    /**
     * <code>RESPONSE_FILEKEYVAL_DELETE = 649;</code>
     */
    RESPONSE_FILEKEYVAL_DELETE(592, 649),
    /**
     * <code>REQUEST_FILEKEYVAL_UPDATE = 650;</code>
     */
    REQUEST_FILEKEYVAL_UPDATE(593, 650),
    /**
     * <code>RESPONSE_FILEKEYVAL_UPDATE = 651;</code>
     */
    RESPONSE_FILEKEYVAL_UPDATE(594, 651),
    /**
     * <code>REQUEST_FILEKEYVAL_LIST = 652;</code>
     */
    REQUEST_FILEKEYVAL_LIST(595, 652),
    /**
     * <code>RESPONSE_FILEKEYVAL_LIST = 653;</code>
     *
     * <pre>
     * === End filesvc Commands === 
     * </pre>
     */
    RESPONSE_FILEKEYVAL_LIST(596, 653),
    /**
     * <code>REQUEST_START_PARTIALGC = 654;</code>
     *
     * <pre>
     * CT DT
     * </pre>
     */
    REQUEST_START_PARTIALGC(597, 654),
    /**
     * <code>RESPONSE_START_PARTIALGC = 655;</code>
     */
    RESPONSE_START_PARTIALGC(598, 655),
    /**
     * <code>REQUEST_FINISH_PARTIALGC = 656;</code>
     */
    REQUEST_FINISH_PARTIALGC(599, 656),
    /**
     * <code>RESPONSE_FINISH_PARTIALGC = 657;</code>
     */
    RESPONSE_FINISH_PARTIALGC(600, 657),
    /**
     * <code>REQUEST_PARTIALGC_CHUNK_REFRESH = 658;</code>
     */
    REQUEST_PARTIALGC_CHUNK_REFRESH(601, 658),
    /**
     * <code>RESPONSE_PARTIALGC_CHUNK_REFRESH = 659;</code>
     */
    RESPONSE_PARTIALGC_CHUNK_REFRESH(602, 659),
    /**
     * <code>REQUEST_CHUNK_SET_SECONDARY_REPLICATED = 660;</code>
     */
    REQUEST_CHUNK_SET_SECONDARY_REPLICATED(603, 660),
    /**
     * <code>RESPONSE_CHUNK_SET_SECONDARY_REPLICATED = 661;</code>
     */
    RESPONSE_CHUNK_SET_SECONDARY_REPLICATED(604, 661),
    /**
     * <code>REQUEST_BUCKET_SET_ISMETADATASEARCHENABLED = 662;</code>
     */
    REQUEST_BUCKET_SET_ISMETADATASEARCHENABLED(605, 662),
    /**
     * <code>RESPONSE_BUCKET_SET_ISMETADATASEARCHENABLED = 663;</code>
     */
    RESPONSE_BUCKET_SET_ISMETADATASEARCHENABLED(606, 663),
    /**
     * <code>REQUEST_INGEST_SYSTEM_UNDER_TRANSFORMATION_REPO_CHUNK = 664;</code>
     */
    REQUEST_INGEST_SYSTEM_UNDER_TRANSFORMATION_REPO_CHUNK(607, 664),
    /**
     * <code>RESPONSE_INGEST_SYSTEM_UNDER_TRANSFORMATION_REPO_CHUNK = 665;</code>
     */
    RESPONSE_INGEST_SYSTEM_UNDER_TRANSFORMATION_REPO_CHUNK(608, 665),
    /**
     * <code>REQUEST_NFS_LIST_FILE_LOCKS = 666;</code>
     */
    REQUEST_NFS_LIST_FILE_LOCKS(609, 666),
    /**
     * <code>RESPONSE_NFS_LIST_FILE_LOCKS = 667;</code>
     */
    RESPONSE_NFS_LIST_FILE_LOCKS(610, 667),
    /**
     * <code>REQUEST_NFS_CREATE_FILE_LOCK = 668;</code>
     */
    REQUEST_NFS_CREATE_FILE_LOCK(611, 668),
    /**
     * <code>RESPONSE_NFS_CREATE_FILE_LOCK = 669;</code>
     */
    RESPONSE_NFS_CREATE_FILE_LOCK(612, 669),
    /**
     * <code>REQUEST_NFS_LOOKUP_PATH_BY_OID = 670;</code>
     */
    REQUEST_NFS_LOOKUP_PATH_BY_OID(613, 670),
    /**
     * <code>RESPONSE_NFS_LOOKUP_PATH_BY_OID = 671;</code>
     */
    RESPONSE_NFS_LOOKUP_PATH_BY_OID(614, 671),
    /**
     * <code>REQUEST_DELETE_OBJECT_OWNER_HISTORY = 684;</code>
     */
    REQUEST_DELETE_OBJECT_OWNER_HISTORY(615, 684),
    /**
     * <code>RESPONSE_DELETE_OBJECT_OWNER_HISTORY = 685;</code>
     */
    RESPONSE_DELETE_OBJECT_OWNER_HISTORY(616, 685),
    /**
     * <code>REQUEST_TEMP_FAILED_ZONE_HISTORY_LIST = 686;</code>
     */
    REQUEST_TEMP_FAILED_ZONE_HISTORY_LIST(617, 686),
    /**
     * <code>RESPONSE_TEMP_FAILED_ZONE_HISTORY_LIST = 687;</code>
     */
    RESPONSE_TEMP_FAILED_ZONE_HISTORY_LIST(618, 687),
    /**
     * <code>REQUEST_BUCKET_LIST_LOCALLY = 688;</code>
     */
    REQUEST_BUCKET_LIST_LOCALLY(619, 688),
    /**
     * <code>RESPONSE_BUCKET_LIST_LOCALLY = 689;</code>
     */
    RESPONSE_BUCKET_LIST_LOCALLY(620, 689),
    /**
     * <code>REQUEST_GET_BTREE_ONHEAPCACHE_STATS = 690;</code>
     */
    REQUEST_GET_BTREE_ONHEAPCACHE_STATS(621, 690),
    /**
     * <code>RESPONSE_GET_BTREE_ONHEAPCACHE_STATS = 691;</code>
     */
    RESPONSE_GET_BTREE_ONHEAPCACHE_STATS(622, 691),
    /**
     * <code>REQUEST_CHUNK_EC_RESET = 706;</code>
     */
    REQUEST_CHUNK_EC_RESET(623, 706),
    /**
     * <code>RESPONSE_CHUNK_EC_RESET = 707;</code>
     */
    RESPONSE_CHUNK_EC_RESET(624, 707),
    /**
     * <code>REQUEST_CREATE_OBJECT_MI_ENTRY_BATCH = 708;</code>
     */
    REQUEST_CREATE_OBJECT_MI_ENTRY_BATCH(625, 708),
    /**
     * <code>RESPONSE_CREATE_OBJECT_MI_ENTRY_BATCH = 709;</code>
     */
    RESPONSE_CREATE_OBJECT_MI_ENTRY_BATCH(626, 709),
    /**
     * <code>REQUEST_CREATE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH = 710;</code>
     */
    REQUEST_CREATE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH(627, 710),
    /**
     * <code>RESPONSE_CREATE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH = 711;</code>
     */
    RESPONSE_CREATE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH(628, 711),
    /**
     * <code>REQUEST_REMOVE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH = 712;</code>
     */
    REQUEST_REMOVE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH(629, 712),
    /**
     * <code>RESPONSE_REMOVE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH = 713;</code>
     */
    RESPONSE_REMOVE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH(630, 713),
    /**
     * <code>REQUEST_SKIP_CHUNKS_FOR_PARTIALGC = 720;</code>
     */
    REQUEST_SKIP_CHUNKS_FOR_PARTIALGC(631, 720),
    /**
     * <code>RESPONSE_SKIP_CHUNKS_FOR_PARTIALGC = 721;</code>
     */
    RESPONSE_SKIP_CHUNKS_FOR_PARTIALGC(632, 721),
    /**
     * <code>REQUEST_CHUNK_FIND_VALID_DATA_LENGTH = 722;</code>
     */
    REQUEST_CHUNK_FIND_VALID_DATA_LENGTH(633, 722),
    /**
     * <code>RESPONSE_CHUNK_FIND_VALID_DATA_LENGTH = 723;</code>
     */
    RESPONSE_CHUNK_FIND_VALID_DATA_LENGTH(634, 723),
    /**
     * <code>REQUEST_UPDATE_BTREE_REFERENCE = 724;</code>
     */
    REQUEST_UPDATE_BTREE_REFERENCE(635, 724),
    /**
     * <code>RESPONSE_UPDATE_BTREE_REFERENCE = 725;</code>
     */
    RESPONSE_UPDATE_BTREE_REFERENCE(636, 725),
    /**
     * <code>REQUEST_SSM_PARTITION_COMMAND = 820;</code>
     *
     * <pre>
     * For SSM (reserved 820-899)
     * </pre>
     */
    REQUEST_SSM_PARTITION_COMMAND(637, 820),
    /**
     * <code>RESPONSE_SSM_PARTITION_COMMAND = 821;</code>
     */
    RESPONSE_SSM_PARTITION_COMMAND(638, 821),
    /**
     * <code>REQUEST_SSM_PROGRESS_COMMAND = 822;</code>
     */
    REQUEST_SSM_PROGRESS_COMMAND(639, 822),
    /**
     * <code>RESPONSE_SSM_PROGRESS_COMMAND = 823;</code>
     */
    RESPONSE_SSM_PROGRESS_COMMAND(640, 823),
    /**
     * <code>REQUEST_SSM_SPACECALCULATOR_COMMAND = 824;</code>
     */
    REQUEST_SSM_SPACECALCULATOR_COMMAND(641, 824),
    /**
     * <code>RERPONSE_SSM_SPACECALCULATOR_COMMAND = 825;</code>
     */
    RERPONSE_SSM_SPACECALCULATOR_COMMAND(642, 825),
    /**
     * <code>REQUEST_SSM_RECORD_COMMAND = 826;</code>
     */
    REQUEST_SSM_RECORD_COMMAND(643, 826),
    /**
     * <code>RERPONSE_SSM_RECORD_COMMAND = 827;</code>
     */
    RERPONSE_SSM_RECORD_COMMAND(644, 827),
    /**
     * <code>REQUEST_SSM_FULL_MERGE_COMMAND = 828;</code>
     */
    REQUEST_SSM_FULL_MERGE_COMMAND(645, 828),
    /**
     * <code>RERPONSE_SSM_FULL_MERGE_COMMAND = 829;</code>
     */
    RERPONSE_SSM_FULL_MERGE_COMMAND(646, 829),
    /**
     * <code>REQUEST_SSM_NOTIFICATION = 830;</code>
     */
    REQUEST_SSM_NOTIFICATION(647, 830),
    /**
     * <code>RERPONSE_SSM_NOTIFICATION = 831;</code>
     */
    RERPONSE_SSM_NOTIFICATION(648, 831),
    /**
     * <code>REQUEST_SSM_RESERVED = 898;</code>
     */
    REQUEST_SSM_RESERVED(649, 898),
    /**
     * <code>RESPONSE_SSM_RESERVED = 899;</code>
     */
    RESPONSE_SSM_RESERVED(650, 899),
    /**
     * <code>REQUEST_TRANSFORMATION = 900;</code>
     *
     * <pre>
     * === Transformation commands === 
     * </pre>
     */
    REQUEST_TRANSFORMATION(651, 900),
    /**
     * <code>RESPONSE_TRANSFORMATION = 901;</code>
     */
    RESPONSE_TRANSFORMATION(652, 901),
    /**
     * <code>REQUEST_GIVE_OUT_OWNERSHIP = 910;</code>
     *
     * <pre>
     * For Ownership
     * </pre>
     */
    REQUEST_GIVE_OUT_OWNERSHIP(653, 910),
    /**
     * <code>RESPONSE_GIVE_OUT_OWNERSHIP = 911;</code>
     */
    RESPONSE_GIVE_OUT_OWNERSHIP(654, 911),
    /**
     * <code>REQUEST_CHECK_RECLAIMABLE = 914;</code>
     *
     * <pre>
     * For Metering
     * </pre>
     */
    REQUEST_CHECK_RECLAIMABLE(655, 914),
    /**
     * <code>RESPONSE_CHECK_RECLAIMABLE = 915;</code>
     */
    RESPONSE_CHECK_RECLAIMABLE(656, 915),
    /**
     * <code>REQUEST_RR_OPERATIONS = 916;</code>
     */
    REQUEST_RR_OPERATIONS(657, 916),
    /**
     * <code>RESPONSE_RR_OPERATIONS = 917;</code>
     */
    RESPONSE_RR_OPERATIONS(658, 917),
    /**
     * <code>REQUEST_INSERT_REMOTE_REGION_IN_BATCH = 950;</code>
     */
    REQUEST_INSERT_REMOTE_REGION_IN_BATCH(659, 950),
    /**
     * <code>RESPONSE_INSERT_REMOTE_REGION_IN_BATCH = 951;</code>
     */
    RESPONSE_INSERT_REMOTE_REGION_IN_BATCH(660, 951),
    /**
     * <code>REQUEST_GET_CHUNK_GC_SCAN_TASK_VALUES = 970;</code>
     */
    REQUEST_GET_CHUNK_GC_SCAN_TASK_VALUES(661, 970),
    /**
     * <code>RESPONSE_GET_CHUNK_GC_SCAN_TASK_VALUES = 971;</code>
     */
    RESPONSE_GET_CHUNK_GC_SCAN_TASK_VALUES(662, 971),
    /**
     * <code>REQUEST_NFSDIR_CREATE = 1000;</code>
     */
    REQUEST_NFSDIR_CREATE(663, 1000),
    /**
     * <code>RESPONSE_NFSDIR_CREATE = 1001;</code>
     */
    RESPONSE_NFSDIR_CREATE(664, 1001),
    /**
     * <code>REQUEST_NFSSYMLINK_CREATE = 1002;</code>
     */
    REQUEST_NFSSYMLINK_CREATE(665, 1002),
    /**
     * <code>RESPONSE_NFSSYMLINK_CREATE = 1003;</code>
     */
    RESPONSE_NFSSYMLINK_CREATE(666, 1003),
    /**
     * <code>REQUEST_NFSDIR_DELETE = 1004;</code>
     */
    REQUEST_NFSDIR_DELETE(667, 1004),
    /**
     * <code>RESPONSE_NFSDIR_DELETE = 1005;</code>
     */
    RESPONSE_NFSDIR_DELETE(668, 1005),
    /**
     * <code>REQUEST_NFSFILE_DELETE = 1006;</code>
     */
    REQUEST_NFSFILE_DELETE(669, 1006),
    /**
     * <code>RESPONSE_NFSFILE_DELETE = 1007;</code>
     */
    RESPONSE_NFSFILE_DELETE(670, 1007),
    /**
     * <code>REQUEST_NFSSYMLINK_DELETE = 1008;</code>
     */
    REQUEST_NFSSYMLINK_DELETE(671, 1008),
    /**
     * <code>RESPONSE_NFSSYMLINK_DELETE = 1009;</code>
     */
    RESPONSE_NFSSYMLINK_DELETE(672, 1009),
    /**
     * <code>REQUEST_NFS_GET_OID_AND_OWNERZONE = 1010;</code>
     */
    REQUEST_NFS_GET_OID_AND_OWNERZONE(673, 1010),
    /**
     * <code>RESPONSE_NFS_GET_OID_AND_OWNERZONE = 1011;</code>
     */
    RESPONSE_NFS_GET_OID_AND_OWNERZONE(674, 1011),
    /**
     * <code>REQUEST_NFS_LOOKUP = 1012;</code>
     */
    REQUEST_NFS_LOOKUP(675, 1012),
    /**
     * <code>RESPONSE_NFS_LOOKUP = 1013;</code>
     */
    RESPONSE_NFS_LOOKUP(676, 1013),
    /**
     * <code>REQUEST_NFSOBJECT_COPY = 1014;</code>
     */
    REQUEST_NFSOBJECT_COPY(677, 1014),
    /**
     * <code>RESPONSE_NFSOBJECT_COPY = 1015;</code>
     */
    RESPONSE_NFSOBJECT_COPY(678, 1015),
    /**
     * <code>REQUEST_NFSFILE_TRUNCATE = 1016;</code>
     */
    REQUEST_NFSFILE_TRUNCATE(679, 1016),
    /**
     * <code>RESPONSE_NFSFILE_TRUNCATE = 1017;</code>
     */
    RESPONSE_NFSFILE_TRUNCATE(680, 1017),
    /**
     * <code>REQUEST_NFS_ABORT_MULTIPART_UPLOAD = 1018;</code>
     */
    REQUEST_NFS_ABORT_MULTIPART_UPLOAD(681, 1018),
    /**
     * <code>RESPONSE_NFS_ABORT_MULTIPART_UPLOAD = 1019;</code>
     */
    RESPONSE_NFS_ABORT_MULTIPART_UPLOAD(682, 1019),
    /**
     * <code>REQUEST_NFS_LIST_PARTS = 1020;</code>
     */
    REQUEST_NFS_LIST_PARTS(683, 1020),
    /**
     * <code>RESPONSE_NFS_LIST_PARTS = 1021;</code>
     */
    RESPONSE_NFS_LIST_PARTS(684, 1021),
    /**
     * <code>REQUEST_NFS_GET_RETENTION = 1022;</code>
     */
    REQUEST_NFS_GET_RETENTION(685, 1022),
    /**
     * <code>RESPONSE_NFS_GET_RETENTION = 1023;</code>
     */
    RESPONSE_NFS_GET_RETENTION(686, 1023),
    /**
     * <code>REQUEST_NFS_SET_RETENTION = 1024;</code>
     */
    REQUEST_NFS_SET_RETENTION(687, 1024),
    /**
     * <code>RESPONSE_NFS_SET_RETENTION = 1025;</code>
     */
    RESPONSE_NFS_SET_RETENTION(688, 1025),
    /**
     * <code>REQUEST_NFS_GET_ACL = 1026;</code>
     */
    REQUEST_NFS_GET_ACL(689, 1026),
    /**
     * <code>RESPONSE_NFS_GET_ACL = 1027;</code>
     */
    RESPONSE_NFS_GET_ACL(690, 1027),
    /**
     * <code>REQUEST_NFS_SET_ACL = 1028;</code>
     */
    REQUEST_NFS_SET_ACL(691, 1028),
    /**
     * <code>RESPONSE_NFS_SET_ACL = 1029;</code>
     */
    RESPONSE_NFS_SET_ACL(692, 1029),
    /**
     * <code>REQUEST_NFS_DELETE_UMD = 1030;</code>
     */
    REQUEST_NFS_DELETE_UMD(693, 1030),
    /**
     * <code>RESPONSE_NFS_DELETE_UMD = 1031;</code>
     */
    RESPONSE_NFS_DELETE_UMD(694, 1031),
    /**
     * <code>REQUEST_NFS_DELETE_HEAD_SMD = 1032;</code>
     */
    REQUEST_NFS_DELETE_HEAD_SMD(695, 1032),
    /**
     * <code>RESPONSE_NFS_DELETE_HEAD_SMD = 1033;</code>
     */
    RESPONSE_NFS_DELETE_HEAD_SMD(696, 1033),
    /**
     * <code>REQUEST_NFS_SET_UMD = 1034;</code>
     */
    REQUEST_NFS_SET_UMD(697, 1034),
    /**
     * <code>RESPONSE_NFS_SET_UMD = 1035;</code>
     */
    RESPONSE_NFS_SET_UMD(698, 1035),
    /**
     * <code>REQUEST_NFS_SET_SMD = 1036;</code>
     */
    REQUEST_NFS_SET_SMD(699, 1036),
    /**
     * <code>RESPONSE_NFS_SET_SMD = 1037;</code>
     */
    RESPONSE_NFS_SET_SMD(700, 1037),
    /**
     * <code>REQUEST_NFS_GET_SMD = 1038;</code>
     */
    REQUEST_NFS_GET_SMD(701, 1038),
    /**
     * <code>RESPONSE_NFS_GET_SMD = 1039;</code>
     */
    RESPONSE_NFS_GET_SMD(702, 1039),
    /**
     * <code>REQUEST_NFS_GET_ALL_SMD = 1040;</code>
     */
    REQUEST_NFS_GET_ALL_SMD(703, 1040),
    /**
     * <code>RESPONSE_NFS_GET_ALL_SMD = 1041;</code>
     */
    RESPONSE_NFS_GET_ALL_SMD(704, 1041),
    /**
     * <code>REQUEST_NFS_GET_UMD = 1042;</code>
     */
    REQUEST_NFS_GET_UMD(705, 1042),
    /**
     * <code>RESPONSE_NFS_GET_UMD = 1043;</code>
     */
    RESPONSE_NFS_GET_UMD(706, 1043),
    /**
     * <code>REQUEST_NFS_GET_ALL_UMD = 1044;</code>
     */
    REQUEST_NFS_GET_ALL_UMD(707, 1044),
    /**
     * <code>RESPONSE_NFS_GET_ALL_UMD = 1045;</code>
     */
    RESPONSE_NFS_GET_ALL_UMD(708, 1045),
    /**
     * <code>REQUEST_NFSDIR_LIST = 1046;</code>
     */
    REQUEST_NFSDIR_LIST(709, 1046),
    /**
     * <code>RESPONSE_NFSDIR_LIST = 1047;</code>
     */
    RESPONSE_NFSDIR_LIST(710, 1047),
    /**
     * <code>REQUEST_NFSOBJECT_RENAME = 1048;</code>
     */
    REQUEST_NFSOBJECT_RENAME(711, 1048),
    /**
     * <code>RESPONSE_NFSOBJECT_RENAME = 1049;</code>
     */
    RESPONSE_NFSOBJECT_RENAME(712, 1049),
    /**
     * <code>REQUEST_NFSSYMLINK_GET_SMD = 1050;</code>
     */
    REQUEST_NFSSYMLINK_GET_SMD(713, 1050),
    /**
     * <code>RESPONSE_NFSSYMLINK_GET_SMD = 1051;</code>
     */
    RESPONSE_NFSSYMLINK_GET_SMD(714, 1051),
    /**
     * <code>REQUEST_NFSFILE_CREATE = 1052;</code>
     */
    REQUEST_NFSFILE_CREATE(715, 1052),
    /**
     * <code>RESPONSE_NFSFILE_CREATE = 1053;</code>
     */
    RESPONSE_NFSFILE_CREATE(716, 1053),
    /**
     * <code>REQUEST_FILEKEYVAL_GETANDINC = 1054;</code>
     *
     * <pre>
     * AutoIncrement for FileKeyVal RT - Filesvc
     * </pre>
     */
    REQUEST_FILEKEYVAL_GETANDINC(717, 1054),
    /**
     * <code>RESPONSE_FILEKEYVAL_GETANDINC = 1055;</code>
     */
    RESPONSE_FILEKEYVAL_GETANDINC(718, 1055),
    /**
     * <code>REQUEST_NFS_GET_ALL_SMD_AND_UMD = 1056;</code>
     */
    REQUEST_NFS_GET_ALL_SMD_AND_UMD(719, 1056),
    /**
     * <code>RESPONSE_NFS_GET_ALL_SMD_AND_UMD = 1057;</code>
     */
    RESPONSE_NFS_GET_ALL_SMD_AND_UMD(720, 1057),
    /**
     * <code>REQUEST_NFS_REPLICATION_INFO = 1058;</code>
     */
    REQUEST_NFS_REPLICATION_INFO(721, 1058),
    /**
     * <code>RESPONSE_NFS_REPLICATION_INFO = 1059;</code>
     */
    RESPONSE_NFS_REPLICATION_INFO(722, 1059),
    /**
     * <code>REQUEST_MI_QUERY = 1060;</code>
     *
     * <pre>
     *Metadata index search
     * </pre>
     */
    REQUEST_MI_QUERY(723, 1060),
    /**
     * <code>RESPONSE_MI_QUERY = 1061;</code>
     */
    RESPONSE_MI_QUERY(724, 1061),
    /**
     * <code>REQUEST_GET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY = 1062;</code>
     */
    REQUEST_GET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY(725, 1062),
    /**
     * <code>RESPONSE_GET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY = 1063;</code>
     */
    RESPONSE_GET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY(726, 1063),
    /**
     * <code>REQUEST_LIST_OBJECT_LIST_ENTRIES = 1064;</code>
     */
    REQUEST_LIST_OBJECT_LIST_ENTRIES(727, 1064),
    /**
     * <code>RESPONSE_LIST_OBJECT_LIST_ENTRIES = 1065;</code>
     */
    RESPONSE_LIST_OBJECT_LIST_ENTRIES(728, 1065),
    /**
     * <code>REQUEST_GET_OR_CREATE_BUCKET_ACTIVE_KEY = 1070;</code>
     *
     * <pre>
     *Dare KEK keys for bucket and ns
     * </pre>
     */
    REQUEST_GET_OR_CREATE_BUCKET_ACTIVE_KEY(729, 1070),
    /**
     * <code>RESPONSE_GET_OR_CREATE_BUCKET_ACTIVE_KEY = 1071;</code>
     */
    RESPONSE_GET_OR_CREATE_BUCKET_ACTIVE_KEY(730, 1071),
    /**
     * <code>REQUEST_GET_OR_CREATE_NAMESPACE_ACTIVE_KEY = 1072;</code>
     */
    REQUEST_GET_OR_CREATE_NAMESPACE_ACTIVE_KEY(731, 1072),
    /**
     * <code>RESPONSE_GET_OR_CREATE_NAMESPACE_ACTIVE_KEY = 1073;</code>
     */
    RESPONSE_GET_OR_CREATE_NAMESPACE_ACTIVE_KEY(732, 1073),
    /**
     * <code>REQUEST_TAKE_BUCKET_SNAPSHOT = 1074;</code>
     *
     * <pre>
     *bucket snapshot request
     * </pre>
     */
    REQUEST_TAKE_BUCKET_SNAPSHOT(733, 1074),
    /**
     * <code>RESPONSE_TAKE_BUCKET_SNAPSHOT = 1075;</code>
     */
    RESPONSE_TAKE_BUCKET_SNAPSHOT(734, 1075),
    /**
     * <code>REQUEST_REVERT_BUCKET_SNAPSHOT = 1076;</code>
     */
    REQUEST_REVERT_BUCKET_SNAPSHOT(735, 1076),
    /**
     * <code>RESPONSE_REVERT_BUCKET_SNAPSHOT = 1077;</code>
     */
    RESPONSE_REVERT_BUCKET_SNAPSHOT(736, 1077),
    /**
     * <code>REQUEST_DELETE_BUCKET_SNAPSHOT = 1078;</code>
     */
    REQUEST_DELETE_BUCKET_SNAPSHOT(737, 1078),
    /**
     * <code>RESPONSE_DELETE_BUCKET_SNAPSHOT = 1079;</code>
     */
    RESPONSE_DELETE_BUCKET_SNAPSHOT(738, 1079),
    /**
     * <code>REQUEST_LIST_BUCKET_SNAPSHOT = 1080;</code>
     */
    REQUEST_LIST_BUCKET_SNAPSHOT(739, 1080),
    /**
     * <code>RESPONSE_LIST_BUCKET_SNAPSHOT = 1081;</code>
     */
    RESPONSE_LIST_BUCKET_SNAPSHOT(740, 1081),
    /**
     * <code>REQUEST_REVERT_OBJECT_SNAPSHOT = 1082;</code>
     */
    REQUEST_REVERT_OBJECT_SNAPSHOT(741, 1082),
    /**
     * <code>RESPONSE_REVERT_OBJECT_SNAPSHOT = 1083;</code>
     */
    RESPONSE_REVERT_OBJECT_SNAPSHOT(742, 1083),
    /**
     * <code>REQUEST_DELETE_BUCKET_STATE_SNAPSHOT = 1084;</code>
     */
    REQUEST_DELETE_BUCKET_STATE_SNAPSHOT(743, 1084),
    /**
     * <code>RESPONSE_DELETE_BUCKET_STATE_SNAPSHOT = 1085;</code>
     */
    RESPONSE_DELETE_BUCKET_STATE_SNAPSHOT(744, 1085),
    /**
     * <code>REQUEST_REVERT_OBJECT_LIST_ENTRY_SNAPSHOT = 1086;</code>
     */
    REQUEST_REVERT_OBJECT_LIST_ENTRY_SNAPSHOT(745, 1086),
    /**
     * <code>RESPONSE_REVERT_OBJECT_LIST_ENTRY_SNAPSHOT = 1087;</code>
     */
    RESPONSE_REVERT_OBJECT_LIST_ENTRY_SNAPSHOT(746, 1087),
    /**
     * <code>REQUEST_LIST_OBJECTS_BY_TAG = 1100;</code>
     *
     * <pre>
     *ATMOS Listable Tag
     * </pre>
     */
    REQUEST_LIST_OBJECTS_BY_TAG(747, 1100),
    /**
     * <code>RESPONSE_LIST_OBJECTS_BY_TAG = 1101;</code>
     */
    RESPONSE_LIST_OBJECTS_BY_TAG(748, 1101),
    /**
     * <code>REQUEST_QUERY_LISTABLE_TAG_HIERARCHY = 1102;</code>
     */
    REQUEST_QUERY_LISTABLE_TAG_HIERARCHY(749, 1102),
    /**
     * <code>RESPONSE_QUERY_LISTABLE_TAG_HIERARCHY = 1103;</code>
     */
    RESPONSE_QUERY_LISTABLE_TAG_HIERARCHY(750, 1103),
    /**
     * <code>REQUEST_UPGRADE_LISTABLE_TAG = 1104;</code>
     */
    REQUEST_UPGRADE_LISTABLE_TAG(751, 1104),
    /**
     * <code>RESPONSE_UPGRADE_LISTABLE_TAG = 1105;</code>
     */
    RESPONSE_UPGRADE_LISTABLE_TAG(752, 1105),
    /**
     * <code>REQUEST_GET_REJOIN_PROGRESS = 1106;</code>
     *
     * <pre>
     *TSO Rejoin Progress
     * </pre>
     */
    REQUEST_GET_REJOIN_PROGRESS(753, 1106),
    /**
     * <code>RESPONSE_GET_REJOIN_PROGRESS = 1107;</code>
     */
    RESPONSE_GET_REJOIN_PROGRESS(754, 1107),
    /**
     * <code>REQUEST_DELETE_REJOIN_PROGRESS = 1108;</code>
     */
    REQUEST_DELETE_REJOIN_PROGRESS(755, 1108),
    /**
     * <code>RESPONSE_DELETE_REJOIN_PROGRESS = 1109;</code>
     */
    RESPONSE_DELETE_REJOIN_PROGRESS(756, 1109),
    /**
     * <code>REQUEST_OWNERSHIP_PING = 1200;</code>
     *
     * <pre>
     *======================================
     * </pre>
     */
    REQUEST_OWNERSHIP_PING(757, 1200),
    /**
     * <code>RESPONSE_OWNERSHIP_PING = 1201;</code>
     */
    RESPONSE_OWNERSHIP_PING(758, 1201),
    /**
     * <code>REQUEST_CHUNK_TABLE_DT_QUERY = 1202;</code>
     *
     * <pre>
     *The range in [1202, 1215] is reserved for corruption scanner
     * </pre>
     */
    REQUEST_CHUNK_TABLE_DT_QUERY(759, 1202),
    /**
     * <code>RESPONSE_CHUNK_TABLE_DT_QUERY = 1203;</code>
     */
    RESPONSE_CHUNK_TABLE_DT_QUERY(760, 1203),
    /**
     * <code>REQUEST_CHUNK_GC_READY = 1216;</code>
     */
    REQUEST_CHUNK_GC_READY(761, 1216),
    /**
     * <code>RESPONSE_CHUNK_GC_READY = 1217;</code>
     */
    RESPONSE_CHUNK_GC_READY(762, 1217),
    /**
     * <code>REQUEST_VNEST_DIAGNOSTIC = 1218;</code>
     */
    REQUEST_VNEST_DIAGNOSTIC(763, 1218),
    /**
     * <code>RESPONSE_VNEST_DIAGNOSTIC = 1219;</code>
     */
    RESPONSE_VNEST_DIAGNOSTIC(764, 1219),
    /**
     * <code>REQUEST_INSERT_BANDWIDTH_DATA_GROUP = 1220;</code>
     */
    REQUEST_INSERT_BANDWIDTH_DATA_GROUP(765, 1220),
    /**
     * <code>RESPONSE_INSERT_BANDWIDTH_DATA_GROUP = 1221;</code>
     */
    RESPONSE_INSERT_BANDWIDTH_DATA_GROUP(766, 1221),
    /**
     * <code>REQUEST_POSITIVE_REF_MARKER = 1222;</code>
     *
     * <pre>
     * Metering blobsvc request
     * </pre>
     */
    REQUEST_POSITIVE_REF_MARKER(767, 1222),
    /**
     * <code>RESPONSE_POSITIVE_REF_MARKER = 1223;</code>
     */
    RESPONSE_POSITIVE_REF_MARKER(768, 1223),
    /**
     * <code>REQUEST_UPDATE_METERING_PROGRESS_MARKER = 1224;</code>
     */
    REQUEST_UPDATE_METERING_PROGRESS_MARKER(769, 1224),
    /**
     * <code>RESPONSE_UPDATE_METERING_PROGRESS_MARKER = 1225;</code>
     */
    RESPONSE_UPDATE_METERING_PROGRESS_MARKER(770, 1225),
    /**
     * <code>REQUEST_GET_METERING_JOURNAL_PARSER_MARKER = 1226;</code>
     *
     * <pre>
     * Metering Journal Parser
     * </pre>
     */
    REQUEST_GET_METERING_JOURNAL_PARSER_MARKER(771, 1226),
    /**
     * <code>RESPONSE_GET_METERING_JOURNAL_PARSER_MARKER = 1227;</code>
     */
    RESPONSE_GET_METERING_JOURNAL_PARSER_MARKER(772, 1227),
    /**
     * <code>REQUEST_SET_METERING_JOURNAL_PARSER_MARKER = 1228;</code>
     */
    REQUEST_SET_METERING_JOURNAL_PARSER_MARKER(773, 1228),
    /**
     * <code>RESPONSE_SET_METERING_JOURNAL_PARSER_MARKER = 1229;</code>
     */
    RESPONSE_SET_METERING_JOURNAL_PARSER_MARKER(774, 1229),
    /**
     * <code>REQUEST_NFS_LIST_FILES_BY_PATHS = 1230;</code>
     */
    REQUEST_NFS_LIST_FILES_BY_PATHS(775, 1230),
    /**
     * <code>RESPONSE_NFS_LIST_FILES_BY_PATHS = 1231;</code>
     */
    RESPONSE_NFS_LIST_FILES_BY_PATHS(776, 1231),
    /**
     * <code>REQUEST_REPLACE_BLOCKS = 1232;</code>
     *
     * <pre>
     *Replace Blocks
     * </pre>
     */
    REQUEST_REPLACE_BLOCKS(777, 1232),
    /**
     * <code>RESPONSE_REPLACE_BLOCKS = 1233;</code>
     */
    RESPONSE_REPLACE_BLOCKS(778, 1233),
    /**
     * <code>REQUEST_NFS_SET_SMD_UMD = 1234;</code>
     */
    REQUEST_NFS_SET_SMD_UMD(779, 1234),
    /**
     * <code>RESPONSE_NFS_SET_SMD_UMD = 1235;</code>
     */
    RESPONSE_NFS_SET_SMD_UMD(780, 1235),
    /**
     * <code>REQUEST_GET_CLUSTER_ID = 1236;</code>
     */
    REQUEST_GET_CLUSTER_ID(781, 1236),
    /**
     * <code>RESPONSE_GET_CLUSTER_ID = 1237;</code>
     */
    RESPONSE_GET_CLUSTER_ID(782, 1237),
    /**
     * <code>REQUEST_UPDATE_CLUSTER_ID = 1238;</code>
     */
    REQUEST_UPDATE_CLUSTER_ID(783, 1238),
    /**
     * <code>RESPONSE_UPDATE_CLUSTER_ID = 1239;</code>
     */
    RESPONSE_UPDATE_CLUSTER_ID(784, 1239),
    /**
     * <code>REQUEST_CHECK_RG_CONTAINS_ZONE = 1240;</code>
     */
    REQUEST_CHECK_RG_CONTAINS_ZONE(785, 1240),
    /**
     * <code>RESPONSE_CHECK_RG_CONTAINS_ZONE = 1241;</code>
     */
    RESPONSE_CHECK_RG_CONTAINS_ZONE(786, 1241),
    /**
     * <code>REQUEST_CREATE_HDFS_DELEGATION_TOKEN = 1242;</code>
     *
     * <pre>
     * HDFS Delegation Token info in RT table
     * </pre>
     */
    REQUEST_CREATE_HDFS_DELEGATION_TOKEN(787, 1242),
    /**
     * <code>RESPONSE_CREATE_HDFS_DELEGATION_TOKEN = 1243;</code>
     */
    RESPONSE_CREATE_HDFS_DELEGATION_TOKEN(788, 1243),
    /**
     * <code>REQUEST_GET_HDFS_DELEGATION_TOKEN = 1244;</code>
     */
    REQUEST_GET_HDFS_DELEGATION_TOKEN(789, 1244),
    /**
     * <code>RESPONSE_GET_HDFS_DELEGATION_TOKEN = 1245;</code>
     */
    RESPONSE_GET_HDFS_DELEGATION_TOKEN(790, 1245),
    /**
     * <code>REQUEST_LIST_HDFS_DELEGATION_TOKEN = 1246;</code>
     */
    REQUEST_LIST_HDFS_DELEGATION_TOKEN(791, 1246),
    /**
     * <code>RESPONSE_LIST_HDFS_DELEGATION_TOKEN = 1247;</code>
     */
    RESPONSE_LIST_HDFS_DELEGATION_TOKEN(792, 1247),
    /**
     * <code>REQUEST_DELETE_HDFS_DELEGATION_TOKEN = 1248;</code>
     */
    REQUEST_DELETE_HDFS_DELEGATION_TOKEN(793, 1248),
    /**
     * <code>RESPONSE_DELETE_HDFS_DELEGATION_TOKEN = 1249;</code>
     */
    RESPONSE_DELETE_HDFS_DELEGATION_TOKEN(794, 1249),
    /**
     * <code>REQUEST_UPDATE_HDFS_DELEGATION_TOKEN = 1250;</code>
     */
    REQUEST_UPDATE_HDFS_DELEGATION_TOKEN(795, 1250),
    /**
     * <code>RESPONSE_UPDATE_HDFS_DELEGATION_TOKEN = 1251;</code>
     */
    RESPONSE_UPDATE_HDFS_DELEGATION_TOKEN(796, 1251),
    /**
     * <code>REQUEST_WRITE_HDFS_SALT_DATA = 1252;</code>
     *
     * <pre>
     * HDFS Salt Data info in RT table
     * </pre>
     */
    REQUEST_WRITE_HDFS_SALT_DATA(797, 1252),
    /**
     * <code>RESPONSE_WRITE_HDFS_SALT_DATA = 1253;</code>
     */
    RESPONSE_WRITE_HDFS_SALT_DATA(798, 1253),
    /**
     * <code>REQUEST_READ_HDFS_SALT_DATA = 1254;</code>
     */
    REQUEST_READ_HDFS_SALT_DATA(799, 1254),
    /**
     * <code>RESPONSE_READ_HDFS_SALT_DATA = 1255;</code>
     */
    RESPONSE_READ_HDFS_SALT_DATA(800, 1255),
    /**
     * <code>REQUEST_DELETE_HDFS_SALT_DATA = 1256;</code>
     */
    REQUEST_DELETE_HDFS_SALT_DATA(801, 1256),
    /**
     * <code>RESPONSE_DELETE_HDFS_SALT_DATA = 1257;</code>
     */
    RESPONSE_DELETE_HDFS_SALT_DATA(802, 1257),
    /**
     * <code>REQUEST_UPDATE_HDFS_SALT_DATA = 1258;</code>
     */
    REQUEST_UPDATE_HDFS_SALT_DATA(803, 1258),
    /**
     * <code>RESPONSE_UPDATE_HDFS_SALT_DATA = 1259;</code>
     */
    RESPONSE_UPDATE_HDFS_SALT_DATA(804, 1259),
    /**
     * <code>REQUEST_INSERT_BLOB_POS_START_MAJOR = 1260;</code>
     *
     * <pre>
     *metering upgrade marker
     * </pre>
     */
    REQUEST_INSERT_BLOB_POS_START_MAJOR(805, 1260),
    /**
     * <code>RESPONSE_INSERT_BLOB_POS_START_MAJOR = 1261;</code>
     */
    RESPONSE_INSERT_BLOB_POS_START_MAJOR(806, 1261),
    /**
     * <code>REQUEST_GET_BLOB_POS_START_MAJOR = 1262;</code>
     */
    REQUEST_GET_BLOB_POS_START_MAJOR(807, 1262),
    /**
     * <code>RESPONSE_GET_BLOB_POS_START_MAJOR = 1263;</code>
     */
    RESPONSE_GET_BLOB_POS_START_MAJOR(808, 1263),
    /**
     * <code>REQUEST_ENABLE_GEO_REPLAYER = 1264;</code>
     */
    REQUEST_ENABLE_GEO_REPLAYER(809, 1264),
    /**
     * <code>RESPONSE_ENABLE_GEO_REPLAYER = 1265;</code>
     */
    RESPONSE_ENABLE_GEO_REPLAYER(810, 1265),
    /**
     * <code>REQUEST_DISABLE_GEO_REPLAYER = 1266;</code>
     */
    REQUEST_DISABLE_GEO_REPLAYER(811, 1266),
    /**
     * <code>RESPONSE_DISABLE_GEO_REPLAYER = 1267;</code>
     */
    RESPONSE_DISABLE_GEO_REPLAYER(812, 1267),
    /**
     * <code>REQUEST_INSERT_TSO_TRANSITION_KEY = 1270;</code>
     */
    REQUEST_INSERT_TSO_TRANSITION_KEY(813, 1270),
    /**
     * <code>RESPONSE_INSERT_TSO_TRANSITION_KEY = 1271;</code>
     */
    RESPONSE_INSERT_TSO_TRANSITION_KEY(814, 1271),
    /**
     * <code>REQUEST_REMOVE_TSO_TRANSITION_KEY = 1272;</code>
     */
    REQUEST_REMOVE_TSO_TRANSITION_KEY(815, 1272),
    /**
     * <code>RESPONSE_REMOVE_TSO_TRANSITION_KEY = 1273;</code>
     */
    RESPONSE_REMOVE_TSO_TRANSITION_KEY(816, 1273),
    /**
     * <code>REQUEST_VNEST_CONTROL_MSG = 1274;</code>
     */
    REQUEST_VNEST_CONTROL_MSG(817, 1274),
    /**
     * <code>RESPONSE_VNEST_CONTROL_MSG = 1275;</code>
     */
    RESPONSE_VNEST_CONTROL_MSG(818, 1275),
    /**
     * <code>REQUEST_GET_CLUSTER_KEY = 1276;</code>
     */
    REQUEST_GET_CLUSTER_KEY(819, 1276),
    /**
     * <code>RESPONSE_GET_CLUSTER_KEY = 1277;</code>
     */
    RESPONSE_GET_CLUSTER_KEY(820, 1277),
    /**
     * <code>REQUEST_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET = 1300;</code>
     *
     * <pre>
     * For TSO
     * </pre>
     */
    REQUEST_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET(821, 1300),
    /**
     * <code>RESPONSE_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET = 1301;</code>
     */
    RESPONSE_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET(822, 1301),
    /**
     * <code>REQUEST_GEO_LIST_OBJ_INDEX_RANGE = 1302;</code>
     */
    REQUEST_GEO_LIST_OBJ_INDEX_RANGE(823, 1302),
    /**
     * <code>RESPONSE_GEO_LIST_OBJ_INDEX_RANGE = 1303;</code>
     */
    RESPONSE_GEO_LIST_OBJ_INDEX_RANGE(824, 1303),
    /**
     * <code>REQUEST_BUCKET_SET_POLICY = 1304;</code>
     *
     * <pre>
     * For bucket policy
     * </pre>
     */
    REQUEST_BUCKET_SET_POLICY(825, 1304),
    /**
     * <code>RESPONSE_BUCKET_SET_POLICY = 1305;</code>
     */
    RESPONSE_BUCKET_SET_POLICY(826, 1305),
    /**
     * <code>REQUEST_BUCKET_GET_POLICY = 1306;</code>
     */
    REQUEST_BUCKET_GET_POLICY(827, 1306),
    /**
     * <code>RESPONSE_BUCKET_GET_POLICY = 1307;</code>
     */
    RESPONSE_BUCKET_GET_POLICY(828, 1307),
    /**
     * <code>REQUEST_BUCKET_DELETE_BUCKET_POLICY = 1308;</code>
     */
    REQUEST_BUCKET_DELETE_BUCKET_POLICY(829, 1308),
    /**
     * <code>RESPONSE_BUCKET_DELETE_BUCKET_POLICY = 1309;</code>
     */
    RESPONSE_BUCKET_DELETE_BUCKET_POLICY(830, 1309),
    /**
     * <code>REQUEST_UPDATE_USER_TAG = 1310;</code>
     *
     * <pre>
     * UserTags for Object User
     * </pre>
     */
    REQUEST_UPDATE_USER_TAG(831, 1310),
    /**
     * <code>RESPONSE_UPDATE_USER_TAG = 1311;</code>
     */
    RESPONSE_UPDATE_USER_TAG(832, 1311),
    /**
     * <code>REQUEST_DELETE_USER_TAG = 1312;</code>
     */
    REQUEST_DELETE_USER_TAG(833, 1312),
    /**
     * <code>RESPONSE_DELETE_USER_TAG = 1313;</code>
     */
    RESPONSE_DELETE_USER_TAG(834, 1313),
    /**
     * <code>REQUEST_USER_TAGS_QUERY = 1314;</code>
     */
    REQUEST_USER_TAGS_QUERY(835, 1314),
    /**
     * <code>RESPONSE_USER_TAGS_QUERY = 1315;</code>
     */
    RESPONSE_USER_TAGS_QUERY(836, 1315),
    /**
     * <code>REQUEST_REMOVE_REBUILD_REFTABLE_TASK_MARKER = 1316;</code>
     *
     * <pre>
     *RemoveRefTableRebuildTaskMarker
     * </pre>
     */
    REQUEST_REMOVE_REBUILD_REFTABLE_TASK_MARKER(837, 1316),
    /**
     * <code>RESPONSE_REMOVE_REBUILD_REFTABLE_TASK_MARKER = 1317;</code>
     */
    RESPONSE_REMOVE_REBUILD_REFTABLE_TASK_MARKER(838, 1317),
    /**
     * <code>REQUEST_RESET_BOOTSTRAP_TASKS = 1350;</code>
     *
     * <pre>
     * 1350-1375 are reserved for bootstrap related commands
     * </pre>
     */
    REQUEST_RESET_BOOTSTRAP_TASKS(839, 1350),
    /**
     * <code>RESPONSE_RESET_BOOTSTRAP_TASKS = 1351;</code>
     */
    RESPONSE_RESET_BOOTSTRAP_TASKS(840, 1351),
    /**
     * <code>REQUEST_INSERT_BOOTSTRAP_MARKER = 1352;</code>
     */
    REQUEST_INSERT_BOOTSTRAP_MARKER(841, 1352),
    /**
     * <code>RESPONSE_INSERT_BOOTSTRAP_MARKER = 1353;</code>
     */
    RESPONSE_INSERT_BOOTSTRAP_MARKER(842, 1353),
    /**
     * <code>REQUEST_REMOVE_BOOTSTRAP_MARKER = 1354;</code>
     */
    REQUEST_REMOVE_BOOTSTRAP_MARKER(843, 1354),
    /**
     * <code>RESPONSE_REMOVE_BOOTSTRAP_MARKER = 1355;</code>
     */
    RESPONSE_REMOVE_BOOTSTRAP_MARKER(844, 1355),
    /**
     * <code>REQUEST_INSERT_BOOTSTRAP_TASKS = 1356;</code>
     */
    REQUEST_INSERT_BOOTSTRAP_TASKS(845, 1356),
    /**
     * <code>RESPONSE_INSERT_BOOTSTRAP_TASKS = 1357;</code>
     */
    RESPONSE_INSERT_BOOTSTRAP_TASKS(846, 1357),
    /**
     * <code>REQUEST_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_TREE = 1358;</code>
     */
    REQUEST_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_TREE(847, 1358),
    /**
     * <code>RESPONSE_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_TREE = 1359;</code>
     */
    RESPONSE_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_TREE(848, 1359),
    /**
     * <code>REQUEST_ALERT_FABRIC_SEQ_NUM = 1376;</code>
     *
     * <pre>
     *Alert and Audit Fabric sequence Number related commands
     * </pre>
     */
    REQUEST_ALERT_FABRIC_SEQ_NUM(849, 1376),
    /**
     * <code>RESPONSE_ALERT_FABRIC_SEQ_NUM = 1377;</code>
     */
    RESPONSE_ALERT_FABRIC_SEQ_NUM(850, 1377),
    /**
     * <code>REQUEST_AUDIT_FABRIC_SEQ_NUM = 1378;</code>
     */
    REQUEST_AUDIT_FABRIC_SEQ_NUM(851, 1378),
    /**
     * <code>RESPONSE_AUDIT_FABRIC_SEQ_NUM = 1379;</code>
     */
    RESPONSE_AUDIT_FABRIC_SEQ_NUM(852, 1379),
    /**
     * <code>REQUEST_GET_ORIGINAL_IP_LIST = 1380;</code>
     *
     * <pre>
     *IP change support related messages
     * </pre>
     */
    REQUEST_GET_ORIGINAL_IP_LIST(853, 1380),
    /**
     * <code>RESPONSE_GET_ORIGINAL_IP_LIST = 1381;</code>
     */
    RESPONSE_GET_ORIGINAL_IP_LIST(854, 1381),
    /**
     * <code>REQUEST_GET_ORIGINALIP_KEY = 1382;</code>
     */
    REQUEST_GET_ORIGINALIP_KEY(855, 1382),
    /**
     * <code>RESPONSE_GET_ORIGINALIP_KEY = 1383;</code>
     */
    RESPONSE_GET_ORIGINALIP_KEY(856, 1383),
    /**
     * <code>REQUEST_PUT_ORIGINALIP_KEY = 1384;</code>
     */
    REQUEST_PUT_ORIGINALIP_KEY(857, 1384),
    /**
     * <code>RESPONSE_PUT_ORIGINALIP_KEY = 1385;</code>
     */
    RESPONSE_PUT_ORIGINALIP_KEY(858, 1385),
    /**
     * <code>REQUEST_INSERT_GEO_NODE_LEVEL_METERING_INFO = 1360;</code>
     *
     * <pre>
     *geo metering
     * </pre>
     */
    REQUEST_INSERT_GEO_NODE_LEVEL_METERING_INFO(859, 1360),
    /**
     * <code>RESPONSE_INSERT_GEO_NODE_LEVEL_METERING_INFO = 1361;</code>
     */
    RESPONSE_INSERT_GEO_NODE_LEVEL_METERING_INFO(860, 1361),
    /**
     * <code>REQUEST_GEO_RG_LEVEL_METERING_LATEST_INFO = 1362;</code>
     */
    REQUEST_GEO_RG_LEVEL_METERING_LATEST_INFO(861, 1362),
    /**
     * <code>RESPONSE_GEO_RG_LEVEL_METERING_LATEST_INFO = 1363;</code>
     */
    RESPONSE_GEO_RG_LEVEL_METERING_LATEST_INFO(862, 1363),
    /**
     * <code>REQUEST_GEO_ZONE_LEVEL_LATEST_METERING_INFO = 1364;</code>
     */
    REQUEST_GEO_ZONE_LEVEL_LATEST_METERING_INFO(863, 1364),
    /**
     * <code>RESPONSE_GEO_ZONE_LEVEL_LATEST_METERING_INFO = 1365;</code>
     */
    RESPONSE_GEO_ZONE_LEVEL_LATEST_METERING_INFO(864, 1365),
    /**
     * <code>REQUEST_GEO_RG_LEVEL_METERING_SAMPLE_INFO = 1366;</code>
     */
    REQUEST_GEO_RG_LEVEL_METERING_SAMPLE_INFO(865, 1366),
    /**
     * <code>RESPONSE_GEO_RG_LEVEL_METERING_SAMPLE_INFO = 1367;</code>
     */
    RESPONSE_GEO_RG_LEVEL_METERING_SAMPLE_INFO(866, 1367),
    /**
     * <code>REQUEST_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO = 1368;</code>
     */
    REQUEST_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO(867, 1368),
    /**
     * <code>RESPONSE_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO = 1369;</code>
     */
    RESPONSE_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO(868, 1369),
    /**
     * <code>REQUEST_INSERT_JOURNAL_REPLICATE_TASK_RANGE = 1370;</code>
     */
    REQUEST_INSERT_JOURNAL_REPLICATE_TASK_RANGE(869, 1370),
    /**
     * <code>RESPONSE_INSERT_JOURNAL_REPLICATE_TASK_RANGE = 1371;</code>
     */
    RESPONSE_INSERT_JOURNAL_REPLICATE_TASK_RANGE(870, 1371),
    /**
     * <code>REQUEST_SET_NOTIFIED_FOR_REMOTE_ZONE = 1400;</code>
     */
    REQUEST_SET_NOTIFIED_FOR_REMOTE_ZONE(871, 1400),
    /**
     * <code>RESPONSE_SET_NOTIFIED_FOR_REMOTE_ZONE = 1401;</code>
     */
    RESPONSE_SET_NOTIFIED_FOR_REMOTE_ZONE(872, 1401),
    /**
     * <code>REQUEST_REDO_FAILURE_MODE_REPLAY_FOR_REMOTE_ZONE = 1402;</code>
     */
    REQUEST_REDO_FAILURE_MODE_REPLAY_FOR_REMOTE_ZONE(873, 1402),
    /**
     * <code>RESPONSE_REDO_FAILURE_MODE_REPLAY_FOR_REMOTE_ZONE = 1403;</code>
     */
    RESPONSE_REDO_FAILURE_MODE_REPLAY_FOR_REMOTE_ZONE(874, 1403),
    /**
     * <code>REQUEST_REMOVE_REGION = 1404;</code>
     */
    REQUEST_REMOVE_REGION(875, 1404),
    /**
     * <code>RESPONSE_REMOVE_REGION = 1405;</code>
     */
    RESPONSE_REMOVE_REGION(876, 1405),
    /**
     * <code>REQUEST_TRIGGER_IC = 1406;</code>
     */
    REQUEST_TRIGGER_IC(877, 1406),
    /**
     * <code>RESPONSE_TRIGGER_IC = 1407;</code>
     */
    RESPONSE_TRIGGER_IC(878, 1407),
    /**
     * <code>REQUEST_INSERT_RECONSTRUCTION_KEY = 1408;</code>
     */
    REQUEST_INSERT_RECONSTRUCTION_KEY(879, 1408),
    /**
     * <code>RESPONSE_INSERT_RECONSTRUCTION_KEY = 1409;</code>
     */
    RESPONSE_INSERT_RECONSTRUCTION_KEY(880, 1409),
    /**
     * <code>REQUEST_SENSOR_CREATE = 1410;</code>
     *
     * <pre>
     *===== Sensor commands===
     * </pre>
     */
    REQUEST_SENSOR_CREATE(881, 1410),
    /**
     * <code>RESPONSE_SENSOR_CREATE = 1411;</code>
     */
    RESPONSE_SENSOR_CREATE(882, 1411),
    /**
     * <code>REQUEST_SENSOR_GET = 1412;</code>
     */
    REQUEST_SENSOR_GET(883, 1412),
    /**
     * <code>RESPONSE_SENSOR_GET = 1413;</code>
     */
    RESPONSE_SENSOR_GET(884, 1413),
    /**
     * <code>REQUEST_SENSOR_LIST = 1414;</code>
     */
    REQUEST_SENSOR_LIST(885, 1414),
    /**
     * <code>RESPONSE_SENSOR_LIST = 1415;</code>
     */
    RESPONSE_SENSOR_LIST(886, 1415),
    /**
     * <code>REQUEST_SENSOR_DELETE = 1416;</code>
     */
    REQUEST_SENSOR_DELETE(887, 1416),
    /**
     * <code>RESPONSE_SENSOR_DELETE = 1417;</code>
     */
    RESPONSE_SENSOR_DELETE(888, 1417),
    /**
     * <code>REQUEST_SENSOR_UPDATE = 1418;</code>
     */
    REQUEST_SENSOR_UPDATE(889, 1418),
    /**
     * <code>RESPONSE_SENSOR_UPDATE = 1419;</code>
     */
    RESPONSE_SENSOR_UPDATE(890, 1419),
    /**
     * <code>REQUEST_SENSOR_STATUS_GET = 1420;</code>
     */
    REQUEST_SENSOR_STATUS_GET(891, 1420),
    /**
     * <code>RESPONSE_SENSOR_STATUS_GET = 1421;</code>
     */
    RESPONSE_SENSOR_STATUS_GET(892, 1421),
    /**
     * <code>REQUEST_SENSOR_STATUS_SET = 1422;</code>
     */
    REQUEST_SENSOR_STATUS_SET(893, 1422),
    /**
     * <code>RESPONSE_SENSOR_STATUS_SET = 1423;</code>
     *
     * <pre>
     *===== end Sensor commands====
     * </pre>
     */
    RESPONSE_SENSOR_STATUS_SET(894, 1423),
    /**
     * <code>REQUEST_OBJECTGC_LOCAL_REFERENCE_PROGRESS = 1430;</code>
     */
    REQUEST_OBJECTGC_LOCAL_REFERENCE_PROGRESS(895, 1430),
    /**
     * <code>RESPONSE_OBJECTGC_LOCAL_REFERENCE_PROGRESS = 1431;</code>
     */
    RESPONSE_OBJECTGC_LOCAL_REFERENCE_PROGRESS(896, 1431),
    /**
     * <code>REQUEST_OBJECTGC_STATS = 1432;</code>
     */
    REQUEST_OBJECTGC_STATS(897, 1432),
    /**
     * <code>RESPONSE_OBJECTGC_STATS = 1433;</code>
     */
    RESPONSE_OBJECTGC_STATS(898, 1433),
    /**
     * <code>REQUEST_OBJECTGC_NODE_TIME = 1434;</code>
     */
    REQUEST_OBJECTGC_NODE_TIME(899, 1434),
    /**
     * <code>RESPONSE_OBJECTGC_NODE_TIME = 1435;</code>
     */
    RESPONSE_OBJECTGC_NODE_TIME(900, 1435),
    /**
     * <code>REQUEST_CHUNK_RANGE_REPLICATION_CHECK = 1494;</code>
     */
    REQUEST_CHUNK_RANGE_REPLICATION_CHECK(901, 1494),
    /**
     * <code>RESPONSE_CHUNK_RANGE_REPLICATION_CHECK = 1495;</code>
     */
    RESPONSE_CHUNK_RANGE_REPLICATION_CHECK(902, 1495),
    /**
     * <code>REQUEST_OBJECT_REPLICATION_INFO = 1496;</code>
     */
    REQUEST_OBJECT_REPLICATION_INFO(903, 1496),
    /**
     * <code>RESPONSE_OBJECT_REPLICATION_INFO = 1497;</code>
     */
    RESPONSE_OBJECT_REPLICATION_INFO(904, 1497),
    /**
     * <code>REQUEST_GEO_CHECK_OBJECT_INDEX_REPLICATION = 1498;</code>
     */
    REQUEST_GEO_CHECK_OBJECT_INDEX_REPLICATION(905, 1498),
    /**
     * <code>RESPONSE_GEO_CHECK_OBJECT_INDEX_REPLICATION = 1499;</code>
     */
    RESPONSE_GEO_CHECK_OBJECT_INDEX_REPLICATION(906, 1499),
    /**
     * <code>REQUEST_POLL_SERVICE_READINESS = 1500;</code>
     */
    REQUEST_POLL_SERVICE_READINESS(907, 1500),
    /**
     * <code>RESPONSE_POLL_SERVICE_READINESS = 1501;</code>
     */
    RESPONSE_POLL_SERVICE_READINESS(908, 1501),
    /**
     * <code>REQUEST_INSERT_BUCKET_STAT_BATCH = 1502;</code>
     */
    REQUEST_INSERT_BUCKET_STAT_BATCH(909, 1502),
    /**
     * <code>RESPONSE_INSERT_BUCKET_STAT_BATCH = 1503;</code>
     */
    RESPONSE_INSERT_BUCKET_STAT_BATCH(910, 1503),
    /**
     * <code>REQUEST_RECYCLE_MPU_PARTS = 1504;</code>
     */
    REQUEST_RECYCLE_MPU_PARTS(911, 1504),
    /**
     * <code>RESPONSE_RECYCLE_MPU_PARTS = 1505;</code>
     */
    RESPONSE_RECYCLE_MPU_PARTS(912, 1505),
    /**
     * <code>REQUEST_DT_PING = 1506;</code>
     */
    REQUEST_DT_PING(913, 1506),
    /**
     * <code>RESPONSE_DT_PING = 1507;</code>
     */
    RESPONSE_DT_PING(914, 1507),
    /**
     * <code>REQUEST_NFSOBJECT_MULTI_COPY = 1510;</code>
     */
    REQUEST_NFSOBJECT_MULTI_COPY(915, 1510),
    /**
     * <code>RESPONSE_NFSOBJECT_MULTI_COPY = 1511;</code>
     */
    RESPONSE_NFSOBJECT_MULTI_COPY(916, 1511),
    /**
     * <code>REQUEST_GET_METERING_PROGRESS_MARKER = 1512;</code>
     */
    REQUEST_GET_METERING_PROGRESS_MARKER(917, 1512),
    /**
     * <code>RESPONSE_GET_METERING_PROGRESS_MARKER = 1513;</code>
     */
    RESPONSE_GET_METERING_PROGRESS_MARKER(918, 1513),
    /**
     * <code>REQUEST_LIST_BACKGROUND_OPERATORS = 1514;</code>
     */
    REQUEST_LIST_BACKGROUND_OPERATORS(919, 1514),
    /**
     * <code>RESPONSE_LIST_BACKGROUND_OPERATORS = 1515;</code>
     */
    RESPONSE_LIST_BACKGROUND_OPERATORS(920, 1515),
    /**
     * <code>REQUEST_GET_CAPACITY_STATISTICS = 1516;</code>
     */
    REQUEST_GET_CAPACITY_STATISTICS(921, 1516),
    /**
     * <code>RESPONSE_GET_CAPACITY_STATISTICS = 1517;</code>
     */
    RESPONSE_GET_CAPACITY_STATISTICS(922, 1517),
    /**
     * <code>REQUEST_UPDATE_CHUNK_VERIFICATION_SEQ = 1518;</code>
     */
    REQUEST_UPDATE_CHUNK_VERIFICATION_SEQ(923, 1518),
    /**
     * <code>RESPONSE_UPDATE_CHUNK_VERIFICATION_SEQ = 1519;</code>
     */
    RESPONSE_UPDATE_CHUNK_VERIFICATION_SEQ(924, 1519),
    /**
     * <code>REQUEST_GET_CROSS_REFERENCE_CHECK_STATUS = 1520;</code>
     */
    REQUEST_GET_CROSS_REFERENCE_CHECK_STATUS(925, 1520),
    /**
     * <code>RESPONSE_GET_CROSS_REFERENCE_CHECK_STATUS = 1521;</code>
     */
    RESPONSE_GET_CROSS_REFERENCE_CHECK_STATUS(926, 1521),
    /**
     * <code>REQUEST_CHECK_POSITIVE_REFERNCE_FOR_REMOTE_CHUNK = 1522;</code>
     */
    REQUEST_CHECK_POSITIVE_REFERNCE_FOR_REMOTE_CHUNK(927, 1522),
    /**
     * <code>RESPONSE_CHECK_POSITIVE_REFERNCE_FOR_REMOTE_CHUNK = 1523;</code>
     */
    RESPONSE_CHECK_POSITIVE_REFERNCE_FOR_REMOTE_CHUNK(928, 1523),
    /**
     * <code>REQUEST_VERIFY_REFERENCE_FROM_REMOTE_RR = 1524;</code>
     */
    REQUEST_VERIFY_REFERENCE_FROM_REMOTE_RR(929, 1524),
    /**
     * <code>RESPONSE_VERIFY_REFERENCE_FROM_REMOTE_RR = 1525;</code>
     */
    RESPONSE_VERIFY_REFERENCE_FROM_REMOTE_RR(930, 1525),
    /**
     * <code>REQUEST_GET_RR_SEQUENCE_KEY = 1528;</code>
     */
    REQUEST_GET_RR_SEQUENCE_KEY(931, 1528),
    /**
     * <code>REPONSE_GET_RR_SEQUENCE_KEY = 1529;</code>
     */
    REPONSE_GET_RR_SEQUENCE_KEY(932, 1529),
    /**
     * <code>REQUEST_UPDATE_COPY_JOB_PROGRESS = 1530;</code>
     */
    REQUEST_UPDATE_COPY_JOB_PROGRESS(933, 1530),
    /**
     * <code>RESPONSE_UPDATE_COPY_JOB_PROGRESS = 1531;</code>
     */
    RESPONSE_UPDATE_COPY_JOB_PROGRESS(934, 1531),
    /**
     * <code>REQUEST_FORCE_CHUNK_GC_VERFICATION = 1532;</code>
     */
    REQUEST_FORCE_CHUNK_GC_VERFICATION(935, 1532),
    /**
     * <code>RESPONSE_FORCE_CHUNK_GC_VERFICATION = 1533;</code>
     */
    RESPONSE_FORCE_CHUNK_GC_VERFICATION(936, 1533),
    /**
     * <code>REQUEST_ALERT_POLICY_CREATE = 1534;</code>
     *
     * <pre>
     *===== Alert Policy commands===
     * </pre>
     */
    REQUEST_ALERT_POLICY_CREATE(937, 1534),
    /**
     * <code>RESPONSE_ALERT_POLICY_CREATE = 1535;</code>
     */
    RESPONSE_ALERT_POLICY_CREATE(938, 1535),
    /**
     * <code>REQUEST_ALERT_POLICY_GET = 1536;</code>
     */
    REQUEST_ALERT_POLICY_GET(939, 1536),
    /**
     * <code>RESPONSE_ALERT_POLICY_GET = 1537;</code>
     */
    RESPONSE_ALERT_POLICY_GET(940, 1537),
    /**
     * <code>REQUEST_ALERT_POLICY_DELETE = 1538;</code>
     */
    REQUEST_ALERT_POLICY_DELETE(941, 1538),
    /**
     * <code>RESPONSE_ALERT_POLICY_DELETE = 1539;</code>
     */
    RESPONSE_ALERT_POLICY_DELETE(942, 1539),
    /**
     * <code>REQUEST_ALERT_POLICY_LIST = 1540;</code>
     */
    REQUEST_ALERT_POLICY_LIST(943, 1540),
    /**
     * <code>RESPONSE_ALERT_POLICY_LIST = 1541;</code>
     *
     * <pre>
     *===== end Alert Policy commands====
     * </pre>
     */
    RESPONSE_ALERT_POLICY_LIST(944, 1541),
    /**
     * <code>REQUEST_UPDATE_PARTIAL_GC_COPIED_DATA = 1542;</code>
     */
    REQUEST_UPDATE_PARTIAL_GC_COPIED_DATA(945, 1542),
    /**
     * <code>RESPONSE_UPDATE_PARTIAL_GC_COPIED_DATA = 1543;</code>
     */
    RESPONSE_UPDATE_PARTIAL_GC_COPIED_DATA(946, 1543),
    /**
     * <code>REQUEST_EKMSERVER_CREATE = 1544;</code>
     *
     * <pre>
     *===== EKMSERVER commands===
     * </pre>
     */
    REQUEST_EKMSERVER_CREATE(947, 1544),
    /**
     * <code>RESPONSE_EKMSERVER_CREATE = 1545;</code>
     */
    RESPONSE_EKMSERVER_CREATE(948, 1545),
    /**
     * <code>REQUEST_EKMSERVER_GET = 1546;</code>
     */
    REQUEST_EKMSERVER_GET(949, 1546),
    /**
     * <code>RESPONSE_EKMSERVER_GET = 1547;</code>
     */
    RESPONSE_EKMSERVER_GET(950, 1547),
    /**
     * <code>REQUEST_EKMSERVER_LIST = 1548;</code>
     */
    REQUEST_EKMSERVER_LIST(951, 1548),
    /**
     * <code>RESPONSE_EKMSERVER_LIST = 1549;</code>
     */
    RESPONSE_EKMSERVER_LIST(952, 1549),
    /**
     * <code>REQUEST_EKMSERVER_DELETE = 1550;</code>
     */
    REQUEST_EKMSERVER_DELETE(953, 1550),
    /**
     * <code>RESPONSE_EKMSERVER_DELETE = 1551;</code>
     */
    RESPONSE_EKMSERVER_DELETE(954, 1551),
    /**
     * <code>REQUEST_EKMSERVER_UPDATE = 1552;</code>
     */
    REQUEST_EKMSERVER_UPDATE(955, 1552),
    /**
     * <code>RESPONSE_EKMSERVER_UPDATE = 1553;</code>
     *
     * <pre>
     *===== end EKMSERVER commands====
     * </pre>
     */
    RESPONSE_EKMSERVER_UPDATE(956, 1553),
    /**
     * <code>REQUEST_EKMCLUSTER_CREATE = 1554;</code>
     *
     * <pre>
     *===== EKMCLUSTER commands===
     * </pre>
     */
    REQUEST_EKMCLUSTER_CREATE(957, 1554),
    /**
     * <code>RESPONSE_EKMCLUSTER_CREATE = 1555;</code>
     */
    RESPONSE_EKMCLUSTER_CREATE(958, 1555),
    /**
     * <code>REQUEST_EKMCLUSTER_GET = 1556;</code>
     */
    REQUEST_EKMCLUSTER_GET(959, 1556),
    /**
     * <code>RESPONSE_EKMCLUSTER_GET = 1557;</code>
     */
    RESPONSE_EKMCLUSTER_GET(960, 1557),
    /**
     * <code>REQUEST_EKMCLUSTER_LIST = 1558;</code>
     */
    REQUEST_EKMCLUSTER_LIST(961, 1558),
    /**
     * <code>RESPONSE_EKMCLUSTER_LIST = 1559;</code>
     */
    RESPONSE_EKMCLUSTER_LIST(962, 1559),
    /**
     * <code>REQUEST_EKMCLUSTER_DELETE = 1560;</code>
     */
    REQUEST_EKMCLUSTER_DELETE(963, 1560),
    /**
     * <code>RESPONSE_EKMCLUSTER_DELETE = 1561;</code>
     */
    RESPONSE_EKMCLUSTER_DELETE(964, 1561),
    /**
     * <code>REQUEST_EKMCLUSTER_UPDATE = 1562;</code>
     */
    REQUEST_EKMCLUSTER_UPDATE(965, 1562),
    /**
     * <code>RESPONSE_EKMCLUSTER_UPDATE = 1563;</code>
     */
    RESPONSE_EKMCLUSTER_UPDATE(966, 1563),
    /**
     * <code>REQUEST_EKMCLUSTER_STATUS_GET = 1564;</code>
     */
    REQUEST_EKMCLUSTER_STATUS_GET(967, 1564),
    /**
     * <code>RESPONSE_EKMCLUSTER_STATUS_GET = 1565;</code>
     */
    RESPONSE_EKMCLUSTER_STATUS_GET(968, 1565),
    /**
     * <code>REQUEST_EKMCLUSTER_STATUS_SET = 1566;</code>
     */
    REQUEST_EKMCLUSTER_STATUS_SET(969, 1566),
    /**
     * <code>RESPONSE_EKMCLUSTER_STATUS_SET = 1567;</code>
     *
     * <pre>
     *===== end EKMCLUSTER commands====
     * </pre>
     */
    RESPONSE_EKMCLUSTER_STATUS_SET(970, 1567),
    /**
     * <code>REQUEST_ROTATIONTASK_CREATE = 1568;</code>
     *
     * <pre>
     *===== EKMROTATIONTASK commands===
     * </pre>
     */
    REQUEST_ROTATIONTASK_CREATE(971, 1568),
    /**
     * <code>RESPONSE_ROTATIONTASK_CREATE = 1569;</code>
     */
    RESPONSE_ROTATIONTASK_CREATE(972, 1569),
    /**
     * <code>REQUEST_ROTATIONTASK_GET = 1570;</code>
     */
    REQUEST_ROTATIONTASK_GET(973, 1570),
    /**
     * <code>RESPONSE_ROTATIONTASK_GET = 1571;</code>
     */
    RESPONSE_ROTATIONTASK_GET(974, 1571),
    /**
     * <code>REQUEST_ROTATIONTASK_LIST = 1572;</code>
     */
    REQUEST_ROTATIONTASK_LIST(975, 1572),
    /**
     * <code>RESPONSE_ROTATIONTASK_LIST = 1573;</code>
     */
    RESPONSE_ROTATIONTASK_LIST(976, 1573),
    /**
     * <code>REQUEST_ROTATIONTASK_DELETE = 1574;</code>
     */
    REQUEST_ROTATIONTASK_DELETE(977, 1574),
    /**
     * <code>RESPONSE_ROTATIONTASK_DELETE = 1575;</code>
     */
    RESPONSE_ROTATIONTASK_DELETE(978, 1575),
    /**
     * <code>REQUEST_ROTATIONTASK_UPDATE = 1576;</code>
     */
    REQUEST_ROTATIONTASK_UPDATE(979, 1576),
    /**
     * <code>RESPONSE_ROTATIONTASK_UPDATE = 1577;</code>
     */
    RESPONSE_ROTATIONTASK_UPDATE(980, 1577),
    /**
     * <code>REQUEST_ROTATIONTASK_STATUS_GET = 1578;</code>
     */
    REQUEST_ROTATIONTASK_STATUS_GET(981, 1578),
    /**
     * <code>RESPONSE_ROTATIONTASK_STATUS_GET = 1579;</code>
     */
    RESPONSE_ROTATIONTASK_STATUS_GET(982, 1579),
    /**
     * <code>REQUEST_ROTATIONTASK_STATUS_SET = 1580;</code>
     */
    REQUEST_ROTATIONTASK_STATUS_SET(983, 1580),
    /**
     * <code>RESPONSE_ROTATIONTASK_STATUS_SET = 1581;</code>
     */
    RESPONSE_ROTATIONTASK_STATUS_SET(984, 1581),
    /**
     * <code>REQUEST_GET_OR_CREATE_ROTATIONTASK_ACTIVE_KEY = 1582;</code>
     */
    REQUEST_GET_OR_CREATE_ROTATIONTASK_ACTIVE_KEY(985, 1582),
    /**
     * <code>RESPONSE_GET_OR_CREATE_ROTATIONTASK_ACTIVE_KEY = 1583;</code>
     */
    RESPONSE_GET_OR_CREATE_ROTATIONTASK_ACTIVE_KEY(986, 1583),
    /**
     * <code>REQUEST_SET_ROTATIONTASK_ACTIVE_KEY = 1584;</code>
     */
    REQUEST_SET_ROTATIONTASK_ACTIVE_KEY(987, 1584),
    /**
     * <code>RESPONSE_SET_ROTATIONTASK_ACTIVE_KEY = 1585;</code>
     *
     * <pre>
     *===== end ROTATIONTASK commands====
     * </pre>
     */
    RESPONSE_SET_ROTATIONTASK_ACTIVE_KEY(988, 1585),
    /**
     * <code>REQUEST_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD = 1606;</code>
     *
     * <pre>
     *==== ACTIVE MASTER ROTATION KEY RECORD COMMANDS ====
     * </pre>
     */
    REQUEST_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD(989, 1606),
    /**
     * <code>RESPONSE_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD = 1607;</code>
     */
    RESPONSE_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD(990, 1607),
    /**
     * <code>REQUEST_GET_ACTIVE_ROTATION_MASTER_KEY_RECORD = 1608;</code>
     */
    REQUEST_GET_ACTIVE_ROTATION_MASTER_KEY_RECORD(991, 1608),
    /**
     * <code>RESPONSE_GET_ACTIVE_ROTATION_MASTER_KEY_RECORD = 1609;</code>
     *
     * <pre>
     *==== END ACTIVE MASTER ROTATION KEY RECORD COMMANDS ====
     * </pre>
     */
    RESPONSE_GET_ACTIVE_ROTATION_MASTER_KEY_RECORD(992, 1609),
    /**
     * <code>REQUEST_CREATE_KEY_ROTATION_EVENT = 1612;</code>
     *
     * <pre>
     *==== KEY ROTATION EVENT COMMANDS ====
     * </pre>
     */
    REQUEST_CREATE_KEY_ROTATION_EVENT(993, 1612),
    /**
     * <code>RESPONSE_CREATE_KEY_ROTATION_EVENT = 1613;</code>
     */
    RESPONSE_CREATE_KEY_ROTATION_EVENT(994, 1613),
    /**
     * <code>REQUEST_GET_KEY_ROTATION_EVENT = 1614;</code>
     */
    REQUEST_GET_KEY_ROTATION_EVENT(995, 1614),
    /**
     * <code>RESPONSE_GET_KEY_ROTATION_EVENT = 1615;</code>
     */
    RESPONSE_GET_KEY_ROTATION_EVENT(996, 1615),
    /**
     * <code>REQUEST_UPDATE_KEY_ROTATION_EVENT = 1616;</code>
     */
    REQUEST_UPDATE_KEY_ROTATION_EVENT(997, 1616),
    /**
     * <code>RESPONSE_UPDATE_KEY_ROTATION_EVENT = 1617;</code>
     */
    RESPONSE_UPDATE_KEY_ROTATION_EVENT(998, 1617),
    /**
     * <code>REQUEST_LIST_KEY_ROTATION_EVENT = 1618;</code>
     */
    REQUEST_LIST_KEY_ROTATION_EVENT(999, 1618),
    /**
     * <code>RESPONSE_LIST_KEY_ROTATION_EVENT = 1619;</code>
     *
     * <pre>
     *==== END KEY ROTATION_EVENT COMMANDS ====
     * </pre>
     */
    RESPONSE_LIST_KEY_ROTATION_EVENT(1000, 1619),
    /**
     * <code>REQUEST_NAMESPACE_REWRAP_TASK_CREATE = 1624;</code>
     *
     * <pre>
     *==== NAMESPACE REWRAP TASK KEY COMMANDS ====
     * </pre>
     */
    REQUEST_NAMESPACE_REWRAP_TASK_CREATE(1001, 1624),
    /**
     * <code>RESPONSE_NAMESPACE_REWRAP_TASK_CREATE = 1625;</code>
     */
    RESPONSE_NAMESPACE_REWRAP_TASK_CREATE(1002, 1625),
    /**
     * <code>REQUEST_NAMESPACE_REWRAP_TASK_GET = 1626;</code>
     */
    REQUEST_NAMESPACE_REWRAP_TASK_GET(1003, 1626),
    /**
     * <code>RESPONSE_NAMESPACE_REWRAP_TASK_GET = 1627;</code>
     */
    RESPONSE_NAMESPACE_REWRAP_TASK_GET(1004, 1627),
    /**
     * <code>REQUEST_NAMESPACE_REWRAP_TASK_UPDATE = 1628;</code>
     */
    REQUEST_NAMESPACE_REWRAP_TASK_UPDATE(1005, 1628),
    /**
     * <code>RESPONSE_NAMESPACE_REWRAP_TASK_UPDATE = 1629;</code>
     */
    RESPONSE_NAMESPACE_REWRAP_TASK_UPDATE(1006, 1629),
    /**
     * <code>REQUEST_NAMESPACE_REWRAP_TASK_DELETE = 1630;</code>
     */
    REQUEST_NAMESPACE_REWRAP_TASK_DELETE(1007, 1630),
    /**
     * <code>RESPONSE_NAMESPACE_REWRAP_TASK_DELETE = 1631;</code>
     */
    RESPONSE_NAMESPACE_REWRAP_TASK_DELETE(1008, 1631),
    /**
     * <code>REQUEST_NAMESPACE_REWRAP_TASK_LIST = 1632;</code>
     */
    REQUEST_NAMESPACE_REWRAP_TASK_LIST(1009, 1632),
    /**
     * <code>RESPONSE_NAMESPACE_REWRAP_TASK_LIST = 1633;</code>
     *
     * <pre>
     *==== END NAMESPACE REWRAP TASK KEY COMMANDS ====
     * </pre>
     */
    RESPONSE_NAMESPACE_REWRAP_TASK_LIST(1010, 1633),
    /**
     * <code>REQUEST_EKMCLUSTER_STATUS_ACTIVATE = 1634;</code>
     *
     * <pre>
     *==== EKMCLUSTER ACTIVATION COMMANDS ====
     * </pre>
     */
    REQUEST_EKMCLUSTER_STATUS_ACTIVATE(1011, 1634),
    /**
     * <code>RESPONSE_EKMCLUSTER_STATUS_ACTIVATE = 1635;</code>
     */
    RESPONSE_EKMCLUSTER_STATUS_ACTIVATE(1012, 1635),
    /**
     * <code>REQUEST_EKMCLUSTER_STATUS_DEACTIVATE = 1636;</code>
     */
    REQUEST_EKMCLUSTER_STATUS_DEACTIVATE(1013, 1636),
    /**
     * <code>RESPONSE_EKMCLUSTER_STATUS_DEACTIVATE = 1637;</code>
     *
     * <pre>
     *==== END EKMCLUSTER ACTIVATION COMMANDS ====
     * </pre>
     */
    RESPONSE_EKMCLUSTER_STATUS_DEACTIVATE(1014, 1637),
    /**
     * <code>REQUEST_SET_ACTIVE_ROTATION_KEY_RECORD = 1638;</code>
     *
     * <pre>
     *==== ACTIVE ROTATION KEY RECORD COMMANDS ====
     * </pre>
     */
    REQUEST_SET_ACTIVE_ROTATION_KEY_RECORD(1015, 1638),
    /**
     * <code>RESPONSE_SET_ACTIVE_ROTATION_KEY_RECORD = 1639;</code>
     */
    RESPONSE_SET_ACTIVE_ROTATION_KEY_RECORD(1016, 1639),
    /**
     * <code>REQUEST_GET_ACTIVE_ROTATION_KEY_RECORD = 1640;</code>
     */
    REQUEST_GET_ACTIVE_ROTATION_KEY_RECORD(1017, 1640),
    /**
     * <code>RESPONSE_GET_ACTIVE_ROTATION_KEY_RECORD = 1641;</code>
     */
    RESPONSE_GET_ACTIVE_ROTATION_KEY_RECORD(1018, 1641),
    /**
     * <code>REQUEST_ROTATE_ACTIVE_ROTATION_KEY_RECORD = 1642;</code>
     */
    REQUEST_ROTATE_ACTIVE_ROTATION_KEY_RECORD(1019, 1642),
    /**
     * <code>RESPONSE_ROTATE_ACTIVE_ROTATION_KEY_RECORD = 1643;</code>
     *
     * <pre>
     *==== END ACTIVE ROTATION KEY RECORD COMMANDS ====
     * </pre>
     */
    RESPONSE_ROTATE_ACTIVE_ROTATION_KEY_RECORD(1020, 1643),
    /**
     * <code>REQUEST_PROCESS_BULK_ALERT_ACK = 1644;</code>
     */
    REQUEST_PROCESS_BULK_ALERT_ACK(1021, 1644),
    /**
     * <code>RESPONSE_PROCESS_BULK_ALERT_ACK = 1645;</code>
     */
    RESPONSE_PROCESS_BULK_ALERT_ACK(1022, 1645),
    /**
     * <code>REQUEST_GET_ALERT_STATS = 1646;</code>
     */
    REQUEST_GET_ALERT_STATS(1023, 1646),
    /**
     * <code>RESPONSE_GET_ALERT_STATS = 1647;</code>
     */
    RESPONSE_GET_ALERT_STATS(1024, 1647),
    /**
     * <code>REQUEST_GET_BPLUSTREE_FOR_BTREE_GC = 1648;</code>
     */
    REQUEST_GET_BPLUSTREE_FOR_BTREE_GC(1025, 1648),
    /**
     * <code>RESPONSE_GET_BPLUSTREE_FOR_BTREE_GC = 1649;</code>
     */
    RESPONSE_GET_BPLUSTREE_FOR_BTREE_GC(1026, 1649),
    /**
     * <code>REQUEST_DT_SYNC_ADOPTED_TREE_ATTACH = 1656;</code>
     */
    REQUEST_DT_SYNC_ADOPTED_TREE_ATTACH(1027, 1656),
    /**
     * <code>REQUEST_LIST_CLEAN_UP_JOB = 1658;</code>
     */
    REQUEST_LIST_CLEAN_UP_JOB(1028, 1658),
    /**
     * <code>RESPONSE_LIST_CLEAN_UP_JOB = 1659;</code>
     */
    RESPONSE_LIST_CLEAN_UP_JOB(1029, 1659),
    /**
     * <code>REQUEST_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME = 1660;</code>
     */
    REQUEST_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME(1030, 1660),
    /**
     * <code>RESPONSE_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME = 1661;</code>
     */
    RESPONSE_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME(1031, 1661),
    /**
     * <code>REQUEST_CREATE_BULK_ALERT_ACK_KEY = 1662;</code>
     */
    REQUEST_CREATE_BULK_ALERT_ACK_KEY(1032, 1662),
    /**
     * <code>RESPONSE_CREATE_BULK_ALERT_ACK_KEY = 1663;</code>
     */
    RESPONSE_CREATE_BULK_ALERT_ACK_KEY(1033, 1663),
    /**
     * <code>REQUEST_GET_BULK_ALERT_ACK_KEY = 1664;</code>
     */
    REQUEST_GET_BULK_ALERT_ACK_KEY(1034, 1664),
    /**
     * <code>RESPONSE_GET_BULK_ALERT_ACK_KEY = 1665;</code>
     */
    RESPONSE_GET_BULK_ALERT_ACK_KEY(1035, 1665),
    /**
     * <code>REQUEST_CLEAR_BULK_ALERT_ACK_KEY = 1666;</code>
     */
    REQUEST_CLEAR_BULK_ALERT_ACK_KEY(1036, 1666),
    /**
     * <code>RESPONSE_CLEAR_BULK_ALERT_ACK_KEY = 1667;</code>
     */
    RESPONSE_CLEAR_BULK_ALERT_ACK_KEY(1037, 1667),
    /**
     * <code>REQUEST_PROCESS_BULK_ALERT_ACK_KEY = 1668;</code>
     */
    REQUEST_PROCESS_BULK_ALERT_ACK_KEY(1038, 1668),
    /**
     * <code>RESPONSE_PROCESS_BULK_ALERT_ACK_KEY = 1669;</code>
     */
    RESPONSE_PROCESS_BULK_ALERT_ACK_KEY(1039, 1669),
    /**
     * <code>REQUEST_UPDATE_BULK_ALERT_ACK_KEY = 1670;</code>
     */
    REQUEST_UPDATE_BULK_ALERT_ACK_KEY(1040, 1670),
    /**
     * <code>RESPONSE_UPDATE_BULK_ALERT_ACK_KEY = 1671;</code>
     */
    RESPONSE_UPDATE_BULK_ALERT_ACK_KEY(1041, 1671),
    /**
     * <code>REQUEST_INSERT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS = 1672;</code>
     */
    REQUEST_INSERT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS(1042, 1672),
    /**
     * <code>RESPONSE_INSERT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS = 1673;</code>
     */
    RESPONSE_INSERT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS(1043, 1673),
    /**
     * <code>REQUEST_LISTING_REPLICATION_INFO = 1674;</code>
     */
    REQUEST_LISTING_REPLICATION_INFO(1044, 1674),
    /**
     * <code>RESPONSE_LISTING_REPLICATION_INFO = 1675;</code>
     */
    RESPONSE_LISTING_REPLICATION_INFO(1045, 1675),
    /**
     * <code>REQUEST_GEO_CHECK_LISTING_INDEX_REPLICATION = 1676;</code>
     */
    REQUEST_GEO_CHECK_LISTING_INDEX_REPLICATION(1046, 1676),
    /**
     * <code>RESPONSE_GEO_CHECK_LISTING_INDEX_REPLICATION = 1677;</code>
     */
    RESPONSE_GEO_CHECK_LISTING_INDEX_REPLICATION(1047, 1677),
    /**
     * <code>REQUEST_GET_LAST_PAGE_TABLE_JOURNAL_REGION = 1678;</code>
     */
    REQUEST_GET_LAST_PAGE_TABLE_JOURNAL_REGION(1048, 1678),
    /**
     * <code>RESPONSE_GET_LAST_PAGE_TABLE_JOURNAL_REGION = 1679;</code>
     */
    RESPONSE_GET_LAST_PAGE_TABLE_JOURNAL_REGION(1049, 1679),
    /**
     * <code>REQUEST_LIST_PAGE_TABLE_BASE_RECORD = 1680;</code>
     */
    REQUEST_LIST_PAGE_TABLE_BASE_RECORD(1050, 1680),
    /**
     * <code>RESPONSE_LIST_PAGE_TABLE_BASE_RECORD = 1681;</code>
     */
    RESPONSE_LIST_PAGE_TABLE_BASE_RECORD(1051, 1681),
    /**
     * <code>REQUEST_LIST_PAGE_TABLE_JOURNAL_REGION = 1682;</code>
     */
    REQUEST_LIST_PAGE_TABLE_JOURNAL_REGION(1052, 1682),
    /**
     * <code>RESPONSE_LIST_PAGE_TABLE_JOURNAL_REGION = 1683;</code>
     */
    RESPONSE_LIST_PAGE_TABLE_JOURNAL_REGION(1053, 1683),
    /**
     * <code>REQUEST_DELETE_PAGE_TABLE_JOURNAL_AND_BASE = 1684;</code>
     */
    REQUEST_DELETE_PAGE_TABLE_JOURNAL_AND_BASE(1054, 1684),
    /**
     * <code>RESPONSE_DELETE_PAGE_TABLE_JOURNAL_AND_BASE = 1685;</code>
     */
    RESPONSE_DELETE_PAGE_TABLE_JOURNAL_AND_BASE(1055, 1685),
    /**
     * <code>REQUEST_LIST_PAGE_TABLE_BASE_INDEX_RECORD = 1686;</code>
     */
    REQUEST_LIST_PAGE_TABLE_BASE_INDEX_RECORD(1056, 1686),
    /**
     * <code>RESPONSE_LIST_PAGE_TABLE_BASE_INDEX_RECORD = 1687;</code>
     */
    RESPONSE_LIST_PAGE_TABLE_BASE_INDEX_RECORD(1057, 1687),
    /**
     * <code>REQUEST_GET_LAST_PAGE_TABLE_BASE_INDEX_RECORD = 1688;</code>
     */
    REQUEST_GET_LAST_PAGE_TABLE_BASE_INDEX_RECORD(1058, 1688),
    /**
     * <code>RESPONSE_GET_LAST_PAGE_TABLE_BASE_INDEX_RECORD = 1689;</code>
     */
    RESPONSE_GET_LAST_PAGE_TABLE_BASE_INDEX_RECORD(1059, 1689),
    /**
     * <code>REQUEST_INSERT_REMOTE_PAGE_TABLE_REGION_IN_BATCH = 1690;</code>
     */
    REQUEST_INSERT_REMOTE_PAGE_TABLE_REGION_IN_BATCH(1060, 1690),
    /**
     * <code>RESPONSE_INSERT_REMOTE_PAGE_TABLE_REGION_IN_BATCH = 1691;</code>
     */
    RESPONSE_INSERT_REMOTE_PAGE_TABLE_REGION_IN_BATCH(1061, 1691),
    /**
     * <code>REQUEST_INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_BATCH = 1692;</code>
     */
    REQUEST_INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_BATCH(1062, 1692),
    /**
     * <code>RESPONSE_INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_BATCH = 1693;</code>
     */
    RESPONSE_INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_BATCH(1063, 1693),
    /**
     * <code>REQUEST_SET_BULK_ALERT_ACK = 1694;</code>
     */
    REQUEST_SET_BULK_ALERT_ACK(1064, 1694),
    /**
     * <code>RESPONSE_SET_BULK_ALERT_ACK = 1695;</code>
     */
    RESPONSE_SET_BULK_ALERT_ACK(1065, 1695),
    /**
     * <code>REQUEST_PAGE_TABLE_BASE_SYNC = 1696;</code>
     */
    REQUEST_PAGE_TABLE_BASE_SYNC(1066, 1696),
    /**
     * <code>RESPONSE_PAGE_TABLE_BASE_SYNC = 1697;</code>
     */
    RESPONSE_PAGE_TABLE_BASE_SYNC(1067, 1697),
    /**
     * <code>REQUEST_DT_RESET_PAGE_TABLE_MODE = 1698;</code>
     */
    REQUEST_DT_RESET_PAGE_TABLE_MODE(1068, 1698),
    /**
     * <code>RESPONSE_DT_RESET_PAGE_TABLE_MODE = 1699;</code>
     */
    RESPONSE_DT_RESET_PAGE_TABLE_MODE(1069, 1699),
    /**
     * <code>REQUEST_LISTING_SWITCH_TASKS_PROGRESS = 1700;</code>
     */
    REQUEST_LISTING_SWITCH_TASKS_PROGRESS(1070, 1700),
    /**
     * <code>RESPONSE_LISTING_SWITCH_TASKS_PROGRESS = 1701;</code>
     */
    RESPONSE_LISTING_SWITCH_TASKS_PROGRESS(1071, 1701),
    /**
     * <code>REQUEST_REMOTE_DT_BOOTSTRAP_STATUS = 1702;</code>
     */
    REQUEST_REMOTE_DT_BOOTSTRAP_STATUS(1072, 1702),
    /**
     * <code>RESPONSE_REMOTE_DT_BOOTSTRAP_STATUS = 1703;</code>
     */
    RESPONSE_REMOTE_DT_BOOTSTRAP_STATUS(1073, 1703),
    /**
     * <code>REQUEST_GET_ADDRESS_FOR_PAGE_TABLE_ID = 1704;</code>
     */
    REQUEST_GET_ADDRESS_FOR_PAGE_TABLE_ID(1074, 1704),
    /**
     * <code>RESPONSE_GET_ADDRESS_FOR_PAGE_TABLE_ID = 1705;</code>
     */
    RESPONSE_GET_ADDRESS_FOR_PAGE_TABLE_ID(1075, 1705),
    /**
     * <code>REQUEST_CREATE_SAN_DEVICE = 1706;</code>
     *
     * <pre>
     *Added for ECS-Flex vSan
     * </pre>
     */
    REQUEST_CREATE_SAN_DEVICE(1076, 1706),
    /**
     * <code>RESPONSE_CREATE_SAN_DEVICE = 1707;</code>
     */
    RESPONSE_CREATE_SAN_DEVICE(1077, 1707),
    /**
     * <code>REQUEST_CREATE_SAN_DEVICE_TO_OWNER = 1708;</code>
     *
     * <pre>
     *sent to the device owner
     * </pre>
     */
    REQUEST_CREATE_SAN_DEVICE_TO_OWNER(1078, 1708),
    /**
     * <code>RESPONSE_CREATE_SAN_DEVICE_FROM_OWNER = 1709;</code>
     */
    RESPONSE_CREATE_SAN_DEVICE_FROM_OWNER(1079, 1709),
    /**
     * <code>REQUEST_AGGREGATION_PUBLISH_TOP_N = 1710;</code>
     */
    REQUEST_AGGREGATION_PUBLISH_TOP_N(1080, 1710),
    /**
     * <code>RESPONSE_AGGREGATION_PUBLISH_TOP_N = 1711;</code>
     */
    RESPONSE_AGGREGATION_PUBLISH_TOP_N(1081, 1711),
    /**
     * <code>REQUEST_UPDATE_PARTITION_TOTALSPACE = 1712;</code>
     */
    REQUEST_UPDATE_PARTITION_TOTALSPACE(1082, 1712),
    /**
     * <code>RESPONSE_UPDATE_PARTITION_TOTALSPACE = 1713;</code>
     */
    RESPONSE_UPDATE_PARTITION_TOTALSPACE(1083, 1713),
    /**
     * <code>REQUEST_XOR_DECODE_FOR_DTQUERY = 1714;</code>
     *
     * <pre>
     * XOR Decode for Dtquery
     * </pre>
     */
    REQUEST_XOR_DECODE_FOR_DTQUERY(1084, 1714),
    /**
     * <code>RESPONSE_XOR_DECODE_FOR_DTQUERY = 1715;</code>
     */
    RESPONSE_XOR_DECODE_FOR_DTQUERY(1085, 1715),
    /**
     * <code>REQUEST_DATA_MIGRATION_STATUS_KEY_CREATE = 1716;</code>
     *
     * <pre>
     *==== DATA_MIGRATION COMMANDS ====
     * </pre>
     */
    REQUEST_DATA_MIGRATION_STATUS_KEY_CREATE(1086, 1716),
    /**
     * <code>RESPONSE_DATA_MIGRATION_STATUS_KEY_CREATE = 1717;</code>
     */
    RESPONSE_DATA_MIGRATION_STATUS_KEY_CREATE(1087, 1717),
    /**
     * <code>REQUEST_DATA_MIGRATION_STATUS_KEY_DELETE = 1718;</code>
     */
    REQUEST_DATA_MIGRATION_STATUS_KEY_DELETE(1088, 1718),
    /**
     * <code>RESPONSE_DATA_MIGRATION_STATUS_KEY_DELETE = 1719;</code>
     */
    RESPONSE_DATA_MIGRATION_STATUS_KEY_DELETE(1089, 1719),
    /**
     * <code>REQUEST_DATA_MIGRATION_STATUS_KEY_GET = 1720;</code>
     */
    REQUEST_DATA_MIGRATION_STATUS_KEY_GET(1090, 1720),
    /**
     * <code>RESPONSE_DATA_MIGRATION_STATUS_KEY_GET = 1721;</code>
     */
    RESPONSE_DATA_MIGRATION_STATUS_KEY_GET(1091, 1721),
    /**
     * <code>REQUEST_DATA_MIGRATION_UPDATE_CHUNK = 1722;</code>
     */
    REQUEST_DATA_MIGRATION_UPDATE_CHUNK(1092, 1722),
    /**
     * <code>RESPONSE_DATA_MIGRATION_UPDATE_CHUNK = 1723;</code>
     */
    RESPONSE_DATA_MIGRATION_UPDATE_CHUNK(1093, 1723),
    /**
     * <code>REQUEST_ALLOCATE_BLOCK_MIGRATION = 1724;</code>
     */
    REQUEST_ALLOCATE_BLOCK_MIGRATION(1094, 1724),
    /**
     * <code>RESPONSE_ALLOCATE_BLOCK_MIGRATION = 1725;</code>
     */
    RESPONSE_ALLOCATE_BLOCK_MIGRATION(1095, 1725),
    /**
     * <code>REQUEST_SEAL_LOCAL_CHUNK_MIGRATION = 1726;</code>
     */
    REQUEST_SEAL_LOCAL_CHUNK_MIGRATION(1096, 1726),
    /**
     * <code>RESPONSE_SEAL_LOCAL_CHUNK_MIGRATION = 1727;</code>
     */
    RESPONSE_SEAL_LOCAL_CHUNK_MIGRATION(1097, 1727),
    /**
     * <code>REQUEST_GET_MIGRATE_SEQUENCE = 1728;</code>
     */
    REQUEST_GET_MIGRATE_SEQUENCE(1098, 1728),
    /**
     * <code>RESPONSE_GET_MIGRATE_SEQUENCE = 1729;</code>
     */
    RESPONSE_GET_MIGRATE_SEQUENCE(1099, 1729),
    /**
     * <code>REQUEST_SET_MIGRATION_STATUS = 1730;</code>
     */
    REQUEST_SET_MIGRATION_STATUS(1100, 1730),
    /**
     * <code>RESPONSE_SET_MIGRATION_STATUS = 1731;</code>
     */
    RESPONSE_SET_MIGRATION_STATUS(1101, 1731),
    /**
     * <code>REQUEST_IAMUSER_GET = 1732;</code>
     *
     * <pre>
     *===== IAMUSER commands===
     * </pre>
     */
    REQUEST_IAMUSER_GET(1102, 1732),
    /**
     * <code>RESPONSE_IAMUSER_GET = 1733;</code>
     */
    RESPONSE_IAMUSER_GET(1103, 1733),
    /**
     * <code>REQUEST_IAMUSER_LIST = 1734;</code>
     */
    REQUEST_IAMUSER_LIST(1104, 1734),
    /**
     * <code>RESPONSE_IAMUSER_LIST = 1735;</code>
     */
    RESPONSE_IAMUSER_LIST(1105, 1735),
    /**
     * <code>REQUEST_IAMUSER_DELETE = 1736;</code>
     */
    REQUEST_IAMUSER_DELETE(1106, 1736),
    /**
     * <code>RESPONSE_IAMUSER_DELETE = 1737;</code>
     */
    RESPONSE_IAMUSER_DELETE(1107, 1737),
    /**
     * <code>REQUEST_IAMUSER_UPDATE = 1738;</code>
     */
    REQUEST_IAMUSER_UPDATE(1108, 1738),
    /**
     * <code>RESPONSE_IAMUSER_UPDATE = 1739;</code>
     */
    RESPONSE_IAMUSER_UPDATE(1109, 1739),
    /**
     * <code>REQUEST_IAMUSER_CREATE = 1740;</code>
     */
    REQUEST_IAMUSER_CREATE(1110, 1740),
    /**
     * <code>RESPONSE_IAMUSER_CREATE = 1741;</code>
     *
     * <pre>
     *===== end IAMUSER commands====
     * </pre>
     */
    RESPONSE_IAMUSER_CREATE(1111, 1741),
    /**
     * <code>REQUEST_IAMGROUP_GET = 1742;</code>
     *
     * <pre>
     *===== IAMGROUP commands===
     * </pre>
     */
    REQUEST_IAMGROUP_GET(1112, 1742),
    /**
     * <code>RESPONSE_IAMGROUP_GET = 1743;</code>
     */
    RESPONSE_IAMGROUP_GET(1113, 1743),
    /**
     * <code>REQUEST_IAMGROUP_LIST = 1744;</code>
     */
    REQUEST_IAMGROUP_LIST(1114, 1744),
    /**
     * <code>RESPONSE_IAMGROUP_LIST = 1745;</code>
     */
    RESPONSE_IAMGROUP_LIST(1115, 1745),
    /**
     * <code>REQUEST_IAMGROUP_DELETE = 1746;</code>
     */
    REQUEST_IAMGROUP_DELETE(1116, 1746),
    /**
     * <code>RESPONSE_IAMGROUP_DELETE = 1747;</code>
     */
    RESPONSE_IAMGROUP_DELETE(1117, 1747),
    /**
     * <code>REQUEST_IAMGROUP_UPDATE = 1748;</code>
     */
    REQUEST_IAMGROUP_UPDATE(1118, 1748),
    /**
     * <code>RESPONSE_IAMGROUP_UPDATE = 1749;</code>
     */
    RESPONSE_IAMGROUP_UPDATE(1119, 1749),
    /**
     * <code>REQUEST_IAMGROUP_CREATE = 1750;</code>
     */
    REQUEST_IAMGROUP_CREATE(1120, 1750),
    /**
     * <code>RESPONSE_IAMGROUP_CREATE = 1751;</code>
     *
     * <pre>
     *===== end IAMGROUP commands====
     * </pre>
     */
    RESPONSE_IAMGROUP_CREATE(1121, 1751),
    /**
     * <code>REQUEST_IAMROLE_GET = 1752;</code>
     *
     * <pre>
     *===== IAMROLE commands===
     * </pre>
     */
    REQUEST_IAMROLE_GET(1122, 1752),
    /**
     * <code>RESPONSE_IAMROLE_GET = 1753;</code>
     */
    RESPONSE_IAMROLE_GET(1123, 1753),
    /**
     * <code>REQUEST_IAMROLE_LIST = 1754;</code>
     */
    REQUEST_IAMROLE_LIST(1124, 1754),
    /**
     * <code>RESPONSE_IAMROLE_LIST = 1755;</code>
     */
    RESPONSE_IAMROLE_LIST(1125, 1755),
    /**
     * <code>REQUEST_IAMROLE_DELETE = 1756;</code>
     */
    REQUEST_IAMROLE_DELETE(1126, 1756),
    /**
     * <code>RESPONSE_IAMROLE_DELETE = 1757;</code>
     */
    RESPONSE_IAMROLE_DELETE(1127, 1757),
    /**
     * <code>REQUEST_IAMROLE_UPDATE = 1758;</code>
     */
    REQUEST_IAMROLE_UPDATE(1128, 1758),
    /**
     * <code>RESPONSE_IAMROLE_UPDATE = 1759;</code>
     */
    RESPONSE_IAMROLE_UPDATE(1129, 1759),
    /**
     * <code>REQUEST_IAMROLE_CREATE = 1760;</code>
     */
    REQUEST_IAMROLE_CREATE(1130, 1760),
    /**
     * <code>RESPONSE_IAMROLE_CREATE = 1761;</code>
     *
     * <pre>
     *===== end IAMROLE commands====
     * </pre>
     */
    RESPONSE_IAMROLE_CREATE(1131, 1761),
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_LIST = 1762;</code>
     *
     * <pre>
     *===== IAMUSER commands===
     * </pre>
     */
    REQUEST_IAMUSER_ACCESS_KEY_LIST(1132, 1762),
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_LIST = 1763;</code>
     */
    RESPONSE_IAMUSER_ACCESS_KEY_LIST(1133, 1763),
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_DELETE = 1764;</code>
     */
    REQUEST_IAMUSER_ACCESS_KEY_DELETE(1134, 1764),
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_DELETE = 1765;</code>
     */
    RESPONSE_IAMUSER_ACCESS_KEY_DELETE(1135, 1765),
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_UPDATE = 1766;</code>
     */
    REQUEST_IAMUSER_ACCESS_KEY_UPDATE(1136, 1766),
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_UPDATE = 1767;</code>
     */
    RESPONSE_IAMUSER_ACCESS_KEY_UPDATE(1137, 1767),
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_GET = 1768;</code>
     */
    REQUEST_IAMUSER_ACCESS_KEY_GET(1138, 1768),
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_GET = 1769;</code>
     */
    RESPONSE_IAMUSER_ACCESS_KEY_GET(1139, 1769),
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_CREATE = 1770;</code>
     */
    REQUEST_IAMUSER_ACCESS_KEY_CREATE(1140, 1770),
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_CREATE = 1771;</code>
     *
     * <pre>
     *===== end IAMUSER commands====
     * </pre>
     */
    RESPONSE_IAMUSER_ACCESS_KEY_CREATE(1141, 1771),
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_GET = 1772;</code>
     *
     * <pre>
     *===== IAMMANAGEDPOLICY commands===
     * </pre>
     */
    REQUEST_IAMMANAGEDPOLICY_GET(1142, 1772),
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_GET = 1773;</code>
     */
    RESPONSE_IAMMANAGEDPOLICY_GET(1143, 1773),
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_LIST = 1774;</code>
     */
    REQUEST_IAMMANAGEDPOLICY_LIST(1144, 1774),
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_LIST = 1775;</code>
     */
    RESPONSE_IAMMANAGEDPOLICY_LIST(1145, 1775),
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_DELETE = 1776;</code>
     */
    REQUEST_IAMMANAGEDPOLICY_DELETE(1146, 1776),
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_DELETE = 1777;</code>
     */
    RESPONSE_IAMMANAGEDPOLICY_DELETE(1147, 1777),
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_UPDATE = 1778;</code>
     */
    REQUEST_IAMMANAGEDPOLICY_UPDATE(1148, 1778),
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_UPDATE = 1779;</code>
     */
    RESPONSE_IAMMANAGEDPOLICY_UPDATE(1149, 1779),
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_VERSION_DELETE = 1780;</code>
     */
    REQUEST_IAMMANAGEDPOLICY_VERSION_DELETE(1150, 1780),
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_VERSION_DELETE = 1781;</code>
     */
    RESPONSE_IAMMANAGEDPOLICY_VERSION_DELETE(1151, 1781),
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_SET_DEFAULT_VERSION = 1782;</code>
     */
    REQUEST_IAMMANAGEDPOLICY_SET_DEFAULT_VERSION(1152, 1782),
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_SET_DEFAULT_VERSION = 1783;</code>
     */
    RESPONSE_IAMMANAGEDPOLICY_SET_DEFAULT_VERSION(1153, 1783),
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_VERSION_GET = 1784;</code>
     */
    REQUEST_IAMMANAGEDPOLICY_VERSION_GET(1154, 1784),
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_VERSION_GET = 1785;</code>
     */
    RESPONSE_IAMMANAGEDPOLICY_VERSION_GET(1155, 1785),
    /**
     * <code>REQUEST_IAM_MANAGED_ENTRY_LIST = 1786;</code>
     */
    REQUEST_IAM_MANAGED_ENTRY_LIST(1156, 1786),
    /**
     * <code>RESPONSE_IAM_MANAGED_ENTRY_LIST = 1787;</code>
     */
    RESPONSE_IAM_MANAGED_ENTRY_LIST(1157, 1787),
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_CREATE = 1788;</code>
     */
    REQUEST_IAMMANAGEDPOLICY_CREATE(1158, 1788),
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_CREATE = 1789;</code>
     *
     * <pre>
     *===== end IAMMANAGEDPOLICY commands====
     * </pre>
     */
    RESPONSE_IAMMANAGEDPOLICY_CREATE(1159, 1789),
    /**
     * <code>REQUEST_IAMPROVIDER_CREATE = 1790;</code>
     *
     * <pre>
     *===== IAMPROVIDER commands===
     * </pre>
     */
    REQUEST_IAMPROVIDER_CREATE(1160, 1790),
    /**
     * <code>RESPONSE_IAMPROVIDER_CREATE = 1791;</code>
     */
    RESPONSE_IAMPROVIDER_CREATE(1161, 1791),
    /**
     * <code>REQUEST_IAMPROVIDER_GET = 1792;</code>
     */
    REQUEST_IAMPROVIDER_GET(1162, 1792),
    /**
     * <code>RESPONSE_IAMPROVIDER_GET = 1793;</code>
     */
    RESPONSE_IAMPROVIDER_GET(1163, 1793),
    /**
     * <code>REQUEST_IAMPROVIDER_LIST = 1794;</code>
     */
    REQUEST_IAMPROVIDER_LIST(1164, 1794),
    /**
     * <code>RESPONSE_IAMPROVIDER_LIST = 1795;</code>
     */
    RESPONSE_IAMPROVIDER_LIST(1165, 1795),
    /**
     * <code>REQUEST_IAMPROVIDER_DELETE = 1796;</code>
     */
    REQUEST_IAMPROVIDER_DELETE(1166, 1796),
    /**
     * <code>RESPONSE_IAMPROVIDER_DELETE = 1797;</code>
     */
    RESPONSE_IAMPROVIDER_DELETE(1167, 1797),
    /**
     * <code>REQUEST_IAMPROVIDER_UPDATE = 1798;</code>
     */
    REQUEST_IAMPROVIDER_UPDATE(1168, 1798),
    /**
     * <code>RESPONSE_IAMPROVIDER_UPDATE = 1799;</code>
     *
     * <pre>
     *===== end IAMPROVIDER commands====
     * </pre>
     */
    RESPONSE_IAMPROVIDER_UPDATE(1169, 1799),
    /**
     * <code>REQUEST_IAMSERVICEPROVIDER_CREATE = 1800;</code>
     *
     * <pre>
     *===== IAMSERVICEPROVIDER commands===
     * </pre>
     */
    REQUEST_IAMSERVICEPROVIDER_CREATE(1170, 1800),
    /**
     * <code>RESPONSE_IAMSERVICEPROVIDER_CREATE = 1801;</code>
     */
    RESPONSE_IAMSERVICEPROVIDER_CREATE(1171, 1801),
    /**
     * <code>REQUEST_IAMSERVICEPROVIDER_GET = 1802;</code>
     */
    REQUEST_IAMSERVICEPROVIDER_GET(1172, 1802),
    /**
     * <code>RESPONSE_IAMSERVICEPROVIDER_GET = 1803;</code>
     */
    RESPONSE_IAMSERVICEPROVIDER_GET(1173, 1803),
    /**
     * <code>REQUEST_IAMSERVICEPROVIDER_DELETE = 1804;</code>
     */
    REQUEST_IAMSERVICEPROVIDER_DELETE(1174, 1804),
    /**
     * <code>RESPONSE_IAMSERVICEPROVIDER_DELETE = 1805;</code>
     */
    RESPONSE_IAMSERVICEPROVIDER_DELETE(1175, 1805),
    /**
     * <code>REQUEST_IAMSERVICEPROVIDER_UPDATE = 1806;</code>
     */
    REQUEST_IAMSERVICEPROVIDER_UPDATE(1176, 1806),
    /**
     * <code>RESPONSE_IAMSERVICEPROVIDER_UPDATE = 1807;</code>
     *
     * <pre>
     *===== end IAMSERVICEPROVIDER commands====
     * </pre>
     */
    RESPONSE_IAMSERVICEPROVIDER_UPDATE(1177, 1807),
    /**
     * <code>REQUEST_IAMNAMESPACE_LIMIT_UPDATE = 1808;</code>
     */
    REQUEST_IAMNAMESPACE_LIMIT_UPDATE(1178, 1808),
    /**
     * <code>RESPONSE_IAMNAMESPACE_LIMIT_UPDATE = 1809;</code>
     */
    RESPONSE_IAMNAMESPACE_LIMIT_UPDATE(1179, 1809),
    /**
     * <code>REQUEST_IAMNAMESPACE_LIMIT_GET = 1810;</code>
     */
    REQUEST_IAMNAMESPACE_LIMIT_GET(1180, 1810),
    /**
     * <code>RESPONSE_IAMNAMESPACE_LIMIT_GET = 1811;</code>
     */
    RESPONSE_IAMNAMESPACE_LIMIT_GET(1181, 1811),
    /**
     * <code>REQUEST_CLEAN_SSD_READ_CACHE = 1812;</code>
     *
     * <pre>
     *===== SSD Read Cache commands===
     * </pre>
     */
    REQUEST_CLEAN_SSD_READ_CACHE(1182, 1812),
    /**
     * <code>RESPONSE_CLEAN_SSD_READ_CACHE = 1813;</code>
     */
    RESPONSE_CLEAN_SSD_READ_CACHE(1183, 1813),
    /**
     * <code>REQUEST_GET_SSD_READ_CACHE_PREFETCH_STATUS = 1814;</code>
     */
    REQUEST_GET_SSD_READ_CACHE_PREFETCH_STATUS(1184, 1814),
    /**
     * <code>RESPONSE_GET_SSD_READ_CACHE_PREFETCH_STATUS = 1815;</code>
     */
    RESPONSE_GET_SSD_READ_CACHE_PREFETCH_STATUS(1185, 1815),
    /**
     * <code>REQUEST_QUERY_SSD_READ_CACHE_STATUS = 1816;</code>
     */
    REQUEST_QUERY_SSD_READ_CACHE_STATUS(1186, 1816),
    /**
     * <code>RESPONSE_QUERY_SSD_READ_CACHE_STATUS = 1817;</code>
     *
     * <pre>
     *===== end SSD Read Cache  commands===
     * </pre>
     */
    RESPONSE_QUERY_SSD_READ_CACHE_STATUS(1187, 1817),
    /**
     * <code>REQUEST_GET_VNEST_NODE_MIGRATION = 1818;</code>
     *
     * <pre>
     * vnest migration
     * </pre>
     */
    REQUEST_GET_VNEST_NODE_MIGRATION(1188, 1818),
    /**
     * <code>RESPONSE_GET_VNEST_NODE_MIGRATION = 1819;</code>
     */
    RESPONSE_GET_VNEST_NODE_MIGRATION(1189, 1819),
    /**
     * <code>REQUEST_RESET_TIME_BEFORE_SUSPECT = 1820;</code>
     */
    REQUEST_RESET_TIME_BEFORE_SUSPECT(1190, 1820),
    /**
     * <code>RESPONSE_RESET_TIME_BEFORE_SUSPECT = 1821;</code>
     */
    RESPONSE_RESET_TIME_BEFORE_SUSPECT(1191, 1821),
    /**
     * <code>REQUEST_UPDATE_CHUNK_CUSTOM_STATE = 1822;</code>
     */
    REQUEST_UPDATE_CHUNK_CUSTOM_STATE(1192, 1822),
    /**
     * <code>RESPONSE_UPDATE_CHUNK_CUSTOM_STATE = 1823;</code>
     */
    RESPONSE_UPDATE_CHUNK_CUSTOM_STATE(1193, 1823),
    /**
     * <code>REQUEST_GET_DT_STATUS = 1824;</code>
     *
     * <pre>
     * Added for advanced DT status check
     * </pre>
     */
    REQUEST_GET_DT_STATUS(1194, 1824),
    /**
     * <code>RESPONSE_GET_DT_STATUS = 1825;</code>
     */
    RESPONSE_GET_DT_STATUS(1195, 1825),
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_USE_UPDATE = 1826;</code>
     *
     * <pre>
     *Added for AccessKey LastUpdate
     * </pre>
     */
    REQUEST_IAMUSER_ACCESS_KEY_USE_UPDATE(1196, 1826),
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_USE_UPDATE = 1827;</code>
     */
    RESPONSE_IAMUSER_ACCESS_KEY_USE_UPDATE(1197, 1827),
    /**
     * <code>REQUEST_DT_OWNERSHIP_XFER = 1828;</code>
     */
    REQUEST_DT_OWNERSHIP_XFER(1198, 1828),
    /**
     * <code>RESPONSE_DT_OWNERSHIP_XFER = 1829;</code>
     */
    RESPONSE_DT_OWNERSHIP_XFER(1199, 1829),
    /**
     * <code>REQUEST_GET_DT_GIVEOUT_STATS = 1830;</code>
     */
    REQUEST_GET_DT_GIVEOUT_STATS(1200, 1830),
    /**
     * <code>RESPONSE_GET_DT_GIVEOUT_STATS = 1831;</code>
     */
    RESPONSE_GET_DT_GIVEOUT_STATS(1201, 1831),
    /**
     * <code>REQUEST_MODIFY_BOOTSTRAP_TASKS = 1832;</code>
     */
    REQUEST_MODIFY_BOOTSTRAP_TASKS(1202, 1832),
    /**
     * <code>RESPONSE_MODIFY_BOOTSTRAP_TASKS = 1833;</code>
     */
    RESPONSE_MODIFY_BOOTSTRAP_TASKS(1203, 1833),
    /**
     * <code>REQUEST_INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MINOR = 1834;</code>
     */
    REQUEST_INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MINOR(1204, 1834),
    /**
     * <code>RESPONSE_INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MINOR = 1835;</code>
     */
    RESPONSE_INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MINOR(1205, 1835),
    /**
     * <code>REQUEST_DTSM_CAPABILITIES = 1836;</code>
     *
     * <pre>
     *===== Directory Table Service Manager Commands ======
     * </pre>
     */
    REQUEST_DTSM_CAPABILITIES(1206, 1836),
    /**
     * <code>RESPOSE_DTSM_CAPABILITIES = 1837;</code>
     */
    RESPOSE_DTSM_CAPABILITIES(1207, 1837),
    /**
     * <code>REQUEST_DTSM_BPLUSTREEDUMP = 1838;</code>
     */
    REQUEST_DTSM_BPLUSTREEDUMP(1208, 1838),
    /**
     * <code>RESPOSE_DTSM_BPLUSTREEDUMP = 1839;</code>
     */
    RESPOSE_DTSM_BPLUSTREEDUMP(1209, 1839),
    /**
     * <code>REQUEST_DTSM_BPLUSTREEDUMP_STATUS = 1840;</code>
     */
    REQUEST_DTSM_BPLUSTREEDUMP_STATUS(1210, 1840),
    /**
     * <code>RESPOSE_DTSM_BPLUSTREEDUMP_STATUS = 1841;</code>
     */
    RESPOSE_DTSM_BPLUSTREEDUMP_STATUS(1211, 1841),
    /**
     * <code>REQUEST_DTSM_BPLUSTREEDUMP_GETLASTDUMPRESULT = 1842;</code>
     */
    REQUEST_DTSM_BPLUSTREEDUMP_GETLASTDUMPRESULT(1212, 1842),
    /**
     * <code>RESPOSE_DTSM_BPLUSTREEDUMP_GETLASTDUMPRESULT = 1843;</code>
     */
    RESPOSE_DTSM_BPLUSTREEDUMP_GETLASTDUMPRESULT(1213, 1843),
    /**
     * <code>REQUEST_DTSM_BPLUSTREEDUMP_ABORT = 1844;</code>
     */
    REQUEST_DTSM_BPLUSTREEDUMP_ABORT(1214, 1844),
    /**
     * <code>RESPOSE_DTSM_BPLUSTREEDUMP_ABORT = 1845;</code>
     *
     * <pre>
     *===== end Directory Table Service Manager Commands ===
     * </pre>
     */
    RESPOSE_DTSM_BPLUSTREEDUMP_ABORT(1215, 1845),
    /**
     * <code>REQUEST_FANOUT_CLIENT_EC_COMPLETE = 1846;</code>
     */
    REQUEST_FANOUT_CLIENT_EC_COMPLETE(1216, 1846),
    /**
     * <code>RESPONSE_FANOUT_CLIENT_EC_COMPLETE = 1847;</code>
     */
    RESPONSE_FANOUT_CLIENT_EC_COMPLETE(1217, 1847),
    /**
     * <code>REQUEST_ROTATION_KEY_REWRAP_TASK_CREATE = 1848;</code>
     *
     * <pre>
     *==== ROTATION_KEY REWRAP TASK KEY COMMANDS ====
     * </pre>
     */
    REQUEST_ROTATION_KEY_REWRAP_TASK_CREATE(1218, 1848),
    /**
     * <code>RESPONSE_ROTATION_KEY_REWRAP_TASK_CREATE = 1849;</code>
     */
    RESPONSE_ROTATION_KEY_REWRAP_TASK_CREATE(1219, 1849),
    /**
     * <code>REQUEST_ROTATION_KEY_REWRAP_TASK_GET = 1850;</code>
     */
    REQUEST_ROTATION_KEY_REWRAP_TASK_GET(1220, 1850),
    /**
     * <code>RESPONSE_ROTATION_KEY_REWRAP_TASK_GET = 1851;</code>
     */
    RESPONSE_ROTATION_KEY_REWRAP_TASK_GET(1221, 1851),
    /**
     * <code>REQUEST_ROTATION_KEY_REWRAP_TASK_UPDATE = 1852;</code>
     */
    REQUEST_ROTATION_KEY_REWRAP_TASK_UPDATE(1222, 1852),
    /**
     * <code>RESPONSE_ROTATION_KEY_REWRAP_TASK_UPDATE = 1853;</code>
     */
    RESPONSE_ROTATION_KEY_REWRAP_TASK_UPDATE(1223, 1853),
    /**
     * <code>REQUEST_ROTATION_KEY_REWRAP_TASK_DELETE = 1854;</code>
     */
    REQUEST_ROTATION_KEY_REWRAP_TASK_DELETE(1224, 1854),
    /**
     * <code>RESPONSE_ROTATION_KEY_REWRAP_TASK_DELETE = 1855;</code>
     */
    RESPONSE_ROTATION_KEY_REWRAP_TASK_DELETE(1225, 1855),
    /**
     * <code>REQUEST_ROTATION_KEY_REWRAP_TASK_LIST = 1856;</code>
     */
    REQUEST_ROTATION_KEY_REWRAP_TASK_LIST(1226, 1856),
    /**
     * <code>RESPONSE_ROTATION_KEY_REWRAP_TASK_LIST = 1857;</code>
     *
     * <pre>
     *==== END ROTATION_KEY REWRAP TASK KEY COMMANDS ====
     * </pre>
     */
    RESPONSE_ROTATION_KEY_REWRAP_TASK_LIST(1227, 1857),
    /**
     * <code>REQUEST_FEDERATION_CONFIG_LIST_ADD = 1860;</code>
     *
     * <pre>
     *==== FederationConfigurationList commands ====
     * </pre>
     */
    REQUEST_FEDERATION_CONFIG_LIST_ADD(1228, 1860),
    /**
     * <code>RESPONSE_FEDERATION_CONFIG_LIST_ADD = 1861;</code>
     */
    RESPONSE_FEDERATION_CONFIG_LIST_ADD(1229, 1861),
    /**
     * <code>REQUEST_FEDERATION_CONFIG_LIST_REMOVE = 1862;</code>
     */
    REQUEST_FEDERATION_CONFIG_LIST_REMOVE(1230, 1862),
    /**
     * <code>RESPONSE_FEDERATION_CONFIG_LIST_REMOVE = 1863;</code>
     */
    RESPONSE_FEDERATION_CONFIG_LIST_REMOVE(1231, 1863),
    /**
     * <code>REQUEST_FEDERATION_CONFIG_LIST_GET = 1864;</code>
     */
    REQUEST_FEDERATION_CONFIG_LIST_GET(1232, 1864),
    /**
     * <code>RESPONSE_FEDERATION_CONFIG_LIST_GET = 1865;</code>
     */
    RESPONSE_FEDERATION_CONFIG_LIST_GET(1233, 1865),
    /**
     * <code>REQUEST_FEDERATION_CONFIG_LIST_LIST = 1866;</code>
     */
    REQUEST_FEDERATION_CONFIG_LIST_LIST(1234, 1866),
    /**
     * <code>RESPONSE_FEDERATION_CONFIG_LIST_LIST = 1867;</code>
     *
     * <pre>
     *==== END FederationConfigurationList commands ====
     * </pre>
     */
    RESPONSE_FEDERATION_CONFIG_LIST_LIST(1235, 1867),
    /**
     * <code>REQUEST_OBJECT_IN_USE_CHUNKS = 1984;</code>
     */
    REQUEST_OBJECT_IN_USE_CHUNKS(1236, 1984),
    /**
     * <code>RESPONSE_OBJECT_IN_USE_CHUNKS = 1985;</code>
     */
    RESPONSE_OBJECT_IN_USE_CHUNKS(1237, 1985),
    /**
     * <code>REQUEST_IS_MPU_ACTIVE = 1986;</code>
     */
    REQUEST_IS_MPU_ACTIVE(1238, 1986),
    /**
     * <code>RESPONSE_IS_MPU_ACTIVE = 1987;</code>
     */
    RESPONSE_IS_MPU_ACTIVE(1239, 1987),
    /**
     * <code>REQUEST_OBJECT_QUERY_LIST_VERSIONS = 2018;</code>
     */
    REQUEST_OBJECT_QUERY_LIST_VERSIONS(1240, 2018),
    /**
     * <code>RESPONSE_OBJECT_QUERY_LIST_VERSIONS = 2019;</code>
     */
    RESPONSE_OBJECT_QUERY_LIST_VERSIONS(1241, 2019),
    /**
     * <code>REQUEST_DELETE_CHUNK_OBJECT = 2098;</code>
     */
    REQUEST_DELETE_CHUNK_OBJECT(1242, 2098),
    /**
     * <code>RESPONSE_DELETE_CHUNK_OBJECT = 2099;</code>
     */
    RESPONSE_DELETE_CHUNK_OBJECT(1243, 2099),
    ;

    /**
     * <code>RESPONSE_FAILURE = -1;</code>
     *
     * <pre>
     * it is assumed in the code that any request has even number
     * and any response has odd number
     * </pre>
     */
    public static final int RESPONSE_FAILURE_VALUE = -1;
    /**
     * <code>REQUEST_CREATE_OBJECT = 0;</code>
     */
    public static final int REQUEST_CREATE_OBJECT_VALUE = 0;
    /**
     * <code>RESPONSE_CREATE_OBJECT = 1;</code>
     */
    public static final int RESPONSE_CREATE_OBJECT_VALUE = 1;
    /**
     * <code>REQUEST_COMPLETEMPU_OBJECT = 2;</code>
     */
    public static final int REQUEST_COMPLETEMPU_OBJECT_VALUE = 2;
    /**
     * <code>RESPONSE_COMPLETEMPU_OBJECT = 3;</code>
     */
    public static final int RESPONSE_COMPLETEMPU_OBJECT_VALUE = 3;
    /**
     * <code>REQUEST_UPDATE_OBJECT = 4;</code>
     */
    public static final int REQUEST_UPDATE_OBJECT_VALUE = 4;
    /**
     * <code>RESPONSE_UPDATE_OBJECT = 5;</code>
     */
    public static final int RESPONSE_UPDATE_OBJECT_VALUE = 5;
    /**
     * <code>REQUEST_MARKERUPDATE_OBJECT = 6;</code>
     */
    public static final int REQUEST_MARKERUPDATE_OBJECT_VALUE = 6;
    /**
     * <code>RESPONSE_MARKERUPDATE_OBJECT = 7;</code>
     */
    public static final int RESPONSE_MARKERUPDATE_OBJECT_VALUE = 7;
    /**
     * <code>REQUEST_REMOVEVERSION_OBJECT = 8;</code>
     */
    public static final int REQUEST_REMOVEVERSION_OBJECT_VALUE = 8;
    /**
     * <code>RESPONSE_REMOVEVERSION_OBJECT = 9;</code>
     */
    public static final int RESPONSE_REMOVEVERSION_OBJECT_VALUE = 9;
    /**
     * <code>REQUEST_INSERT_ENTRY = 10;</code>
     */
    public static final int REQUEST_INSERT_ENTRY_VALUE = 10;
    /**
     * <code>RESPONSE_INSERT_ENTRY = 11;</code>
     */
    public static final int RESPONSE_INSERT_ENTRY_VALUE = 11;
    /**
     * <code>REQUEST_GET_ENTRY = 12;</code>
     */
    public static final int REQUEST_GET_ENTRY_VALUE = 12;
    /**
     * <code>RESPONSE_GET_ENTRY = 13;</code>
     */
    public static final int RESPONSE_GET_ENTRY_VALUE = 13;
    /**
     * <code>REQUEST_REMOVE_ENTRY = 14;</code>
     */
    public static final int REQUEST_REMOVE_ENTRY_VALUE = 14;
    /**
     * <code>RESPONSE_REMOVE_ENTRY = 15;</code>
     */
    public static final int RESPONSE_REMOVE_ENTRY_VALUE = 15;
    /**
     * <code>REQUEST_LIST_ENTRY = 16;</code>
     */
    public static final int REQUEST_LIST_ENTRY_VALUE = 16;
    /**
     * <code>RESPONSE_LIST_ENTRY = 17;</code>
     */
    public static final int RESPONSE_LIST_ENTRY_VALUE = 17;
    /**
     * <code>REQUEST_UPLOAD_PART = 18;</code>
     */
    public static final int REQUEST_UPLOAD_PART_VALUE = 18;
    /**
     * <code>RESPONSE_UPLOAD_PART = 19;</code>
     */
    public static final int RESPONSE_UPLOAD_PART_VALUE = 19;
    /**
     * <code>REQUEST_ABORT_UPLOAD = 20;</code>
     */
    public static final int REQUEST_ABORT_UPLOAD_VALUE = 20;
    /**
     * <code>RESPONSE_ABORT_UPLOAD = 21;</code>
     */
    public static final int RESPONSE_ABORT_UPLOAD_VALUE = 21;
    /**
     * <code>REQUEST_CREATE_OBJECT_LIST_ENTRY = 22;</code>
     */
    public static final int REQUEST_CREATE_OBJECT_LIST_ENTRY_VALUE = 22;
    /**
     * <code>RESPONSE_CREATE_OBJECT_LIST_ENTRY = 23;</code>
     */
    public static final int RESPONSE_CREATE_OBJECT_LIST_ENTRY_VALUE = 23;
    /**
     * <code>REQUEST_REMOVE_OBJECT_LIST_ENTRY = 24;</code>
     */
    public static final int REQUEST_REMOVE_OBJECT_LIST_ENTRY_VALUE = 24;
    /**
     * <code>RESPONSE_REMOVE_OBJECT_LIST_ENTRY = 25;</code>
     */
    public static final int RESPONSE_REMOVE_OBJECT_LIST_ENTRY_VALUE = 25;
    /**
     * <code>REQUEST_PING = 26;</code>
     */
    public static final int REQUEST_PING_VALUE = 26;
    /**
     * <code>RESPONSE_PING = 27;</code>
     */
    public static final int RESPONSE_PING_VALUE = 27;
    /**
     * <code>REQUEST_OBJECT_QUERY = 28;</code>
     */
    public static final int REQUEST_OBJECT_QUERY_VALUE = 28;
    /**
     * <code>RESPONSE_OBJECT_QUERY = 29;</code>
     */
    public static final int RESPONSE_OBJECT_QUERY_VALUE = 29;
    /**
     * <code>REQUEST_CREATE_CHUNK = 30;</code>
     */
    public static final int REQUEST_CREATE_CHUNK_VALUE = 30;
    /**
     * <code>RESPONSE_CREATE_CHUNK = 31;</code>
     */
    public static final int RESPONSE_CREATE_CHUNK_VALUE = 31;
    /**
     * <code>REQUEST_DELETE_CHUNK = 32;</code>
     */
    public static final int REQUEST_DELETE_CHUNK_VALUE = 32;
    /**
     * <code>RESPONSE_DELETE_CHUNK = 33;</code>
     */
    public static final int RESPONSE_DELETE_CHUNK_VALUE = 33;
    /**
     * <code>REQUEST_SEAL_CHUNK = 34;</code>
     */
    public static final int REQUEST_SEAL_CHUNK_VALUE = 34;
    /**
     * <code>RESPONSE_SEAL_CHUNK = 35;</code>
     */
    public static final int RESPONSE_SEAL_CHUNK_VALUE = 35;
    /**
     * <code>REQUEST_QUERY_CHUNK = 36;</code>
     */
    public static final int REQUEST_QUERY_CHUNK_VALUE = 36;
    /**
     * <code>RESPONSE_QUERY_CHUNK = 37;</code>
     */
    public static final int RESPONSE_QUERY_CHUNK_VALUE = 37;
    /**
     * <code>REQUEST_REPORT_BLOCK_ERROR = 38;</code>
     */
    public static final int REQUEST_REPORT_BLOCK_ERROR_VALUE = 38;
    /**
     * <code>RESPONSE_REPORT_BLOCK_ERROR = 39;</code>
     */
    public static final int RESPONSE_REPORT_BLOCK_ERROR_VALUE = 39;
    /**
     * <code>REQUEST_FREE_BLOCK = 40;</code>
     */
    public static final int REQUEST_FREE_BLOCK_VALUE = 40;
    /**
     * <code>RESPONSE_FREE_BLOCK = 41;</code>
     */
    public static final int RESPONSE_FREE_BLOCK_VALUE = 41;
    /**
     * <code>REQUEST_CONFIRM_BLOCK_REFERENCE = 42;</code>
     */
    public static final int REQUEST_CONFIRM_BLOCK_REFERENCE_VALUE = 42;
    /**
     * <code>RESPONSE_CONFIRM_BLOCK_REFERENCE = 43;</code>
     */
    public static final int RESPONSE_CONFIRM_BLOCK_REFERENCE_VALUE = 43;
    /**
     * <code>REQUEST_ALLOCATE_BLOCK = 44;</code>
     */
    public static final int REQUEST_ALLOCATE_BLOCK_VALUE = 44;
    /**
     * <code>RESPONSE_ALLOCATE_BLOCK = 45;</code>
     */
    public static final int RESPONSE_ALLOCATE_BLOCK_VALUE = 45;
    /**
     * <code>REQUEST_JOB_SUBMIT = 46;</code>
     */
    public static final int REQUEST_JOB_SUBMIT_VALUE = 46;
    /**
     * <code>RESPONSE_JOB_SUBMIT = 47;</code>
     */
    public static final int RESPONSE_JOB_SUBMIT_VALUE = 47;
    /**
     * <code>REQUEST_JOB_DONE = 48;</code>
     */
    public static final int REQUEST_JOB_DONE_VALUE = 48;
    /**
     * <code>RESPONSE_JOB_DONE = 49;</code>
     */
    public static final int RESPONSE_JOB_DONE_VALUE = 49;
    /**
     * <code>REQUEST_INSERT_REGION = 50;</code>
     */
    public static final int REQUEST_INSERT_REGION_VALUE = 50;
    /**
     * <code>RESPONSE_INSERT_REGION = 51;</code>
     */
    public static final int RESPONSE_INSERT_REGION_VALUE = 51;
    /**
     * <code>REQUEST_LIST_REGION = 52;</code>
     */
    public static final int REQUEST_LIST_REGION_VALUE = 52;
    /**
     * <code>RESPONSE_LIST_REGION = 53;</code>
     */
    public static final int RESPONSE_LIST_REGION_VALUE = 53;
    /**
     * <code>REQUEST_GET_BPLUSTREE = 54;</code>
     */
    public static final int REQUEST_GET_BPLUSTREE_VALUE = 54;
    /**
     * <code>RESPONSE_GET_BPLUSTREE = 55;</code>
     */
    public static final int RESPONSE_GET_BPLUSTREE_VALUE = 55;
    /**
     * <code>REQUEST_DT_SYNC = 56;</code>
     */
    public static final int REQUEST_DT_SYNC_VALUE = 56;
    /**
     * <code>RESPONSE_DT_SYNC = 57;</code>
     */
    public static final int RESPONSE_DT_SYNC_VALUE = 57;
    /**
     * <code>REQUEST_UPDATE_REGIONS = 58;</code>
     */
    public static final int REQUEST_UPDATE_REGIONS_VALUE = 58;
    /**
     * <code>RESPONSE_UPDATE_REGIONS = 59;</code>
     */
    public static final int RESPONSE_UPDATE_REGIONS_VALUE = 59;
    /**
     * <code>REQUEST_GET_BPLUSTREE_PARSER_MARKER = 60;</code>
     */
    public static final int REQUEST_GET_BPLUSTREE_PARSER_MARKER_VALUE = 60;
    /**
     * <code>RESPONSE_GET_BPLUSTREE_PARSER_MARKER = 61;</code>
     */
    public static final int RESPONSE_GET_BPLUSTREE_PARSER_MARKER_VALUE = 61;
    /**
     * <code>REQUEST_SET_BPLUSTREE_PARSER_MARKER = 62;</code>
     */
    public static final int REQUEST_SET_BPLUSTREE_PARSER_MARKER_VALUE = 62;
    /**
     * <code>RESPONSE_SET_BPLUSTREE_PARSER_MARKER = 63;</code>
     */
    public static final int RESPONSE_SET_BPLUSTREE_PARSER_MARKER_VALUE = 63;
    /**
     * <code>REQUEST_GET_JOURNAL_PARSER_MARKER = 64;</code>
     */
    public static final int REQUEST_GET_JOURNAL_PARSER_MARKER_VALUE = 64;
    /**
     * <code>RESPONSE_GET_JOURNAL_PARSER_MARKER = 65;</code>
     */
    public static final int RESPONSE_GET_JOURNAL_PARSER_MARKER_VALUE = 65;
    /**
     * <code>REQUEST_SET_JOURNAL_PARSER_MARKER = 66;</code>
     */
    public static final int REQUEST_SET_JOURNAL_PARSER_MARKER_VALUE = 66;
    /**
     * <code>RESPONSE_SET_JOURNAL_PARSER_MARKER = 67;</code>
     */
    public static final int RESPONSE_SET_JOURNAL_PARSER_MARKER_VALUE = 67;
    /**
     * <code>REQUEST_CONFIRM_ALLOCATE_BLOCK = 68;</code>
     */
    public static final int REQUEST_CONFIRM_ALLOCATE_BLOCK_VALUE = 68;
    /**
     * <code>RESPONSE_CONFIRM_ALLOCATE_BLOCK = 69;</code>
     */
    public static final int RESPONSE_CONFIRM_ALLOCATE_BLOCK_VALUE = 69;
    /**
     * <code>REQUEST_EXTEND_CHUNK_TIMEOUT_LEASE = 70;</code>
     */
    public static final int REQUEST_EXTEND_CHUNK_TIMEOUT_LEASE_VALUE = 70;
    /**
     * <code>RESPONSE_EXTEND_CHUNK_TIMEOUT_LEASE = 71;</code>
     */
    public static final int RESPONSE_EXTEND_CHUNK_TIMEOUT_LEASE_VALUE = 71;
    /**
     * <code>REQUEST_INSERT_REMOTE_CHUNK = 72;</code>
     */
    public static final int REQUEST_INSERT_REMOTE_CHUNK_VALUE = 72;
    /**
     * <code>RESPONSE_INSERT_REMOTE_CHUNK = 73;</code>
     */
    public static final int RESPONSE_INSERT_REMOTE_CHUNK_VALUE = 73;
    /**
     * <code>REQUEST_UPDATE_REMOTE_CHUNK = 74;</code>
     */
    public static final int REQUEST_UPDATE_REMOTE_CHUNK_VALUE = 74;
    /**
     * <code>RESPONSE_UPDATE_REMOTE_CHUNK = 75;</code>
     */
    public static final int RESPONSE_UPDATE_REMOTE_CHUNK_VALUE = 75;
    /**
     * <code>REQUEST_DELETE_REMOTE_CHUNK = 76;</code>
     */
    public static final int REQUEST_DELETE_REMOTE_CHUNK_VALUE = 76;
    /**
     * <code>RESPONSE_DELETE_REMOTE_CHUNK = 77;</code>
     */
    public static final int RESPONSE_DELETE_REMOTE_CHUNK_VALUE = 77;
    /**
     * <code>REQUEST_GEO_START_COPY = 78;</code>
     */
    public static final int REQUEST_GEO_START_COPY_VALUE = 78;
    /**
     * <code>RESPONSE_GEO_START_COPY = 79;</code>
     */
    public static final int RESPONSE_GEO_START_COPY_VALUE = 79;
    /**
     * <code>REQUEST_GEO_COMMIT_COPY = 80;</code>
     */
    public static final int REQUEST_GEO_COMMIT_COPY_VALUE = 80;
    /**
     * <code>RESPONSE_GEO_COMMIT_COPY = 81;</code>
     */
    public static final int RESPONSE_GEO_COMMIT_COPY_VALUE = 81;
    /**
     * <code>REQUEST_GEO_REMOVE_COPY_ENTRY = 82;</code>
     */
    public static final int REQUEST_GEO_REMOVE_COPY_ENTRY_VALUE = 82;
    /**
     * <code>RESPONSE_GEO_REMOVE_COPY_ENTRY = 83;</code>
     */
    public static final int RESPONSE_GEO_REMOVE_COPY_ENTRY_VALUE = 83;
    /**
     * <code>REQUEST_GET_REFERENCE_COLLECTION_PROGRESS = 84;</code>
     */
    public static final int REQUEST_GET_REFERENCE_COLLECTION_PROGRESS_VALUE = 84;
    /**
     * <code>RESPONSE_GET_REFERENCE_COLLECTION_PROGRESS = 85;</code>
     */
    public static final int RESPONSE_GET_REFERENCE_COLLECTION_PROGRESS_VALUE = 85;
    /**
     * <code>REQUEST_SET_FAILPOINT = 86;</code>
     */
    public static final int REQUEST_SET_FAILPOINT_VALUE = 86;
    /**
     * <code>RESPONSE_SET_FAILPOINT = 87;</code>
     */
    public static final int RESPONSE_SET_FAILPOINT_VALUE = 87;
    /**
     * <code>REQUEST_INSERT_OWNERSHIP_INFO = 88;</code>
     */
    public static final int REQUEST_INSERT_OWNERSHIP_INFO_VALUE = 88;
    /**
     * <code>RESPONSE_INSERT_OWNERSHIP_INFO = 89;</code>
     */
    public static final int RESPONSE_INSERT_OWNERSHIP_INFO_VALUE = 89;
    /**
     * <code>REQUEST_REMOVE_OWNERSHIP_INFO = 90;</code>
     */
    public static final int REQUEST_REMOVE_OWNERSHIP_INFO_VALUE = 90;
    /**
     * <code>RESPONSE_REMOVE_OWNERSHIP_INFO = 91;</code>
     */
    public static final int RESPONSE_REMOVE_OWNERSHIP_INFO_VALUE = 91;
    /**
     * <code>REQUEST_GET_OWNERSHIP_INFO = 92;</code>
     */
    public static final int REQUEST_GET_OWNERSHIP_INFO_VALUE = 92;
    /**
     * <code>RESPONSE_GET_OWNERSHIP_INFO = 93;</code>
     */
    public static final int RESPONSE_GET_OWNERSHIP_INFO_VALUE = 93;
    /**
     * <code>REQUEST_GET_OWNERSHIP_INFO_FOR_TYPES = 94;</code>
     */
    public static final int REQUEST_GET_OWNERSHIP_INFO_FOR_TYPES_VALUE = 94;
    /**
     * <code>RESPONSE_GET_OWNERSHIP_INFO_FOR_TYPES = 95;</code>
     */
    public static final int RESPONSE_GET_OWNERSHIP_INFO_FOR_TYPES_VALUE = 95;
    /**
     * <code>REQUEST_UPDATE_OWNERSHIP_INFO = 96;</code>
     */
    public static final int REQUEST_UPDATE_OWNERSHIP_INFO_VALUE = 96;
    /**
     * <code>RESPONSE_UPDATE_OWNERSHIP_INFO = 97;</code>
     */
    public static final int RESPONSE_UPDATE_OWNERSHIP_INFO_VALUE = 97;
    /**
     * <code>REQUEST_GEO_DELETE_CHUNK = 98;</code>
     */
    public static final int REQUEST_GEO_DELETE_CHUNK_VALUE = 98;
    /**
     * <code>RESPONSE_GEO_DELETE_CHUNK = 99;</code>
     */
    public static final int RESPONSE_GEO_DELETE_CHUNK_VALUE = 99;
    /**
     * <code>REQUEST_DT_QUERY = 100;</code>
     */
    public static final int REQUEST_DT_QUERY_VALUE = 100;
    /**
     * <code>RESPONSE_DT_QUERY = 101;</code>
     */
    public static final int RESPONSE_DT_QUERY_VALUE = 101;
    /**
     * <code>REQUEST_LIST_BPLUSTREE = 102;</code>
     */
    public static final int REQUEST_LIST_BPLUSTREE_VALUE = 102;
    /**
     * <code>RESPONSE_LIST_BPLUSTREE = 103;</code>
     */
    public static final int RESPONSE_LIST_BPLUSTREE_VALUE = 103;
    /**
     * <code>REQUEST_BLOCK_STATUS_UPDATE = 104;</code>
     */
    public static final int REQUEST_BLOCK_STATUS_UPDATE_VALUE = 104;
    /**
     * <code>RESPONSE_BLOCK_STATUS_UPDATE = 105;</code>
     */
    public static final int RESPONSE_BLOCK_STATUS_UPDATE_VALUE = 105;
    /**
     * <code>REQUEST_MAINTENANCE_QUERY = 106;</code>
     */
    public static final int REQUEST_MAINTENANCE_QUERY_VALUE = 106;
    /**
     * <code>RESPONSE_MAINTENANCE_QUERY = 107;</code>
     */
    public static final int RESPONSE_MAINTENANCE_QUERY_VALUE = 107;
    /**
     * <code>REQUEST_GET_INDEX_FORMAT_VERSION = 108;</code>
     */
    public static final int REQUEST_GET_INDEX_FORMAT_VERSION_VALUE = 108;
    /**
     * <code>RESPONSE_GET_INDEX_FORMAT_VERSION = 109;</code>
     */
    public static final int RESPONSE_GET_INDEX_FORMAT_VERSION_VALUE = 109;
    /**
     * <code>REQUEST_SET_INDEX_FORMAT_VERSION = 110;</code>
     */
    public static final int REQUEST_SET_INDEX_FORMAT_VERSION_VALUE = 110;
    /**
     * <code>RESPONSE_SET_INDEX_FORMAT_VERSION = 111;</code>
     */
    public static final int RESPONSE_SET_INDEX_FORMAT_VERSION_VALUE = 111;
    /**
     * <code>REQUEST_INSERT_REMOTE_REGION = 112;</code>
     */
    public static final int REQUEST_INSERT_REMOTE_REGION_VALUE = 112;
    /**
     * <code>RESPONSE_INSERT_REMOTE_REGION = 113;</code>
     */
    public static final int RESPONSE_INSERT_REMOTE_REGION_VALUE = 113;
    /**
     * <code>REQUEST_INSERT_REMOTE_BTREE_MARKER = 114;</code>
     */
    public static final int REQUEST_INSERT_REMOTE_BTREE_MARKER_VALUE = 114;
    /**
     * <code>RESPONSE_INSERT_REMOTE_BTREE_MARKER = 115;</code>
     */
    public static final int RESPONSE_INSERT_REMOTE_BTREE_MARKER_VALUE = 115;
    /**
     * <code>REQUEST_GEO_REPLICATE_CHUNK = 116;</code>
     */
    public static final int REQUEST_GEO_REPLICATE_CHUNK_VALUE = 116;
    /**
     * <code>RESPONSE_GEO_REPLICATE_CHUNK = 117;</code>
     */
    public static final int RESPONSE_GEO_REPLICATE_CHUNK_VALUE = 117;
    /**
     * <code>REQUEST_CHUNK_REPLICATION_CHECK = 118;</code>
     */
    public static final int REQUEST_CHUNK_REPLICATION_CHECK_VALUE = 118;
    /**
     * <code>RESPONSE_CHUNK_REPLICATION_CHECK = 119;</code>
     */
    public static final int RESPONSE_CHUNK_REPLICATION_CHECK_VALUE = 119;
    /**
     * <code>REQUEST_GET_NEXT_CHECKER_MARKER_POSITION = 120;</code>
     */
    public static final int REQUEST_GET_NEXT_CHECKER_MARKER_POSITION_VALUE = 120;
    /**
     * <code>RESPONSE_GET_NEXT_CHECKER_MARKER_POSITION = 121;</code>
     */
    public static final int RESPONSE_GET_NEXT_CHECKER_MARKER_POSITION_VALUE = 121;
    /**
     * <code>REQUEST_INDEX_RECOVERY_STATE_TRANSITION = 122;</code>
     */
    public static final int REQUEST_INDEX_RECOVERY_STATE_TRANSITION_VALUE = 122;
    /**
     * <code>RESPONSE_INDEX_RECOVERY_STATE_TRANSITION = 123;</code>
     */
    public static final int RESPONSE_INDEX_RECOVERY_STATE_TRANSITION_VALUE = 123;
    /**
     * <code>REQUEST_REPGROUP_RECONFIG = 124;</code>
     */
    public static final int REQUEST_REPGROUP_RECONFIG_VALUE = 124;
    /**
     * <code>RESPONSE_REPGROUP_RECONFIG = 125;</code>
     */
    public static final int RESPONSE_REPGROUP_RECONFIG_VALUE = 125;
    /**
     * <code>REQUEST_GET_INDEX_RECOVERY_TRACKER = 126;</code>
     */
    public static final int REQUEST_GET_INDEX_RECOVERY_TRACKER_VALUE = 126;
    /**
     * <code>RESPONSE_GET_INDEX_RECOVERY_TRACKER = 127;</code>
     */
    public static final int RESPONSE_GET_INDEX_RECOVERY_TRACKER_VALUE = 127;
    /**
     * <code>REQUEST_INSERT_RECOVERY_POINT = 128;</code>
     */
    public static final int REQUEST_INSERT_RECOVERY_POINT_VALUE = 128;
    /**
     * <code>RESPONSE_INSERT_RECOVERY_POINT = 129;</code>
     */
    public static final int RESPONSE_INSERT_RECOVERY_POINT_VALUE = 129;
    /**
     * <code>REQUEST_CLEAN_UP_BPLUS_TREES = 130;</code>
     */
    public static final int REQUEST_CLEAN_UP_BPLUS_TREES_VALUE = 130;
    /**
     * <code>RESPONSE_CLEAN_UP_BPLUS_TREES = 131;</code>
     */
    public static final int RESPONSE_CLEAN_UP_BPLUS_TREES_VALUE = 131;
    /**
     * <code>REQUEST_DT_MEMORY_TABLE_FORCE_SEAL = 132;</code>
     */
    public static final int REQUEST_DT_MEMORY_TABLE_FORCE_SEAL_VALUE = 132;
    /**
     * <code>RESPONSE_DT_MEMORY_TABLE_FORCE_SEAL = 133;</code>
     */
    public static final int RESPONSE_DT_MEMORY_TABLE_FORCE_SEAL_VALUE = 133;
    /**
     * <code>REQUEST_CREATE_COMMODITY_DEVICE = 134;</code>
     *
     * <pre>
     *sendRequest to some SSM
     * </pre>
     */
    public static final int REQUEST_CREATE_COMMODITY_DEVICE_VALUE = 134;
    /**
     * <code>RESPONSE_CREATE_COMMODITY_DEVICE = 135;</code>
     */
    public static final int RESPONSE_CREATE_COMMODITY_DEVICE_VALUE = 135;
    /**
     * <code>REQUEST_CREATE_FS_DEVICE = 136;</code>
     */
    public static final int REQUEST_CREATE_FS_DEVICE_VALUE = 136;
    /**
     * <code>RESPONSE_CREATE_FS_DEVICE = 137;</code>
     */
    public static final int RESPONSE_CREATE_FS_DEVICE_VALUE = 137;
    /**
     * <code>REQUEST_CREATE_COMMODITY_DEVICE_TO_OWNER = 138;</code>
     *
     * <pre>
     *sent to the device owner
     * </pre>
     */
    public static final int REQUEST_CREATE_COMMODITY_DEVICE_TO_OWNER_VALUE = 138;
    /**
     * <code>RESPONSE_CREATE_COMMODITY_DEVICE_FROM_OWNER = 139;</code>
     */
    public static final int RESPONSE_CREATE_COMMODITY_DEVICE_FROM_OWNER_VALUE = 139;
    /**
     * <code>REQUEST_CREATE_FS_DEVICE_TO_OWNER = 140;</code>
     */
    public static final int REQUEST_CREATE_FS_DEVICE_TO_OWNER_VALUE = 140;
    /**
     * <code>RESPONSE_CREATE_FS_DEVICE_FROM_OWNER = 141;</code>
     */
    public static final int RESPONSE_CREATE_FS_DEVICE_FROM_OWNER_VALUE = 141;
    /**
     * <code>REQUEST_LIST_HOSTING_DEVICES = 142;</code>
     */
    public static final int REQUEST_LIST_HOSTING_DEVICES_VALUE = 142;
    /**
     * <code>RESPONSE_LIST_HOSTING_DEVICES = 143;</code>
     */
    public static final int RESPONSE_LIST_HOSTING_DEVICES_VALUE = 143;
    /**
     * <code>REQUEST_DEVICE_CREATE_COMPLETE = 144;</code>
     *
     * <pre>
     *used by lower level DT to notify higher level DTs about completion of device init
     * </pre>
     */
    public static final int REQUEST_DEVICE_CREATE_COMPLETE_VALUE = 144;
    /**
     * <code>RESPONSE_DEVICE_CREATE_COMPLETE = 145;</code>
     */
    public static final int RESPONSE_DEVICE_CREATE_COMPLETE_VALUE = 145;
    /**
     * <code>REQUEST_START_DT_CREATION = 146;</code>
     */
    public static final int REQUEST_START_DT_CREATION_VALUE = 146;
    /**
     * <code>RESPONSE_START_DT_CREATION = 147;</code>
     */
    public static final int RESPONSE_START_DT_CREATION_VALUE = 147;
    /**
     * <code>REQUEST_HOSTING_DEVICE_INFO = 148;</code>
     */
    public static final int REQUEST_HOSTING_DEVICE_INFO_VALUE = 148;
    /**
     * <code>RESPONSE_HOSTING_DEVICE_INFO = 149;</code>
     */
    public static final int RESPONSE_HOSTING_DEVICE_INFO_VALUE = 149;
    /**
     * <code>RESPONSE_HOSTING_DEVICE_INFO_NULL = 151;</code>
     *
     * <pre>
     *skipping a number so that the response type can be odd
     * </pre>
     */
    public static final int RESPONSE_HOSTING_DEVICE_INFO_NULL_VALUE = 151;
    /**
     * <code>REQUEST_RESET_FAILPOINT = 152;</code>
     */
    public static final int REQUEST_RESET_FAILPOINT_VALUE = 152;
    /**
     * <code>RESPONSE_RESET_FAILPOINT = 153;</code>
     */
    public static final int RESPONSE_RESET_FAILPOINT_VALUE = 153;
    /**
     * <code>REQUEST_DT_BOOTSTRAP_QUERY = 154;</code>
     */
    public static final int REQUEST_DT_BOOTSTRAP_QUERY_VALUE = 154;
    /**
     * <code>RESPONSE_DT_BOOTSTRAP_QUERY = 155;</code>
     */
    public static final int RESPONSE_DT_BOOTSTRAP_QUERY_VALUE = 155;
    /**
     * <code>REQUEST_GC_TEST_GET_OBJ_INFO = 156;</code>
     */
    public static final int REQUEST_GC_TEST_GET_OBJ_INFO_VALUE = 156;
    /**
     * <code>RESPONSE_GC_TEST_GET_OBJ_INFO = 157;</code>
     */
    public static final int RESPONSE_GC_TEST_GET_OBJ_INFO_VALUE = 157;
    /**
     * <code>REQUEST_NAMESPACE_CREATE = 158;</code>
     *
     * <pre>
     * === Begin Namespace Commands === 
     * </pre>
     */
    public static final int REQUEST_NAMESPACE_CREATE_VALUE = 158;
    /**
     * <code>RESPONSE_NAMESPACE_CREATE = 159;</code>
     */
    public static final int RESPONSE_NAMESPACE_CREATE_VALUE = 159;
    /**
     * <code>REQUEST_NAMESPACE_GET = 160;</code>
     */
    public static final int REQUEST_NAMESPACE_GET_VALUE = 160;
    /**
     * <code>RESPONSE_NAMESPACE_GET = 161;</code>
     */
    public static final int RESPONSE_NAMESPACE_GET_VALUE = 161;
    /**
     * <code>REQUEST_NAMESPACE_DELETE = 162;</code>
     */
    public static final int REQUEST_NAMESPACE_DELETE_VALUE = 162;
    /**
     * <code>RESPONSE_NAMESPACE_DELETE = 163;</code>
     */
    public static final int RESPONSE_NAMESPACE_DELETE_VALUE = 163;
    /**
     * <code>REQUEST_NAMESPACE_UPDATE = 164;</code>
     */
    public static final int REQUEST_NAMESPACE_UPDATE_VALUE = 164;
    /**
     * <code>RESPONSE_NAMESPACE_UPDATE = 165;</code>
     */
    public static final int RESPONSE_NAMESPACE_UPDATE_VALUE = 165;
    /**
     * <code>REQUEST_NAMESPACE_LIST = 166;</code>
     */
    public static final int REQUEST_NAMESPACE_LIST_VALUE = 166;
    /**
     * <code>RESPONSE_NAMESPACE_LIST = 167;</code>
     *
     * <pre>
     * === End Namespace Commands === 
     * </pre>
     */
    public static final int RESPONSE_NAMESPACE_LIST_VALUE = 167;
    /**
     * <code>REQUEST_PAXOS_QUERY = 168;</code>
     */
    public static final int REQUEST_PAXOS_QUERY_VALUE = 168;
    /**
     * <code>RESPONSE_PAXOS_QUERY = 169;</code>
     */
    public static final int RESPONSE_PAXOS_QUERY_VALUE = 169;
    /**
     * <code>REQUEST_PAXOS_ACCEPT = 170;</code>
     */
    public static final int REQUEST_PAXOS_ACCEPT_VALUE = 170;
    /**
     * <code>RESPONSE_PAXOS_ACCEPT = 171;</code>
     */
    public static final int RESPONSE_PAXOS_ACCEPT_VALUE = 171;
    /**
     * <code>REQUEST_PAXOS_COMMIT = 172;</code>
     */
    public static final int REQUEST_PAXOS_COMMIT_VALUE = 172;
    /**
     * <code>RESPONSE_PAXOS_COMMIT = 173;</code>
     */
    public static final int RESPONSE_PAXOS_COMMIT_VALUE = 173;
    /**
     * <code>REQUEST_PAXOS_READ = 174;</code>
     */
    public static final int REQUEST_PAXOS_READ_VALUE = 174;
    /**
     * <code>RESPONSE_PAXOS_READ = 175;</code>
     */
    public static final int RESPONSE_PAXOS_READ_VALUE = 175;
    /**
     * <code>REQUEST_PAXOS_ABORT = 176;</code>
     */
    public static final int REQUEST_PAXOS_ABORT_VALUE = 176;
    /**
     * <code>RESPONSE_PAXOS_ABORT = 177;</code>
     */
    public static final int RESPONSE_PAXOS_ABORT_VALUE = 177;
    /**
     * <code>REQUEST_GET_JOURNAL_CONSUMPTION_PROGRESS = 178;</code>
     */
    public static final int REQUEST_GET_JOURNAL_CONSUMPTION_PROGRESS_VALUE = 178;
    /**
     * <code>RESPONSE_GET_JOURNAL_CONSUMPTION_PROGRESS = 179;</code>
     */
    public static final int RESPONSE_GET_JOURNAL_CONSUMPTION_PROGRESS_VALUE = 179;
    /**
     * <code>REQUEST_GET_BPLUSTREE_REFERENCE_COLLECTION_PROGRESS = 180;</code>
     */
    public static final int REQUEST_GET_BPLUSTREE_REFERENCE_COLLECTION_PROGRESS_VALUE = 180;
    /**
     * <code>RESPONSE_GET_BPLUSTREE_REFERENCE_COLLECTION_PROGRESS = 181;</code>
     */
    public static final int RESPONSE_GET_BPLUSTREE_REFERENCE_COLLECTION_PROGRESS_VALUE = 181;
    /**
     * <code>REQUEST_SET_JOURNAL_CONSUMPTION_PROGRESS = 182;</code>
     */
    public static final int REQUEST_SET_JOURNAL_CONSUMPTION_PROGRESS_VALUE = 182;
    /**
     * <code>RESPONSE_SET_JOURNAL_CONSUMPTION_PROGRESS = 183;</code>
     */
    public static final int RESPONSE_SET_JOURNAL_CONSUMPTION_PROGRESS_VALUE = 183;
    /**
     * <code>REQUEST_GET_CAPACITY_DETAILS = 184;</code>
     */
    public static final int REQUEST_GET_CAPACITY_DETAILS_VALUE = 184;
    /**
     * <code>RESPONSE_GET_CAPACITY_DETAILS = 185;</code>
     */
    public static final int RESPONSE_GET_CAPACITY_DETAILS_VALUE = 185;
    /**
     * <code>REQUEST_BATCH_EXEC_ENTRY = 186;</code>
     */
    public static final int REQUEST_BATCH_EXEC_ENTRY_VALUE = 186;
    /**
     * <code>RESPONSE_BATCH_EXEC_ENTRY = 187;</code>
     */
    public static final int RESPONSE_BATCH_EXEC_ENTRY_VALUE = 187;
    /**
     * <code>REQUEST_PREPARE_COPY_OBJECT = 188;</code>
     */
    public static final int REQUEST_PREPARE_COPY_OBJECT_VALUE = 188;
    /**
     * <code>RESPONSE_PREPARE_COPY_OBJECT = 189;</code>
     */
    public static final int RESPONSE_PREPARE_COPY_OBJECT_VALUE = 189;
    /**
     * <code>REQUEST_GET_LAST_JOURNAL_REGION = 190;</code>
     */
    public static final int REQUEST_GET_LAST_JOURNAL_REGION_VALUE = 190;
    /**
     * <code>RESPONSE_GET_LAST_JOURNAL_REGION = 191;</code>
     */
    public static final int RESPONSE_GET_LAST_JOURNAL_REGION_VALUE = 191;
    /**
     * <code>REQUEST_RESOURCE_TABLE_INSERT_COMPLETE = 192;</code>
     */
    public static final int REQUEST_RESOURCE_TABLE_INSERT_COMPLETE_VALUE = 192;
    /**
     * <code>RESPONSE_RESOURCE_TABLE_INSERT_COMPLETE = 193;</code>
     */
    public static final int RESPONSE_RESOURCE_TABLE_INSERT_COMPLETE_VALUE = 193;
    /**
     * <code>REQUEST_REFRESH_OWNERSHIP_INFO = 194;</code>
     */
    public static final int REQUEST_REFRESH_OWNERSHIP_INFO_VALUE = 194;
    /**
     * <code>RESPONSE_REFRESH_OWNERSHIP_INFO = 195;</code>
     */
    public static final int RESPONSE_REFRESH_OWNERSHIP_INFO_VALUE = 195;
    /**
     * <code>REQUEST_GEO_LIST_OBJ = 196;</code>
     */
    public static final int REQUEST_GEO_LIST_OBJ_VALUE = 196;
    /**
     * <code>RESPONSE_GEO_LIST_OBJ = 197;</code>
     */
    public static final int RESPONSE_GEO_LIST_OBJ_VALUE = 197;
    /**
     * <code>REQUEST_GEO_LIST_OBJ_UPDATES = 198;</code>
     */
    public static final int REQUEST_GEO_LIST_OBJ_UPDATES_VALUE = 198;
    /**
     * <code>RESPONSE_GEO_LIST_OBJ_UPDATES = 199;</code>
     */
    public static final int RESPONSE_GEO_LIST_OBJ_UPDATES_VALUE = 199;
    /**
     * <code>REQUEST_GEO_LIST_OBJ_INDEX = 200;</code>
     */
    public static final int REQUEST_GEO_LIST_OBJ_INDEX_VALUE = 200;
    /**
     * <code>RESPONSE_GEO_LIST_OBJ_INDEX = 201;</code>
     */
    public static final int RESPONSE_GEO_LIST_OBJ_INDEX_VALUE = 201;
    /**
     * <code>REQUEST_GET_OBJECT_LIST_ENTRY = 202;</code>
     */
    public static final int REQUEST_GET_OBJECT_LIST_ENTRY_VALUE = 202;
    /**
     * <code>RESPONSE_GET_OBJECT_LIST_ENTRY = 203;</code>
     */
    public static final int RESPONSE_GET_OBJECT_LIST_ENTRY_VALUE = 203;
    /**
     * <code>REQUEST_BLOCK_REALLOCATION = 204;</code>
     */
    public static final int REQUEST_BLOCK_REALLOCATION_VALUE = 204;
    /**
     * <code>RESPONSE_BLOCK_REALLOCATION = 205;</code>
     */
    public static final int RESPONSE_BLOCK_REALLOCATION_VALUE = 205;
    /**
     * <code>BLOCK_REALLOCATION_CONFIRMATION = 206;</code>
     */
    public static final int BLOCK_REALLOCATION_CONFIRMATION_VALUE = 206;
    /**
     * <code>REQUEST_BLOCK_REALLOCATION_CONFIRMATION = 208;</code>
     *
     * <pre>
     *Skipping a number
     * </pre>
     */
    public static final int REQUEST_BLOCK_REALLOCATION_CONFIRMATION_VALUE = 208;
    /**
     * <code>RESPONSE_BLOCK_REALLOCATION_CONFIRMATION = 209;</code>
     */
    public static final int RESPONSE_BLOCK_REALLOCATION_CONFIRMATION_VALUE = 209;
    /**
     * <code>REQUEST_USER_CREATE = 210;</code>
     *
     * <pre>
     * === Begin User Commands === 
     * </pre>
     */
    public static final int REQUEST_USER_CREATE_VALUE = 210;
    /**
     * <code>RESPONSE_USER_CREATE = 211;</code>
     */
    public static final int RESPONSE_USER_CREATE_VALUE = 211;
    /**
     * <code>REQUEST_USER_GET = 212;</code>
     */
    public static final int REQUEST_USER_GET_VALUE = 212;
    /**
     * <code>RESPONSE_USER_GET = 213;</code>
     */
    public static final int RESPONSE_USER_GET_VALUE = 213;
    /**
     * <code>REQUEST_USER_DELETE = 214;</code>
     */
    public static final int REQUEST_USER_DELETE_VALUE = 214;
    /**
     * <code>RESPONSE_USER_DELETE = 215;</code>
     */
    public static final int RESPONSE_USER_DELETE_VALUE = 215;
    /**
     * <code>REQUEST_USER_LIST = 216;</code>
     */
    public static final int REQUEST_USER_LIST_VALUE = 216;
    /**
     * <code>RESPONSE_USER_LIST = 217;</code>
     */
    public static final int RESPONSE_USER_LIST_VALUE = 217;
    /**
     * <code>REQUEST_USER_PASSWD_SET = 218;</code>
     */
    public static final int REQUEST_USER_PASSWD_SET_VALUE = 218;
    /**
     * <code>RESPONSE_USER_PASSWD_SET = 219;</code>
     */
    public static final int RESPONSE_USER_PASSWD_SET_VALUE = 219;
    /**
     * <code>REQUEST_USER_PASSWD_DELETE = 220;</code>
     */
    public static final int REQUEST_USER_PASSWD_DELETE_VALUE = 220;
    /**
     * <code>RESPONSE_USER_PASSWD_DELETE = 221;</code>
     */
    public static final int RESPONSE_USER_PASSWD_DELETE_VALUE = 221;
    /**
     * <code>REQUEST_USER_METADATA_SET = 222;</code>
     */
    public static final int REQUEST_USER_METADATA_SET_VALUE = 222;
    /**
     * <code>RESPONSE_USER_METADATA_SET = 223;</code>
     */
    public static final int RESPONSE_USER_METADATA_SET_VALUE = 223;
    /**
     * <code>REQUEST_USER_METADATA_GET = 224;</code>
     */
    public static final int REQUEST_USER_METADATA_GET_VALUE = 224;
    /**
     * <code>RESPONSE_USER_METADATA_GET = 225;</code>
     *
     * <pre>
     * === End User Commands === 
     * </pre>
     */
    public static final int RESPONSE_USER_METADATA_GET_VALUE = 225;
    /**
     * <code>REQUEST_BUCKET_CREATE = 226;</code>
     *
     * <pre>
     * === Begin Bucket Commands === 
     * </pre>
     */
    public static final int REQUEST_BUCKET_CREATE_VALUE = 226;
    /**
     * <code>RESPONSE_BUCKET_CREATE = 227;</code>
     */
    public static final int RESPONSE_BUCKET_CREATE_VALUE = 227;
    /**
     * <code>REQUEST_BUCKET_GET = 228;</code>
     */
    public static final int REQUEST_BUCKET_GET_VALUE = 228;
    /**
     * <code>RESPONSE_BUCKET_GET = 229;</code>
     */
    public static final int RESPONSE_BUCKET_GET_VALUE = 229;
    /**
     * <code>REQUEST_BUCKET_DELETE = 230;</code>
     */
    public static final int REQUEST_BUCKET_DELETE_VALUE = 230;
    /**
     * <code>RESPONSE_BUCKET_DELETE = 231;</code>
     */
    public static final int RESPONSE_BUCKET_DELETE_VALUE = 231;
    /**
     * <code>REQUEST_BUCKET_UPDATE = 232;</code>
     */
    public static final int REQUEST_BUCKET_UPDATE_VALUE = 232;
    /**
     * <code>RESPONSE_BUCKET_UPDATE = 233;</code>
     */
    public static final int RESPONSE_BUCKET_UPDATE_VALUE = 233;
    /**
     * <code>REQUEST_BUCKET_LIST = 234;</code>
     */
    public static final int REQUEST_BUCKET_LIST_VALUE = 234;
    /**
     * <code>RESPONSE_BUCKET_LIST = 235;</code>
     */
    public static final int RESPONSE_BUCKET_LIST_VALUE = 235;
    /**
     * <code>REQUEST_BUCKET_SET_ACL = 236;</code>
     */
    public static final int REQUEST_BUCKET_SET_ACL_VALUE = 236;
    /**
     * <code>RESPONSE_BUCKET_SET_ACL = 237;</code>
     */
    public static final int RESPONSE_BUCKET_SET_ACL_VALUE = 237;
    /**
     * <code>REQUEST_BUCKET_GET_ACL = 238;</code>
     */
    public static final int REQUEST_BUCKET_GET_ACL_VALUE = 238;
    /**
     * <code>RESPONSE_BUCKET_GET_ACL = 239;</code>
     */
    public static final int RESPONSE_BUCKET_GET_ACL_VALUE = 239;
    /**
     * <code>REQUEST_BUCKET_CHANGE_OWNER = 240;</code>
     */
    public static final int REQUEST_BUCKET_CHANGE_OWNER_VALUE = 240;
    /**
     * <code>RESPONSE_BUCKET_CHANGE_OWNER = 241;</code>
     */
    public static final int RESPONSE_BUCKET_CHANGE_OWNER_VALUE = 241;
    /**
     * <code>REQUEST_BUCKET_SET_CORS_CONF = 242;</code>
     */
    public static final int REQUEST_BUCKET_SET_CORS_CONF_VALUE = 242;
    /**
     * <code>RESPONSE_BUCKET_SET_CORS_CONF = 243;</code>
     */
    public static final int RESPONSE_BUCKET_SET_CORS_CONF_VALUE = 243;
    /**
     * <code>REQUEST_BUCKET_SET_EXPIRATION_POLICY = 244;</code>
     */
    public static final int REQUEST_BUCKET_SET_EXPIRATION_POLICY_VALUE = 244;
    /**
     * <code>RESPONSE_BUCKET_SET_EXPIRATION_POLICY = 245;</code>
     */
    public static final int RESPONSE_BUCKET_SET_EXPIRATION_POLICY_VALUE = 245;
    /**
     * <code>REQUEST_BUCKET_SET_VERSIONING = 246;</code>
     */
    public static final int REQUEST_BUCKET_SET_VERSIONING_VALUE = 246;
    /**
     * <code>RESPONSE_BUCKET_SET_VERSIONING = 247;</code>
     */
    public static final int RESPONSE_BUCKET_SET_VERSIONING_VALUE = 247;
    /**
     * <code>REQUEST_BUCKET_DELETE_CORS_CONF = 248;</code>
     */
    public static final int REQUEST_BUCKET_DELETE_CORS_CONF_VALUE = 248;
    /**
     * <code>RESPONSE_BUCKET_DELETE_CORS_CONF = 249;</code>
     */
    public static final int RESPONSE_BUCKET_DELETE_CORS_CONF_VALUE = 249;
    /**
     * <code>REQUEST_BUCKET_DELETE_EXPIRATION_POLICY = 250;</code>
     */
    public static final int REQUEST_BUCKET_DELETE_EXPIRATION_POLICY_VALUE = 250;
    /**
     * <code>RESPONSE_BUCKET_DELETE_EXPIRATION_POLICY = 251;</code>
     */
    public static final int RESPONSE_BUCKET_DELETE_EXPIRATION_POLICY_VALUE = 251;
    /**
     * <code>REQUEST_BUCKET_SET_VERSIONING_SOURCE = 252;</code>
     */
    public static final int REQUEST_BUCKET_SET_VERSIONING_SOURCE_VALUE = 252;
    /**
     * <code>RESPONSE_BUCKET_SET_VERSIONING_SOURCE = 253;</code>
     */
    public static final int RESPONSE_BUCKET_SET_VERSIONING_SOURCE_VALUE = 253;
    /**
     * <code>REQUEST_BUCKET_SET_METADATA = 254;</code>
     */
    public static final int REQUEST_BUCKET_SET_METADATA_VALUE = 254;
    /**
     * <code>RESPONSE_BUCKET_SET_METADATA = 255;</code>
     */
    public static final int RESPONSE_BUCKET_SET_METADATA_VALUE = 255;
    /**
     * <code>REQUEST_BUCKET_GET_METADATA = 256;</code>
     */
    public static final int REQUEST_BUCKET_GET_METADATA_VALUE = 256;
    /**
     * <code>RESPONSE_BUCKET_GET_METADATA = 257;</code>
     */
    public static final int RESPONSE_BUCKET_GET_METADATA_VALUE = 257;
    /**
     * <code>REQUEST_BUCKET_SET_HEAD_METADATA = 258;</code>
     */
    public static final int REQUEST_BUCKET_SET_HEAD_METADATA_VALUE = 258;
    /**
     * <code>RESPONSE_BUCKET_SET_HEAD_METADATA = 259;</code>
     */
    public static final int RESPONSE_BUCKET_SET_HEAD_METADATA_VALUE = 259;
    /**
     * <code>REQUEST_BUCKET_GET_HEAD_METADATA = 260;</code>
     */
    public static final int REQUEST_BUCKET_GET_HEAD_METADATA_VALUE = 260;
    /**
     * <code>RESPONSE_BUCKET_GET_HEAD_METADATA = 261;</code>
     */
    public static final int RESPONSE_BUCKET_GET_HEAD_METADATA_VALUE = 261;
    /**
     * <code>REQUEST_DEVICE_INFO_UPDATE = 262;</code>
     */
    public static final int REQUEST_DEVICE_INFO_UPDATE_VALUE = 262;
    /**
     * <code>RESPONSE_DEVICE_INFO_UPDATE = 263;</code>
     */
    public static final int RESPONSE_DEVICE_INFO_UPDATE_VALUE = 263;
    /**
     * <code>REQUEST_RG_CREATE = 264;</code>
     *
     * <pre>
     * === Begin Replication Group Commands === 
     * </pre>
     */
    public static final int REQUEST_RG_CREATE_VALUE = 264;
    /**
     * <code>RESPONSE_RG_CREATE = 265;</code>
     */
    public static final int RESPONSE_RG_CREATE_VALUE = 265;
    /**
     * <code>REQUEST_RG_UPDATE = 266;</code>
     */
    public static final int REQUEST_RG_UPDATE_VALUE = 266;
    /**
     * <code>RESPONSE_RG_UPDATE = 267;</code>
     */
    public static final int RESPONSE_RG_UPDATE_VALUE = 267;
    /**
     * <code>REQUEST_RG_DELETE = 268;</code>
     */
    public static final int REQUEST_RG_DELETE_VALUE = 268;
    /**
     * <code>RESPONSE_RG_DELETE = 269;</code>
     */
    public static final int RESPONSE_RG_DELETE_VALUE = 269;
    /**
     * <code>REQUEST_RG_LIST = 270;</code>
     */
    public static final int REQUEST_RG_LIST_VALUE = 270;
    /**
     * <code>RESPONSE_RG_LIST = 271;</code>
     */
    public static final int RESPONSE_RG_LIST_VALUE = 271;
    /**
     * <code>REQUEST_RG_GET = 272;</code>
     */
    public static final int REQUEST_RG_GET_VALUE = 272;
    /**
     * <code>RESPONSE_RG_GET = 273;</code>
     */
    public static final int RESPONSE_RG_GET_VALUE = 273;
    /**
     * <code>REQUEST_RG_GET_UPDATE = 274;</code>
     */
    public static final int REQUEST_RG_GET_UPDATE_VALUE = 274;
    /**
     * <code>RESPONSE_RG_GET_UPDATE = 275;</code>
     */
    public static final int RESPONSE_RG_GET_UPDATE_VALUE = 275;
    /**
     * <code>REQUEST_RG_UPD_UPDATE = 276;</code>
     */
    public static final int REQUEST_RG_UPD_UPDATE_VALUE = 276;
    /**
     * <code>RESPONSE_RG_UPD_UPDATE = 277;</code>
     */
    public static final int RESPONSE_RG_UPD_UPDATE_VALUE = 277;
    /**
     * <code>REQUEST_RG_DEL_UPDATE = 278;</code>
     */
    public static final int REQUEST_RG_DEL_UPDATE_VALUE = 278;
    /**
     * <code>RESPONSE_RG_DEL_UPDATE = 279;</code>
     */
    public static final int RESPONSE_RG_DEL_UPDATE_VALUE = 279;
    /**
     * <code>REQUEST_RG_LIST_UPDATE = 280;</code>
     */
    public static final int REQUEST_RG_LIST_UPDATE_VALUE = 280;
    /**
     * <code>RESPONSE_RG_LIST_UPDATE = 281;</code>
     */
    public static final int RESPONSE_RG_LIST_UPDATE_VALUE = 281;
    /**
     * <code>REQUEST_RG_KEY_LIST_UPDATE = 282;</code>
     */
    public static final int REQUEST_RG_KEY_LIST_UPDATE_VALUE = 282;
    /**
     * <code>RESPONSE_RG_KEY_LIST_UPDATE = 283;</code>
     */
    public static final int RESPONSE_RG_KEY_LIST_UPDATE_VALUE = 283;
    /**
     * <code>REQUEST_RG_ZONE_ADD = 284;</code>
     */
    public static final int REQUEST_RG_ZONE_ADD_VALUE = 284;
    /**
     * <code>RESPONSE_RG_ZONE_ADD = 285;</code>
     */
    public static final int RESPONSE_RG_ZONE_ADD_VALUE = 285;
    /**
     * <code>REQUEST_RG_ZONE_DEL = 286;</code>
     */
    public static final int REQUEST_RG_ZONE_DEL_VALUE = 286;
    /**
     * <code>RESPONSE_RG_ZONE_DEL = 287;</code>
     *
     * <pre>
     * === End Replication Group Commands === 
     * </pre>
     */
    public static final int RESPONSE_RG_ZONE_DEL_VALUE = 287;
    /**
     * <code>REQUEST_START_DT_DELETION = 288;</code>
     */
    public static final int REQUEST_START_DT_DELETION_VALUE = 288;
    /**
     * <code>RESPONSE_START_DT_DELETION = 289;</code>
     */
    public static final int RESPONSE_START_DT_DELETION_VALUE = 289;
    /**
     * <code>REQUEST_DATASTORE_DELETION = 290;</code>
     */
    public static final int REQUEST_DATASTORE_DELETION_VALUE = 290;
    /**
     * <code>RESPONSE_DATASTORE_DELETION = 291;</code>
     */
    public static final int RESPONSE_DATASTORE_DELETION_VALUE = 291;
    /**
     * <code>REQUEST_GET_GC_PROGRESS = 292;</code>
     */
    public static final int REQUEST_GET_GC_PROGRESS_VALUE = 292;
    /**
     * <code>RESPONSE_GET_GC_PROGRESS = 293;</code>
     */
    public static final int RESPONSE_GET_GC_PROGRESS_VALUE = 293;
    /**
     * <code>REQUEST_GET_OB_CC_MARKER = 294;</code>
     */
    public static final int REQUEST_GET_OB_CC_MARKER_VALUE = 294;
    /**
     * <code>RESPONSE_GET_OB_CC_MARKER = 295;</code>
     */
    public static final int RESPONSE_GET_OB_CC_MARKER_VALUE = 295;
    /**
     * <code>REQUEST_CONFIG_USER_SCOPE_GET = 296;</code>
     *
     * <pre>
     * === Begin Config Commands === 
     * </pre>
     */
    public static final int REQUEST_CONFIG_USER_SCOPE_GET_VALUE = 296;
    /**
     * <code>RESPONSE_CONFIG_USER_SCOPE_GET = 297;</code>
     */
    public static final int RESPONSE_CONFIG_USER_SCOPE_GET_VALUE = 297;
    /**
     * <code>REQUEST_CONFIG_USER_SCOPE_SET = 298;</code>
     */
    public static final int REQUEST_CONFIG_USER_SCOPE_SET_VALUE = 298;
    /**
     * <code>RESPONSE_CONFIG_USER_SCOPE_SET = 299;</code>
     */
    public static final int RESPONSE_CONFIG_USER_SCOPE_SET_VALUE = 299;
    /**
     * <code>REQUEST_CONFIG_HAS_USER_SET = 300;</code>
     */
    public static final int REQUEST_CONFIG_HAS_USER_SET_VALUE = 300;
    /**
     * <code>RESPONSE_CONFIG_HAS_USER_SET = 301;</code>
     *
     * <pre>
     * === End Config Commands === 
     * </pre>
     */
    public static final int RESPONSE_CONFIG_HAS_USER_SET_VALUE = 301;
    /**
     * <code>REQUEST_GET_FLOOR_ENTRY = 302;</code>
     */
    public static final int REQUEST_GET_FLOOR_ENTRY_VALUE = 302;
    /**
     * <code>RESPONSE_GET_FLOOR_ENTRY = 303;</code>
     */
    public static final int RESPONSE_GET_FLOOR_ENTRY_VALUE = 303;
    /**
     * <code>REQUEST_SET_CHUNK_STATUS = 304;</code>
     */
    public static final int REQUEST_SET_CHUNK_STATUS_VALUE = 304;
    /**
     * <code>RESPONSE_SET_CHUNK_STATUS = 305;</code>
     */
    public static final int RESPONSE_SET_CHUNK_STATUS_VALUE = 305;
    /**
     * <code>REQUEST_GET_CT_PROGRESS_COUNTER = 306;</code>
     */
    public static final int REQUEST_GET_CT_PROGRESS_COUNTER_VALUE = 306;
    /**
     * <code>RESPONSE_GET_CT_PROGRESS_COUNTER = 307;</code>
     */
    public static final int RESPONSE_GET_CT_PROGRESS_COUNTER_VALUE = 307;
    /**
     * <code>REQUEST_PAXOS_ELECT = 308;</code>
     *
     * <pre>
     * ideally would be nice to have these moved with other PAXOS variables
     * </pre>
     */
    public static final int REQUEST_PAXOS_ELECT_VALUE = 308;
    /**
     * <code>RESPONSE_PAXOS_ELECT = 309;</code>
     */
    public static final int RESPONSE_PAXOS_ELECT_VALUE = 309;
    /**
     * <code>REQUEST_PAXOS_INITIATE_ABORT = 310;</code>
     *
     * <pre>
     * ideally would be nice to have these moved with other PAXOS variables
     * </pre>
     */
    public static final int REQUEST_PAXOS_INITIATE_ABORT_VALUE = 310;
    /**
     * <code>RESPONSE_PAXOS_INITIATE_ABORT = 311;</code>
     */
    public static final int RESPONSE_PAXOS_INITIATE_ABORT_VALUE = 311;
    /**
     * <code>REQUEST_UPDATE_OBJECT_ACL = 312;</code>
     */
    public static final int REQUEST_UPDATE_OBJECT_ACL_VALUE = 312;
    /**
     * <code>RESPONSE_UPDATE_OBJECT_ACL = 313;</code>
     */
    public static final int RESPONSE_UPDATE_OBJECT_ACL_VALUE = 313;
    /**
     * <code>REQUEST_NODE_MODE = 314;</code>
     *
     * <pre>
     * === Begin node mode handling commands === 
     * </pre>
     */
    public static final int REQUEST_NODE_MODE_VALUE = 314;
    /**
     * <code>RESPONSE_NODE_MODE = 315;</code>
     */
    public static final int RESPONSE_NODE_MODE_VALUE = 315;
    /**
     * <code>REQUEST_PREPARE_FOR_MAINTENANCE = 316;</code>
     */
    public static final int REQUEST_PREPARE_FOR_MAINTENANCE_VALUE = 316;
    /**
     * <code>RESPONSE_PREPARE_FOR_MAINTENANCE = 317;</code>
     *
     * <pre>
     * === Begin node mode handling commands === 
     * </pre>
     */
    public static final int RESPONSE_PREPARE_FOR_MAINTENANCE_VALUE = 317;
    /**
     * <code>REQUEST_BTREE_PRINT = 318;</code>
     */
    public static final int REQUEST_BTREE_PRINT_VALUE = 318;
    /**
     * <code>RESPONSE_BTREE_PRINT = 319;</code>
     */
    public static final int RESPONSE_BTREE_PRINT_VALUE = 319;
    /**
     * <code>REQUEST_RESOURCE_EXPANDABLE = 320;</code>
     */
    public static final int REQUEST_RESOURCE_EXPANDABLE_VALUE = 320;
    /**
     * <code>RESPONSE_RESOURCE_EXPANDABLE = 321;</code>
     *
     * <pre>
     * 322-325 not used
     * </pre>
     */
    public static final int RESPONSE_RESOURCE_EXPANDABLE_VALUE = 321;
    /**
     * <code>REQUEST_UPDATE_PARENT_DIR = 326;</code>
     */
    public static final int REQUEST_UPDATE_PARENT_DIR_VALUE = 326;
    /**
     * <code>RESPONSE_UPDATE_PARENT_DIR = 327;</code>
     */
    public static final int RESPONSE_UPDATE_PARENT_DIR_VALUE = 327;
    /**
     * <code>REQUEST_BUCKET_BILLING_INFO = 328;</code>
     *
     * <pre>
     * === Metering commands  === 
     * </pre>
     */
    public static final int REQUEST_BUCKET_BILLING_INFO_VALUE = 328;
    /**
     * <code>RESPONSE_BUCKET_BILLING_INFO = 329;</code>
     */
    public static final int RESPONSE_BUCKET_BILLING_INFO_VALUE = 329;
    /**
     * <code>REQUEST_BUCKET_BILLING_SAMPLE = 330;</code>
     */
    public static final int REQUEST_BUCKET_BILLING_SAMPLE_VALUE = 330;
    /**
     * <code>RESPONSE_BUCKET_BILLING_SAMPLE = 331;</code>
     */
    public static final int RESPONSE_BUCKET_BILLING_SAMPLE_VALUE = 331;
    /**
     * <code>REQUEST_NAMESPACE_BILLING_INFO = 332;</code>
     */
    public static final int REQUEST_NAMESPACE_BILLING_INFO_VALUE = 332;
    /**
     * <code>RESPONSE_NAMESPACE_BILLING_INFO = 333;</code>
     */
    public static final int RESPONSE_NAMESPACE_BILLING_INFO_VALUE = 333;
    /**
     * <code>REQUEST_NAMESPACE_BILLING_SAMPLE = 334;</code>
     */
    public static final int REQUEST_NAMESPACE_BILLING_SAMPLE_VALUE = 334;
    /**
     * <code>RESPONSE_NAMESPACE_BILLING_SAMPLE = 335;</code>
     */
    public static final int RESPONSE_NAMESPACE_BILLING_SAMPLE_VALUE = 335;
    /**
     * <code>REQUEST_INSERT_POSIVITIVE_ON_DISK_DELTA = 336;</code>
     */
    public static final int REQUEST_INSERT_POSIVITIVE_ON_DISK_DELTA_VALUE = 336;
    /**
     * <code>RESPONSE_INSERT_POSIVITIVE_ON_DISK_DELTA = 337;</code>
     */
    public static final int RESPONSE_INSERT_POSIVITIVE_ON_DISK_DELTA_VALUE = 337;
    /**
     * <code>REQUEST_INSERT_NEGATIIVE_ON_DISK_DELTA = 338;</code>
     */
    public static final int REQUEST_INSERT_NEGATIIVE_ON_DISK_DELTA_VALUE = 338;
    /**
     * <code>RESPONSE_INSERT_NEGATIIVE_ON_DISK_DELTA = 339;</code>
     */
    public static final int RESPONSE_INSERT_NEGATIIVE_ON_DISK_DELTA_VALUE = 339;
    /**
     * <code>REQUEST_INSERT_BANDWIDTH_DATA = 340;</code>
     */
    public static final int REQUEST_INSERT_BANDWIDTH_DATA_VALUE = 340;
    /**
     * <code>RESPONSE_INSERT_BANDWIDTH_DATA = 341;</code>
     */
    public static final int RESPONSE_INSERT_BANDWIDTH_DATA_VALUE = 341;
    /**
     * <code>REQUEST_BUCKET_SET_LOCK = 342;</code>
     */
    public static final int REQUEST_BUCKET_SET_LOCK_VALUE = 342;
    /**
     * <code>RESPONSE_BUCKET_SET_LOCK = 343;</code>
     */
    public static final int RESPONSE_BUCKET_SET_LOCK_VALUE = 343;
    /**
     * <code>REQUEST_SET_USER_LOCK = 344;</code>
     */
    public static final int REQUEST_SET_USER_LOCK_VALUE = 344;
    /**
     * <code>RESPONSE_SET_USER_LOCK = 345;</code>
     */
    public static final int RESPONSE_SET_USER_LOCK_VALUE = 345;
    /**
     * <code>REQUEST_INSERT_OBMETERCOLLECTOR_BTREE_MARKER = 346;</code>
     */
    public static final int REQUEST_INSERT_OBMETERCOLLECTOR_BTREE_MARKER_VALUE = 346;
    /**
     * <code>RESPONSE_INSERT_OBMETERCOLLECTOR_BTREE_MARKER = 347;</code>
     */
    public static final int RESPONSE_INSERT_OBMETERCOLLECTOR_BTREE_MARKER_VALUE = 347;
    /**
     * <code>REQUEST_REMOVE_OBMETERCOLLECTOR_BTREE_MARKER = 348;</code>
     */
    public static final int REQUEST_REMOVE_OBMETERCOLLECTOR_BTREE_MARKER_VALUE = 348;
    /**
     * <code>RESPONSE_REMOVE_OBMETERCOLLECTOR_BTREE_MARKER = 349;</code>
     */
    public static final int RESPONSE_REMOVE_OBMETERCOLLECTOR_BTREE_MARKER_VALUE = 349;
    /**
     * <code>REQUEST_SET_BUCKET_QUOTA = 350;</code>
     */
    public static final int REQUEST_SET_BUCKET_QUOTA_VALUE = 350;
    /**
     * <code>RESPONSE_SET_BUCKET_QUOTA = 351;</code>
     */
    public static final int RESPONSE_SET_BUCKET_QUOTA_VALUE = 351;
    /**
     * <code>REQUEST_SET_NAMESPACE_SOFT_QUOTA = 352;</code>
     */
    public static final int REQUEST_SET_NAMESPACE_SOFT_QUOTA_VALUE = 352;
    /**
     * <code>RESPONSE_SET_NAMESPACE_SOFT_QUOTA = 353;</code>
     */
    public static final int RESPONSE_SET_NAMESPACE_SOFT_QUOTA_VALUE = 353;
    /**
     * <code>REQUEST_LIST_CHUNK_GC_SCAN_TASKS = 354;</code>
     */
    public static final int REQUEST_LIST_CHUNK_GC_SCAN_TASKS_VALUE = 354;
    /**
     * <code>RESPONSE_LIST_CHUNK_GC_SCAN_TASKS = 355;</code>
     */
    public static final int RESPONSE_LIST_CHUNK_GC_SCAN_TASKS_VALUE = 355;
    /**
     * <code>REQUEST_BLOCK_ASSIGNMENT_CONFIRM = 356;</code>
     */
    public static final int REQUEST_BLOCK_ASSIGNMENT_CONFIRM_VALUE = 356;
    /**
     * <code>RESPONSE_BLOCK_ASSIGNMENT_CONFIRM = 357;</code>
     */
    public static final int RESPONSE_BLOCK_ASSIGNMENT_CONFIRM_VALUE = 357;
    /**
     * <code>REQUEST_GET_DT_STATS = 358;</code>
     */
    public static final int REQUEST_GET_DT_STATS_VALUE = 358;
    /**
     * <code>RESPONSE_GET_DT_STATS = 359;</code>
     */
    public static final int RESPONSE_GET_DT_STATS_VALUE = 359;
    /**
     * <code>REQUEST_GET_DT_CHUNK_CREATION_STATS = 360;</code>
     */
    public static final int REQUEST_GET_DT_CHUNK_CREATION_STATS_VALUE = 360;
    /**
     * <code>RESPONSE_GET_DT_CHUNK_CREATION_STATS = 361;</code>
     */
    public static final int RESPONSE_GET_DT_CHUNK_CREATION_STATS_VALUE = 361;
    /**
     * <code>REQUEST_UPDATE_VNEST_CONFIG = 362;</code>
     */
    public static final int REQUEST_UPDATE_VNEST_CONFIG_VALUE = 362;
    /**
     * <code>RESPONSE_UPDATE_VNEST_CONFIG = 363;</code>
     */
    public static final int RESPONSE_UPDATE_VNEST_CONFIG_VALUE = 363;
    /**
     * <code>REQUEST_GET_DATANODES = 364;</code>
     */
    public static final int REQUEST_GET_DATANODES_VALUE = 364;
    /**
     * <code>RESPONSE_GET_DATANODES = 365;</code>
     */
    public static final int RESPONSE_GET_DATANODES_VALUE = 365;
    /**
     * <code>REQUEST_GET_GROUPMEMBERSHIP = 366;</code>
     */
    public static final int REQUEST_GET_GROUPMEMBERSHIP_VALUE = 366;
    /**
     * <code>RESPONSE_GET_GROUPMEMBERSHIP = 367;</code>
     */
    public static final int RESPONSE_GET_GROUPMEMBERSHIP_VALUE = 367;
    /**
     * <code>REQUEST_GROUPMEMBER_BOOTSTRAP = 368;</code>
     */
    public static final int REQUEST_GROUPMEMBER_BOOTSTRAP_VALUE = 368;
    /**
     * <code>RESPONSE_GROUPMEMBER_BOOTSTRAP = 369;</code>
     */
    public static final int RESPONSE_GROUPMEMBER_BOOTSTRAP_VALUE = 369;
    /**
     * <code>REQUEST_GROUPMEMBER_PRE_BOOTSTRAP = 370;</code>
     */
    public static final int REQUEST_GROUPMEMBER_PRE_BOOTSTRAP_VALUE = 370;
    /**
     * <code>RESPONSE_GROUPMEMBER_PRE_BOOTSTRAP = 371;</code>
     */
    public static final int RESPONSE_GROUPMEMBER_PRE_BOOTSTRAP_VALUE = 371;
    /**
     * <code>REQUEST_UNSEALED_GEO_START_COPY = 372;</code>
     *
     * <pre>
     * === Begin unsealed geo commands === 
     * </pre>
     */
    public static final int REQUEST_UNSEALED_GEO_START_COPY_VALUE = 372;
    /**
     * <code>RESPONSE_UNSEALED_GEO_START_COPY = 373;</code>
     */
    public static final int RESPONSE_UNSEALED_GEO_START_COPY_VALUE = 373;
    /**
     * <code>REQUEST_UNSEALED_GEO_COMMIT_COPY = 374;</code>
     */
    public static final int REQUEST_UNSEALED_GEO_COMMIT_COPY_VALUE = 374;
    /**
     * <code>RESPONSE_UNSEALED_GEO_COMMIT_COPY = 375;</code>
     */
    public static final int RESPONSE_UNSEALED_GEO_COMMIT_COPY_VALUE = 375;
    /**
     * <code>REQUEST_UNSEALED_GEO_HEARTBEAT = 376;</code>
     */
    public static final int REQUEST_UNSEALED_GEO_HEARTBEAT_VALUE = 376;
    /**
     * <code>RESPONSE_UNSEALED_GEO_HEARTBEAT = 377;</code>
     */
    public static final int RESPONSE_UNSEALED_GEO_HEARTBEAT_VALUE = 377;
    /**
     * <code>REQUEST_UNSEALED_GEO_COMMIT_COPY_RANGE = 378;</code>
     */
    public static final int REQUEST_UNSEALED_GEO_COMMIT_COPY_RANGE_VALUE = 378;
    /**
     * <code>RESPONSE_UNSEALED_GEO_COMMIT_COPY_RANGE = 379;</code>
     */
    public static final int RESPONSE_UNSEALED_GEO_COMMIT_COPY_RANGE_VALUE = 379;
    /**
     * <code>REQUEST_UPDATE_CHUNK_SECONDARY = 380;</code>
     */
    public static final int REQUEST_UPDATE_CHUNK_SECONDARY_VALUE = 380;
    /**
     * <code>RESPONSE_UPDATE_CHUNK_SECONDARY = 381;</code>
     */
    public static final int RESPONSE_UPDATE_CHUNK_SECONDARY_VALUE = 381;
    /**
     * <code>REQUEST_GET_OBJECT_OWNER_HISTORY = 382;</code>
     *
     * <pre>
     * object ownership history commands
     * </pre>
     */
    public static final int REQUEST_GET_OBJECT_OWNER_HISTORY_VALUE = 382;
    /**
     * <code>RESPONSE_GET_OBJECT_OWNER_HISTORY = 383;</code>
     */
    public static final int RESPONSE_GET_OBJECT_OWNER_HISTORY_VALUE = 383;
    /**
     * <code>REQUEST_CREATE_OBJECT_OWNER_HISTORY = 384;</code>
     */
    public static final int REQUEST_CREATE_OBJECT_OWNER_HISTORY_VALUE = 384;
    /**
     * <code>RESPONSE_CREATE_OBJECT_OWNER_HISTORY = 385;</code>
     */
    public static final int RESPONSE_CREATE_OBJECT_OWNER_HISTORY_VALUE = 385;
    /**
     * <code>REQUEST_APPEND_TO_OBJECT_OWNER_HISTORY = 386;</code>
     */
    public static final int REQUEST_APPEND_TO_OBJECT_OWNER_HISTORY_VALUE = 386;
    /**
     * <code>RESPONSE_APPEND_TO_OBJECT_OWNER_HISTORY = 387;</code>
     */
    public static final int RESPONSE_APPEND_TO_OBJECT_OWNER_HISTORY_VALUE = 387;
    /**
     * <code>REQUEST_GRAB_OBJECT_OWNERSHIP = 388;</code>
     */
    public static final int REQUEST_GRAB_OBJECT_OWNERSHIP_VALUE = 388;
    /**
     * <code>RESPONSE_GRAB_OBJECT_OWNERSHIP = 389;</code>
     */
    public static final int RESPONSE_GRAB_OBJECT_OWNERSHIP_VALUE = 389;
    /**
     * <code>REQUEST_UPDATE_DATANODES = 390;</code>
     *
     * <pre>
     * vnest add/remove data nodes
     * </pre>
     */
    public static final int REQUEST_UPDATE_DATANODES_VALUE = 390;
    /**
     * <code>RESPONSE_UPDATE_DATANODES = 391;</code>
     */
    public static final int RESPONSE_UPDATE_DATANODES_VALUE = 391;
    /**
     * <code>REQUEST_GET_DATANODE_INFO = 392;</code>
     */
    public static final int REQUEST_GET_DATANODE_INFO_VALUE = 392;
    /**
     * <code>RESPONSE_GET_DATANODE_INFO = 393;</code>
     */
    public static final int RESPONSE_GET_DATANODE_INFO_VALUE = 393;
    /**
     * <code>REQUEST_BUCKET_QUERY = 394;</code>
     *
     * <pre>
     * === Begin Additional Bucket Commands 
     * </pre>
     */
    public static final int REQUEST_BUCKET_QUERY_VALUE = 394;
    /**
     * <code>RESPONSE_BUCKET_QUERY = 395;</code>
     *
     * <pre>
     * === End Additional Bucket Commands 
     * </pre>
     */
    public static final int RESPONSE_BUCKET_QUERY_VALUE = 395;
    /**
     * <code>REQUEST_TEMP_FAILED_ZONE_GET = 396;</code>
     */
    public static final int REQUEST_TEMP_FAILED_ZONE_GET_VALUE = 396;
    /**
     * <code>RESPONSE_TEMP_FAILED_ZONE_GET = 397;</code>
     */
    public static final int RESPONSE_TEMP_FAILED_ZONE_GET_VALUE = 397;
    /**
     * <code>REQUEST_TEMP_FAILED_ZONE_SET = 398;</code>
     */
    public static final int REQUEST_TEMP_FAILED_ZONE_SET_VALUE = 398;
    /**
     * <code>RESPONSE_TEMP_FAILED_ZONE_SET = 399;</code>
     */
    public static final int RESPONSE_TEMP_FAILED_ZONE_SET_VALUE = 399;
    /**
     * <code>REQUEST_TEMP_FAILED_ZONE_UNSET = 400;</code>
     */
    public static final int REQUEST_TEMP_FAILED_ZONE_UNSET_VALUE = 400;
    /**
     * <code>RESPONSE_TEMP_FAILED_ZONE_UNSET = 401;</code>
     */
    public static final int RESPONSE_TEMP_FAILED_ZONE_UNSET_VALUE = 401;
    /**
     * <code>REQUEST_TEMP_FAILED_ZONE_CHANGE_STATUS = 402;</code>
     */
    public static final int REQUEST_TEMP_FAILED_ZONE_CHANGE_STATUS_VALUE = 402;
    /**
     * <code>RESPONSE_TEMP_FAILED_ZONE_CHANGE_STATUS = 403;</code>
     */
    public static final int RESPONSE_TEMP_FAILED_ZONE_CHANGE_STATUS_VALUE = 403;
    /**
     * <code>REQUEST_GET_BTREE_INIT_STATS = 404;</code>
     */
    public static final int REQUEST_GET_BTREE_INIT_STATS_VALUE = 404;
    /**
     * <code>RESPONSE_GET_BTREE_INIT_STATS = 405;</code>
     */
    public static final int RESPONSE_GET_BTREE_INIT_STATS_VALUE = 405;
    /**
     * <code>REQUEST_UPDATE_ZK_ENSEMBLE = 406;</code>
     */
    public static final int REQUEST_UPDATE_ZK_ENSEMBLE_VALUE = 406;
    /**
     * <code>RESPONSE_UPDATE_ZK_ENSEMBLE = 407;</code>
     */
    public static final int RESPONSE_UPDATE_ZK_ENSEMBLE_VALUE = 407;
    /**
     * <code>REQUEST_REMOTE_VARRAY_LIST = 408;</code>
     */
    public static final int REQUEST_REMOTE_VARRAY_LIST_VALUE = 408;
    /**
     * <code>RESPONSE_REMOTE_VARRAY_LIST = 409;</code>
     */
    public static final int RESPONSE_REMOTE_VARRAY_LIST_VALUE = 409;
    /**
     * <code>REQUEST_GET_REFERENCED_REPO_FROM_BTREE = 410;</code>
     */
    public static final int REQUEST_GET_REFERENCED_REPO_FROM_BTREE_VALUE = 410;
    /**
     * <code>RESPONSE_GET_REFERENCED_REPO_FROM_BTREE = 411;</code>
     */
    public static final int RESPONSE_GET_REFERENCED_REPO_FROM_BTREE_VALUE = 411;
    /**
     * <code>REQUEST_DELETE_OBJECT = 412;</code>
     */
    public static final int REQUEST_DELETE_OBJECT_VALUE = 412;
    /**
     * <code>RESPONSE_DELETE_OBJECT = 413;</code>
     */
    public static final int RESPONSE_DELETE_OBJECT_VALUE = 413;
    /**
     * <code>REQUEST_LIST_UPLOADS = 414;</code>
     */
    public static final int REQUEST_LIST_UPLOADS_VALUE = 414;
    /**
     * <code>RESPONSE_LIST_UPLOADS = 415;</code>
     */
    public static final int RESPONSE_LIST_UPLOADS_VALUE = 415;
    /**
     * <code>REQUEST_LIST_PARTS = 416;</code>
     */
    public static final int REQUEST_LIST_PARTS_VALUE = 416;
    /**
     * <code>RESPONSE_LIST_PARTS = 417;</code>
     */
    public static final int RESPONSE_LIST_PARTS_VALUE = 417;
    /**
     * <code>REQUEST_INSERT_MPULIST = 418;</code>
     */
    public static final int REQUEST_INSERT_MPULIST_VALUE = 418;
    /**
     * <code>RESPONSE_INSERT_MPULIST = 419;</code>
     */
    public static final int RESPONSE_INSERT_MPULIST_VALUE = 419;
    /**
     * <code>REQUEST_GET_REMOTE_ZONES = 420;</code>
     */
    public static final int REQUEST_GET_REMOTE_ZONES_VALUE = 420;
    /**
     * <code>RESPONSE_GET_REMOTE_ZONES = 421;</code>
     */
    public static final int RESPONSE_GET_REMOTE_ZONES_VALUE = 421;
    /**
     * <code>REQUEST_REJOIN_TASK_BATCH = 422;</code>
     */
    public static final int REQUEST_REJOIN_TASK_BATCH_VALUE = 422;
    /**
     * <code>RESPONSE_REJOIN_TASK_BATCH = 423;</code>
     */
    public static final int RESPONSE_REJOIN_TASK_BATCH_VALUE = 423;
    /**
     * <code>REQUEST_BUCKET_CHANGE_ISSTALEALLOWED = 424;</code>
     */
    public static final int REQUEST_BUCKET_CHANGE_ISSTALEALLOWED_VALUE = 424;
    /**
     * <code>RESPONSE_BUCKET_CHANGE_ISSTALEALLOWED = 425;</code>
     */
    public static final int RESPONSE_BUCKET_CHANGE_ISSTALEALLOWED_VALUE = 425;
    /**
     * <code>REQUEST_PUT_REBUILD_REFTABLE_TASK_MARKER = 426;</code>
     */
    public static final int REQUEST_PUT_REBUILD_REFTABLE_TASK_MARKER_VALUE = 426;
    /**
     * <code>RESPONSE_PUT_REBUILD_REFTABLE_TASK_MARKER = 427;</code>
     */
    public static final int RESPONSE_PUT_REBUILD_REFTABLE_TASK_MARKER_VALUE = 427;
    /**
     * <code>REQUEST_REBUILD_OBJECT_REFERENCES = 428;</code>
     */
    public static final int REQUEST_REBUILD_OBJECT_REFERENCES_VALUE = 428;
    /**
     * <code>RESPONSE_REBUILD_OBJECT_REFERENCES = 429;</code>
     */
    public static final int RESPONSE_REBUILD_OBJECT_REFERENCES_VALUE = 429;
    /**
     * <code>REQUEST_INSERT_ZONE_LEVEL_METERING_INFO = 430;</code>
     *
     * <pre>
     * == begin zone level metering commands == 
     * </pre>
     */
    public static final int REQUEST_INSERT_ZONE_LEVEL_METERING_INFO_VALUE = 430;
    /**
     * <code>RESPONSE_INSERT_ZONE_LEVEL_METERING_INFO = 431;</code>
     */
    public static final int RESPONSE_INSERT_ZONE_LEVEL_METERING_INFO_VALUE = 431;
    /**
     * <code>REQUEST_INSERT_ZONE_LEVEL_METERING_INFO_BULK = 432;</code>
     */
    public static final int REQUEST_INSERT_ZONE_LEVEL_METERING_INFO_BULK_VALUE = 432;
    /**
     * <code>RESPONSE_INSERT_ZONE_LEVEL_METERING_INFO_BULK = 433;</code>
     */
    public static final int RESPONSE_INSERT_ZONE_LEVEL_METERING_INFO_BULK_VALUE = 433;
    /**
     * <code>REQUEST_ZONE_LEVEL_METERING_INFO = 434;</code>
     */
    public static final int REQUEST_ZONE_LEVEL_METERING_INFO_VALUE = 434;
    /**
     * <code>RESPONSE_ZONE_LEVEL_METERING_INFO = 435;</code>
     *
     * <pre>
     * == end zone level metering commands == 
     * </pre>
     */
    public static final int RESPONSE_ZONE_LEVEL_METERING_INFO_VALUE = 435;
    /**
     * <code>REQUEST_INSERT_BUCKET_INTERMEDIATE = 436;</code>
     */
    public static final int REQUEST_INSERT_BUCKET_INTERMEDIATE_VALUE = 436;
    /**
     * <code>RESPONSE_INSERT_BUCKET_INTERMEDIATE = 437;</code>
     */
    public static final int RESPONSE_INSERT_BUCKET_INTERMEDIATE_VALUE = 437;
    /**
     * <code>REQUEST_INSERT_NAMESPACE_INTERMEDIATE = 438;</code>
     */
    public static final int REQUEST_INSERT_NAMESPACE_INTERMEDIATE_VALUE = 438;
    /**
     * <code>RESPONSE_INSERT_NAMESPACE_INTERMEDIATE = 439;</code>
     */
    public static final int RESPONSE_INSERT_NAMESPACE_INTERMEDIATE_VALUE = 439;
    /**
     * <code>REQUEST_INSERT_NODE_LEVEL_METERING_INFO = 440;</code>
     */
    public static final int REQUEST_INSERT_NODE_LEVEL_METERING_INFO_VALUE = 440;
    /**
     * <code>RESPONSE_INSERT_NODE_LEVEL_METERING_INFO = 441;</code>
     */
    public static final int RESPONSE_INSERT_NODE_LEVEL_METERING_INFO_VALUE = 441;
    /**
     * <code>REQUEST_NODE_LEVEL_METERING_INFO = 442;</code>
     */
    public static final int REQUEST_NODE_LEVEL_METERING_INFO_VALUE = 442;
    /**
     * <code>RESPONSE_NODE_LEVEL_METERING_INFO = 443;</code>
     */
    public static final int RESPONSE_NODE_LEVEL_METERING_INFO_VALUE = 443;
    /**
     * <code>REQUEST_ALERT_CREATE = 444;</code>
     *
     * <pre>
     *===== Alert commands===
     * </pre>
     */
    public static final int REQUEST_ALERT_CREATE_VALUE = 444;
    /**
     * <code>RESPONSE_ALERT_CREATE = 445;</code>
     */
    public static final int RESPONSE_ALERT_CREATE_VALUE = 445;
    /**
     * <code>REQUEST_ALERT_GET = 446;</code>
     */
    public static final int REQUEST_ALERT_GET_VALUE = 446;
    /**
     * <code>RESPONSE_ALERT_GET = 447;</code>
     */
    public static final int RESPONSE_ALERT_GET_VALUE = 447;
    /**
     * <code>REQUEST_ALERT_LIST = 448;</code>
     */
    public static final int REQUEST_ALERT_LIST_VALUE = 448;
    /**
     * <code>RESPONSE_ALERT_LIST = 449;</code>
     *
     * <pre>
     *===== end Alert commands====
     * </pre>
     */
    public static final int RESPONSE_ALERT_LIST_VALUE = 449;
    /**
     * <code>REQUEST_AUDIT_CREATE = 450;</code>
     *
     * <pre>
     *===== Audit commands===
     * </pre>
     */
    public static final int REQUEST_AUDIT_CREATE_VALUE = 450;
    /**
     * <code>RESPONSE_AUDIT_CREATE = 451;</code>
     */
    public static final int RESPONSE_AUDIT_CREATE_VALUE = 451;
    /**
     * <code>REQUEST_AUDIT_GET = 452;</code>
     */
    public static final int REQUEST_AUDIT_GET_VALUE = 452;
    /**
     * <code>RESPONSE_AUDIT_GET = 453;</code>
     */
    public static final int RESPONSE_AUDIT_GET_VALUE = 453;
    /**
     * <code>REQUEST_AUDIT_LIST = 454;</code>
     */
    public static final int REQUEST_AUDIT_LIST_VALUE = 454;
    /**
     * <code>RESPONSE_AUDIT_LIST = 455;</code>
     *
     * <pre>
     *===== end Audit commands====
     * </pre>
     */
    public static final int RESPONSE_AUDIT_LIST_VALUE = 455;
    /**
     * <code>REQUEST_PAXOS_LIST = 456;</code>
     *
     * <pre>
     * Paxos bulk list request
     * </pre>
     */
    public static final int REQUEST_PAXOS_LIST_VALUE = 456;
    /**
     * <code>RESPONSE_PAXOS_LIST = 457;</code>
     */
    public static final int RESPONSE_PAXOS_LIST_VALUE = 457;
    /**
     * <code>REQUEST_GET_COMPACTION_STATE = 458;</code>
     *
     * <pre>
     * compaction state commands
     * </pre>
     */
    public static final int REQUEST_GET_COMPACTION_STATE_VALUE = 458;
    /**
     * <code>RESPONSE_GET_COMPACTION_STATE = 459;</code>
     */
    public static final int RESPONSE_GET_COMPACTION_STATE_VALUE = 459;
    /**
     * <code>REQUEST_INSERT_ENTRY_IF_ABSENT = 460;</code>
     */
    public static final int REQUEST_INSERT_ENTRY_IF_ABSENT_VALUE = 460;
    /**
     * <code>RESPONSE_INSERT_ENTRY_IF_ABSENT = 461;</code>
     */
    public static final int RESPONSE_INSERT_ENTRY_IF_ABSENT_VALUE = 461;
    /**
     * <code>REQUEST_SET_BUCKET_HARD_QUOTA = 462;</code>
     */
    public static final int REQUEST_SET_BUCKET_HARD_QUOTA_VALUE = 462;
    /**
     * <code>RESPONSE_SET_BUCKET_HARD_QUOTA = 463;</code>
     */
    public static final int RESPONSE_SET_BUCKET_HARD_QUOTA_VALUE = 463;
    /**
     * <code>REQUEST_ERCA_HEARTBEAT = 464;</code>
     */
    public static final int REQUEST_ERCA_HEARTBEAT_VALUE = 464;
    /**
     * <code>RESPONSE_ERCA_HEARTBEAT = 465;</code>
     */
    public static final int RESPONSE_ERCA_HEARTBEAT_VALUE = 465;
    /**
     * <code>REQUEST_CLIENT_EC_COMPLETE = 466;</code>
     */
    public static final int REQUEST_CLIENT_EC_COMPLETE_VALUE = 466;
    /**
     * <code>RESPONSE_CLIENT_EC_COMPLETE = 467;</code>
     */
    public static final int RESPONSE_CLIENT_EC_COMPLETE_VALUE = 467;
    /**
     * <code>REQUEST_GET_REMOTE_FILE_VERSION = 470;</code>
     */
    public static final int REQUEST_GET_REMOTE_FILE_VERSION_VALUE = 470;
    /**
     * <code>RESPONSE_GET_REMOTE_FILE_VERSION = 471;</code>
     */
    public static final int RESPONSE_GET_REMOTE_FILE_VERSION_VALUE = 471;
    /**
     * <code>REQUEST_GET_REMOTE_FILE_VOLATILE_IMAGE = 472;</code>
     */
    public static final int REQUEST_GET_REMOTE_FILE_VOLATILE_IMAGE_VALUE = 472;
    /**
     * <code>RESPONSE_GET_REMOTE_FILE_VOLATILE_IMAGE = 473;</code>
     */
    public static final int RESPONSE_GET_REMOTE_FILE_VOLATILE_IMAGE_VALUE = 473;
    /**
     * <code>REQUEST_PAXOS_BULK_QUERY = 474;</code>
     *
     * <pre>
     * Paxos bulk query and delete request
     * </pre>
     */
    public static final int REQUEST_PAXOS_BULK_QUERY_VALUE = 474;
    /**
     * <code>RESPONSE_PAXOS_BULK_QUERY = 475;</code>
     */
    public static final int RESPONSE_PAXOS_BULK_QUERY_VALUE = 475;
    /**
     * <code>REQUEST_PAXOS_DELETE = 476;</code>
     */
    public static final int REQUEST_PAXOS_DELETE_VALUE = 476;
    /**
     * <code>RESPONSE_PAXOS_DELETE = 477;</code>
     */
    public static final int RESPONSE_PAXOS_DELETE_VALUE = 477;
    /**
     * <code>REQUEST_PAXOS_DELETE_COMPLETE = 478;</code>
     */
    public static final int REQUEST_PAXOS_DELETE_COMPLETE_VALUE = 478;
    /**
     * <code>RESPONSE_PAXOS_DELETE_COMPLETE = 479;</code>
     */
    public static final int RESPONSE_PAXOS_DELETE_COMPLETE_VALUE = 479;
    /**
     * <code>REQUEST_CREATE_NFS_EXPORT_DEVICE = 480;</code>
     *
     * <pre>
     * === Commands for the NFS Export Datastore === 
     * </pre>
     */
    public static final int REQUEST_CREATE_NFS_EXPORT_DEVICE_VALUE = 480;
    /**
     * <code>RESPONSE_CREATE_NFS_EXPORT_DEVICE = 481;</code>
     */
    public static final int RESPONSE_CREATE_NFS_EXPORT_DEVICE_VALUE = 481;
    /**
     * <code>REQUEST_CREATE_NFS_EXPORT_DEVICE_TO_OWNER = 482;</code>
     */
    public static final int REQUEST_CREATE_NFS_EXPORT_DEVICE_TO_OWNER_VALUE = 482;
    /**
     * <code>RESPONSE_CREATE_NFS_EXPORT_DEVICE_FROM_OWNER = 483;</code>
     */
    public static final int RESPONSE_CREATE_NFS_EXPORT_DEVICE_FROM_OWNER_VALUE = 483;
    /**
     * <code>REQUEST_NAMESPACE_FOR_USER = 484;</code>
     *
     * <pre>
     * User namespace query
     * </pre>
     */
    public static final int REQUEST_NAMESPACE_FOR_USER_VALUE = 484;
    /**
     * <code>RESPONSE_NAMESPACE_FOR_USER = 485;</code>
     */
    public static final int RESPONSE_NAMESPACE_FOR_USER_VALUE = 485;
    /**
     * <code>REQUEST_WRITE_CURRENT_OBJECT_OWNER_FLAG = 486;</code>
     */
    public static final int REQUEST_WRITE_CURRENT_OBJECT_OWNER_FLAG_VALUE = 486;
    /**
     * <code>RESPONSE_WRITE_CURRENT_OBJECT_OWNER_FLAG = 487;</code>
     */
    public static final int RESPONSE_WRITE_CURRENT_OBJECT_OWNER_FLAG_VALUE = 487;
    /**
     * <code>REQUEST_OBJECT_ACL_QUERY = 488;</code>
     */
    public static final int REQUEST_OBJECT_ACL_QUERY_VALUE = 488;
    /**
     * <code>RESPONSE_OBJECT_ACL_QUERY = 489;</code>
     */
    public static final int RESPONSE_OBJECT_ACL_QUERY_VALUE = 489;
    /**
     * <code>REQUEST_CHECK_NODE = 490;</code>
     *
     * <pre>
     * vnest
     * </pre>
     */
    public static final int REQUEST_CHECK_NODE_VALUE = 490;
    /**
     * <code>RESPONSE_CHECK_NODE = 491;</code>
     */
    public static final int RESPONSE_CHECK_NODE_VALUE = 491;
    /**
     * <code>REQUEST_DT_MEMORY_USAGE = 492;</code>
     *
     * <pre>
     * DT memory
     * </pre>
     */
    public static final int REQUEST_DT_MEMORY_USAGE_VALUE = 492;
    /**
     * <code>RESPONSE_DT_MEMORY_USAGE = 493;</code>
     */
    public static final int RESPONSE_DT_MEMORY_USAGE_VALUE = 493;
    /**
     * <code>REQUEST_CONFIG_ENCKEY_GET = 494;</code>
     */
    public static final int REQUEST_CONFIG_ENCKEY_GET_VALUE = 494;
    /**
     * <code>RESPONSE_CONFIG_ENCKEY_GET = 495;</code>
     */
    public static final int RESPONSE_CONFIG_ENCKEY_GET_VALUE = 495;
    /**
     * <code>REQUEST_AUTHPROVIDER_CREATE = 496;</code>
     */
    public static final int REQUEST_AUTHPROVIDER_CREATE_VALUE = 496;
    /**
     * <code>RESPONSE_AUTHPROVIDER_CREATE = 497;</code>
     */
    public static final int RESPONSE_AUTHPROVIDER_CREATE_VALUE = 497;
    /**
     * <code>REQUEST_AUTHPROVIDER_GET = 498;</code>
     */
    public static final int REQUEST_AUTHPROVIDER_GET_VALUE = 498;
    /**
     * <code>RESPONSE_AUTHPROVIDER_GET = 499;</code>
     */
    public static final int RESPONSE_AUTHPROVIDER_GET_VALUE = 499;
    /**
     * <code>REQUEST_AUTHPROVIDER_UPDATE = 500;</code>
     */
    public static final int REQUEST_AUTHPROVIDER_UPDATE_VALUE = 500;
    /**
     * <code>RESPONSE_AUTHPROVIDER_UPDATE = 501;</code>
     */
    public static final int RESPONSE_AUTHPROVIDER_UPDATE_VALUE = 501;
    /**
     * <code>REQUEST_AUTHPROVIDER_DELETE = 502;</code>
     */
    public static final int REQUEST_AUTHPROVIDER_DELETE_VALUE = 502;
    /**
     * <code>RESPONSE_AUTHPROVIDER_DELETE = 503;</code>
     */
    public static final int RESPONSE_AUTHPROVIDER_DELETE_VALUE = 503;
    /**
     * <code>REQUEST_AUTHPROVIDER_LIST = 504;</code>
     */
    public static final int REQUEST_AUTHPROVIDER_LIST_VALUE = 504;
    /**
     * <code>RESPONSE_AUTHPROVIDER_LIST = 505;</code>
     */
    public static final int RESPONSE_AUTHPROVIDER_LIST_VALUE = 505;
    /**
     * <code>REQUEST_CHANGE_LOG_LEVEL = 506;</code>
     *
     * <pre>
     * log level
     * </pre>
     */
    public static final int REQUEST_CHANGE_LOG_LEVEL_VALUE = 506;
    /**
     * <code>RESPONSE_CHANGE_LOG_LEVEL = 507;</code>
     */
    public static final int RESPONSE_CHANGE_LOG_LEVEL_VALUE = 507;
    /**
     * <code>REQUEST_LATEST_ZONE_LEVEL_METERING_INFO = 508;</code>
     */
    public static final int REQUEST_LATEST_ZONE_LEVEL_METERING_INFO_VALUE = 508;
    /**
     * <code>RESPONSE_LATEST_ZONE_LEVEL_METERING_INFO = 509;</code>
     */
    public static final int RESPONSE_LATEST_ZONE_LEVEL_METERING_INFO_VALUE = 509;
    /**
     * <code>REQUEST_ZONE_LEVEL_METERING_INFOS = 510;</code>
     */
    public static final int REQUEST_ZONE_LEVEL_METERING_INFOS_VALUE = 510;
    /**
     * <code>RESPONSE_ZONE_LEVEL_METERING_INFOS = 511;</code>
     */
    public static final int RESPONSE_ZONE_LEVEL_METERING_INFOS_VALUE = 511;
    /**
     * <code>REQUEST_LATEST_NODE_LEVEL_METERING_INFO = 512;</code>
     */
    public static final int REQUEST_LATEST_NODE_LEVEL_METERING_INFO_VALUE = 512;
    /**
     * <code>RESPONSE_LATEST_NODE_LEVEL_METERING_INFO = 513;</code>
     */
    public static final int RESPONSE_LATEST_NODE_LEVEL_METERING_INFO_VALUE = 513;
    /**
     * <code>REQUEST_NODE_LEVEL_METERING_INFOS = 514;</code>
     */
    public static final int REQUEST_NODE_LEVEL_METERING_INFOS_VALUE = 514;
    /**
     * <code>RESPONSE_NODE_LEVEL_METERING_INFOS = 515;</code>
     */
    public static final int RESPONSE_NODE_LEVEL_METERING_INFOS_VALUE = 515;
    /**
     * <code>REQUEST_PAXOS_INSERT_TASK = 516;</code>
     */
    public static final int REQUEST_PAXOS_INSERT_TASK_VALUE = 516;
    /**
     * <code>RESPONSE_PAXOS_INSERT_TASK = 517;</code>
     */
    public static final int RESPONSE_PAXOS_INSERT_TASK_VALUE = 517;
    /**
     * <code>REQUEST_REBUILD_OBJECT_OWNER_HISTORY = 518;</code>
     *
     * <pre>
     *temp site outage
     * </pre>
     */
    public static final int REQUEST_REBUILD_OBJECT_OWNER_HISTORY_VALUE = 518;
    /**
     * <code>RESPONSE_REBUILD_OBJECT_OWNER_HISTORY = 519;</code>
     */
    public static final int RESPONSE_REBUILD_OBJECT_OWNER_HISTORY_VALUE = 519;
    /**
     * <code>REQUEST_ENABLE_NEST_DIAGNOSTIC = 520;</code>
     */
    public static final int REQUEST_ENABLE_NEST_DIAGNOSTIC_VALUE = 520;
    /**
     * <code>RESPONSE_ENABLE_NEST_DIAGNOSTIC = 521;</code>
     */
    public static final int RESPONSE_ENABLE_NEST_DIAGNOSTIC_VALUE = 521;
    /**
     * <code>REQUEST_XOR_DECODE_FOR_READ_CHUNK = 522;</code>
     *
     * <pre>
     * XOR Decode for READ
     * </pre>
     */
    public static final int REQUEST_XOR_DECODE_FOR_READ_CHUNK_VALUE = 522;
    /**
     * <code>RESPONSE_XOR_DECODE_FOR_READ_CHUNK = 523;</code>
     */
    public static final int RESPONSE_XOR_DECODE_FOR_READ_CHUNK_VALUE = 523;
    /**
     * <code>REQUEST_LIST_OBJECTS = 524;</code>
     */
    public static final int REQUEST_LIST_OBJECTS_VALUE = 524;
    /**
     * <code>RESPONSE_LIST_OBJECTS = 525;</code>
     */
    public static final int RESPONSE_LIST_OBJECTS_VALUE = 525;
    /**
     * <code>REQUEST_LIST_OBJECT_VERSIONS = 526;</code>
     */
    public static final int REQUEST_LIST_OBJECT_VERSIONS_VALUE = 526;
    /**
     * <code>RESPONSE_LIST_OBJECT_VERSIONS = 527;</code>
     */
    public static final int RESPONSE_LIST_OBJECT_VERSIONS_VALUE = 527;
    /**
     * <code>REQUEST_CACHE_INVALIDATE = 528;</code>
     *
     * <pre>
     * Invalidation Request
     * </pre>
     */
    public static final int REQUEST_CACHE_INVALIDATE_VALUE = 528;
    /**
     * <code>RESPONSE_CACHE_INVALIDATE = 529;</code>
     */
    public static final int RESPONSE_CACHE_INVALIDATE_VALUE = 529;
    /**
     * <code>REQUEST_FIND_MPU = 576;</code>
     *
     * <pre>
     * For MPU
     * </pre>
     */
    public static final int REQUEST_FIND_MPU_VALUE = 576;
    /**
     * <code>RESPONSE_FIND_MPU = 577;</code>
     */
    public static final int RESPONSE_FIND_MPU_VALUE = 577;
    /**
     * <code>REQUEST_GET_MPU_OWNERSHIP = 578;</code>
     */
    public static final int REQUEST_GET_MPU_OWNERSHIP_VALUE = 578;
    /**
     * <code>RESPONSE_GET_MPU_OWNERSHIP = 579;</code>
     */
    public static final int RESPONSE_GET_MPU_OWNERSHIP_VALUE = 579;
    /**
     * <code>REQUEST_RECYCLE_MPU_T_ENTRY = 580;</code>
     */
    public static final int REQUEST_RECYCLE_MPU_T_ENTRY_VALUE = 580;
    /**
     * <code>RESPONSE_RECYCLE_MPU_T_ENTRY = 581;</code>
     */
    public static final int RESPONSE_RECYCLE_MPU_T_ENTRY_VALUE = 581;
    /**
     * <code>REQUEST_DELETE_MPUSCANNER_MARKER_PROGRESS = 582;</code>
     */
    public static final int REQUEST_DELETE_MPUSCANNER_MARKER_PROGRESS_VALUE = 582;
    /**
     * <code>RESPONSE_DELETE_MPUSCANNER_MARKER_PROGRESS = 583;</code>
     */
    public static final int RESPONSE_DELETE_MPUSCANNER_MARKER_PROGRESS_VALUE = 583;
    /**
     * <code>REQUEST_LIST_ALL_UPLOADS = 584;</code>
     */
    public static final int REQUEST_LIST_ALL_UPLOADS_VALUE = 584;
    /**
     * <code>RESPONSE_LIST_ALL_UPLOADS = 585;</code>
     */
    public static final int RESPONSE_LIST_ALL_UPLOADS_VALUE = 585;
    /**
     * <code>REQUEST_UPDATE_REPO_USAGE = 586;</code>
     *
     * <pre>
     * RR DT
     * </pre>
     */
    public static final int REQUEST_UPDATE_REPO_USAGE_VALUE = 586;
    /**
     * <code>RESPONSE_UPDATE_REPO_USAGE = 587;</code>
     */
    public static final int RESPONSE_UPDATE_REPO_USAGE_VALUE = 587;
    /**
     * <code>REQUEST_INSERT_REMOTE_PARTIALGC_TASK = 588;</code>
     */
    public static final int REQUEST_INSERT_REMOTE_PARTIALGC_TASK_VALUE = 588;
    /**
     * <code>RESPONSE_INSERT_REMOTE_PARTIALGC_TASK = 589;</code>
     */
    public static final int RESPONSE_INSERT_REMOTE_PARTIALGC_TASK_VALUE = 589;
    /**
     * <code>REQUEST_INSERT_REMOTE_PARTIALGC_CONTEXT = 590;</code>
     */
    public static final int REQUEST_INSERT_REMOTE_PARTIALGC_CONTEXT_VALUE = 590;
    /**
     * <code>RESPONSE_INSERT_REMOTE_PARTIALGC_CONTEXT = 591;</code>
     */
    public static final int RESPONSE_INSERT_REMOTE_PARTIALGC_CONTEXT_VALUE = 591;
    /**
     * <code>REQUEST_UPDATE_OBJECT_FOR_PARTIALGC = 592;</code>
     *
     * <pre>
     * OB DT
     * </pre>
     */
    public static final int REQUEST_UPDATE_OBJECT_FOR_PARTIALGC_VALUE = 592;
    /**
     * <code>RESPONSE_UPDATE_OBJECT_FOR_PARTIALGC = 593;</code>
     */
    public static final int RESPONSE_UPDATE_OBJECT_FOR_PARTIALGC_VALUE = 593;
    /**
     * <code>REQUEST_ALERT_SET_ACK = 594;</code>
     *
     * <pre>
     *set alert acknowledgement command
     * </pre>
     */
    public static final int REQUEST_ALERT_SET_ACK_VALUE = 594;
    /**
     * <code>RESPONSE_ALERT_SET_ACK = 595;</code>
     */
    public static final int RESPONSE_ALERT_SET_ACK_VALUE = 595;
    /**
     * <code>REQUEST_GET_KEK = 596;</code>
     */
    public static final int REQUEST_GET_KEK_VALUE = 596;
    /**
     * <code>RESPONSE_GET_KEK = 597;</code>
     */
    public static final int RESPONSE_GET_KEK_VALUE = 597;
    /**
     * <code>REQUEST_SET_KEK = 598;</code>
     */
    public static final int REQUEST_SET_KEK_VALUE = 598;
    /**
     * <code>RESPONSE_SET_KEK = 599;</code>
     */
    public static final int RESPONSE_SET_KEK_VALUE = 599;
    /**
     * <code>REQUEST_GET_STAT = 600;</code>
     *
     * <pre>
     * don't move please
     * </pre>
     */
    public static final int REQUEST_GET_STAT_VALUE = 600;
    /**
     * <code>RESPONSE_GET_STAT = 601;</code>
     */
    public static final int RESPONSE_GET_STAT_VALUE = 601;
    /**
     * <code>REQUEST_PUSH_STAT = 602;</code>
     */
    public static final int REQUEST_PUSH_STAT_VALUE = 602;
    /**
     * <code>RESPONSE_PUSH_STAT = 603;</code>
     */
    public static final int RESPONSE_PUSH_STAT_VALUE = 603;
    /**
     * <code>REQUEST_GET_HISTORY = 604;</code>
     */
    public static final int REQUEST_GET_HISTORY_VALUE = 604;
    /**
     * <code>RESPONSE_GET_HISTORY = 605;</code>
     */
    public static final int RESPONSE_GET_HISTORY_VALUE = 605;
    /**
     * <code>REQUEST_STAT_UPDATE = 606;</code>
     */
    public static final int REQUEST_STAT_UPDATE_VALUE = 606;
    /**
     * <code>RESPONSE_STAT_UPDATE = 607;</code>
     */
    public static final int RESPONSE_STAT_UPDATE_VALUE = 607;
    /**
     * <code>REQUEST_BACKUP_STAT = 608;</code>
     *
     * <pre>
     * statistics backup
     * </pre>
     */
    public static final int REQUEST_BACKUP_STAT_VALUE = 608;
    /**
     * <code>RESPONSE_BACKUP_STAT = 609;</code>
     */
    public static final int RESPONSE_BACKUP_STAT_VALUE = 609;
    /**
     * <code>REQUEST_STAT_REMOVE = 610;</code>
     */
    public static final int REQUEST_STAT_REMOVE_VALUE = 610;
    /**
     * <code>RESPONSE_STAT_REMOVE = 611;</code>
     */
    public static final int RESPONSE_STAT_REMOVE_VALUE = 611;
    /**
     * <code>REQUEST_STAT_RESERVED_5 = 612;</code>
     */
    public static final int REQUEST_STAT_RESERVED_5_VALUE = 612;
    /**
     * <code>REQUEST_STAT_RESERVED_6 = 613;</code>
     */
    public static final int REQUEST_STAT_RESERVED_6_VALUE = 613;
    /**
     * <code>REQUEST_OVERTAKE_OWNER_FOR_FAILED_NODE = 614;</code>
     *
     * <pre>
     * Ownership Overtake for failed nodes request
     * </pre>
     */
    public static final int REQUEST_OVERTAKE_OWNER_FOR_FAILED_NODE_VALUE = 614;
    /**
     * <code>RESPONSE_OVERTAKE_OWNER_FOR_FAILED_NODE = 615;</code>
     */
    public static final int RESPONSE_OVERTAKE_OWNER_FOR_FAILED_NODE_VALUE = 615;
    /**
     * <code>REQUEST_SET_ACTIVEMASTERKEY_RECORD = 616;</code>
     */
    public static final int REQUEST_SET_ACTIVEMASTERKEY_RECORD_VALUE = 616;
    /**
     * <code>RESPONSE_SET_ACTIVEMASTERKEY_RECORD = 617;</code>
     */
    public static final int RESPONSE_SET_ACTIVEMASTERKEY_RECORD_VALUE = 617;
    /**
     * <code>REQUEST_SET_MASTERKEY_RECORD = 618;</code>
     */
    public static final int REQUEST_SET_MASTERKEY_RECORD_VALUE = 618;
    /**
     * <code>RESPONSE_SET_MASTERKEY_RECORD = 619;</code>
     */
    public static final int RESPONSE_SET_MASTERKEY_RECORD_VALUE = 619;
    /**
     * <code>REQUEST_GET_MASTERKEY_RECORD = 620;</code>
     */
    public static final int REQUEST_GET_MASTERKEY_RECORD_VALUE = 620;
    /**
     * <code>RESPONSE_GET_MASTERKEY_RECORD = 621;</code>
     */
    public static final int RESPONSE_GET_MASTERKEY_RECORD_VALUE = 621;
    /**
     * <code>REQUEST_CREATE_MASTERKEY_RECORD = 622;</code>
     */
    public static final int REQUEST_CREATE_MASTERKEY_RECORD_VALUE = 622;
    /**
     * <code>RESPONSE_CREATE_MASTERKEY_RECORD = 623;</code>
     */
    public static final int RESPONSE_CREATE_MASTERKEY_RECORD_VALUE = 623;
    /**
     * <code>REQUEST_PARTIALGC_CHECK_DELETING = 624;</code>
     */
    public static final int REQUEST_PARTIALGC_CHECK_DELETING_VALUE = 624;
    /**
     * <code>RESPONSE_PARTIALGC_CHECK_DELETING = 625;</code>
     */
    public static final int RESPONSE_PARTIALGC_CHECK_DELETING_VALUE = 625;
    /**
     * <code>REQUEST_SET_BUCKET_ACTIVE_KEY = 626;</code>
     */
    public static final int REQUEST_SET_BUCKET_ACTIVE_KEY_VALUE = 626;
    /**
     * <code>RESPONSE_SET_BUCKET_ACTIVE_KEY = 627;</code>
     */
    public static final int RESPONSE_SET_BUCKET_ACTIVE_KEY_VALUE = 627;
    /**
     * <code>REQUEST_SET_NAMESPACE_ACTIVE_KEY = 628;</code>
     */
    public static final int REQUEST_SET_NAMESPACE_ACTIVE_KEY_VALUE = 628;
    /**
     * <code>RESPONSE_SET_NAMESPACE_ACTIVE_KEY = 629;</code>
     */
    public static final int RESPONSE_SET_NAMESPACE_ACTIVE_KEY_VALUE = 629;
    /**
     * <code>REQUEST_GET_ACTIVEMASTERKEY_RECORD = 630;</code>
     */
    public static final int REQUEST_GET_ACTIVEMASTERKEY_RECORD_VALUE = 630;
    /**
     * <code>RESPONSE_GET_ACTIVEMASTERKEY_RECORD = 631;</code>
     */
    public static final int RESPONSE_GET_ACTIVEMASTERKEY_RECORD_VALUE = 631;
    /**
     * <code>REQUEST_ADD_GENERIC_METADATA = 632;</code>
     */
    public static final int REQUEST_ADD_GENERIC_METADATA_VALUE = 632;
    /**
     * <code>RESPONSE_ADD_GENERIC_METADATA = 633;</code>
     */
    public static final int RESPONSE_ADD_GENERIC_METADATA_VALUE = 633;
    /**
     * <code>REQUEST_UPDATE_GENERIC_METADATA = 634;</code>
     */
    public static final int REQUEST_UPDATE_GENERIC_METADATA_VALUE = 634;
    /**
     * <code>RESPONSE_UPDATE_GENERIC_METADATA = 635;</code>
     */
    public static final int RESPONSE_UPDATE_GENERIC_METADATA_VALUE = 635;
    /**
     * <code>REQUEST_DELETE_GENERIC_METADATA = 636;</code>
     */
    public static final int REQUEST_DELETE_GENERIC_METADATA_VALUE = 636;
    /**
     * <code>RESPONSE_DELETE_GENERIC_METADATA = 637;</code>
     */
    public static final int RESPONSE_DELETE_GENERIC_METADATA_VALUE = 637;
    /**
     * <code>REQUEST_CLEAR_BUCKET_LOCK = 638;</code>
     */
    public static final int REQUEST_CLEAR_BUCKET_LOCK_VALUE = 638;
    /**
     * <code>RESPONSE_CLEAR_BUCKET_LOCK = 639;</code>
     */
    public static final int RESPONSE_CLEAR_BUCKET_LOCK_VALUE = 639;
    /**
     * <code>REQUEST_FILEKEYVAL_CREATE = 644;</code>
     *
     * <pre>
     * === Begin filesvc Commands === 
     * </pre>
     */
    public static final int REQUEST_FILEKEYVAL_CREATE_VALUE = 644;
    /**
     * <code>RESPONSE_FILEKEYVAL_CREATE = 645;</code>
     */
    public static final int RESPONSE_FILEKEYVAL_CREATE_VALUE = 645;
    /**
     * <code>REQUEST_FILEKEYVAL_GET = 646;</code>
     */
    public static final int REQUEST_FILEKEYVAL_GET_VALUE = 646;
    /**
     * <code>RESPONSE_FILEKEYVAL_GET = 647;</code>
     */
    public static final int RESPONSE_FILEKEYVAL_GET_VALUE = 647;
    /**
     * <code>REQUEST_FILEKEYVAL_DELETE = 648;</code>
     */
    public static final int REQUEST_FILEKEYVAL_DELETE_VALUE = 648;
    /**
     * <code>RESPONSE_FILEKEYVAL_DELETE = 649;</code>
     */
    public static final int RESPONSE_FILEKEYVAL_DELETE_VALUE = 649;
    /**
     * <code>REQUEST_FILEKEYVAL_UPDATE = 650;</code>
     */
    public static final int REQUEST_FILEKEYVAL_UPDATE_VALUE = 650;
    /**
     * <code>RESPONSE_FILEKEYVAL_UPDATE = 651;</code>
     */
    public static final int RESPONSE_FILEKEYVAL_UPDATE_VALUE = 651;
    /**
     * <code>REQUEST_FILEKEYVAL_LIST = 652;</code>
     */
    public static final int REQUEST_FILEKEYVAL_LIST_VALUE = 652;
    /**
     * <code>RESPONSE_FILEKEYVAL_LIST = 653;</code>
     *
     * <pre>
     * === End filesvc Commands === 
     * </pre>
     */
    public static final int RESPONSE_FILEKEYVAL_LIST_VALUE = 653;
    /**
     * <code>REQUEST_START_PARTIALGC = 654;</code>
     *
     * <pre>
     * CT DT
     * </pre>
     */
    public static final int REQUEST_START_PARTIALGC_VALUE = 654;
    /**
     * <code>RESPONSE_START_PARTIALGC = 655;</code>
     */
    public static final int RESPONSE_START_PARTIALGC_VALUE = 655;
    /**
     * <code>REQUEST_FINISH_PARTIALGC = 656;</code>
     */
    public static final int REQUEST_FINISH_PARTIALGC_VALUE = 656;
    /**
     * <code>RESPONSE_FINISH_PARTIALGC = 657;</code>
     */
    public static final int RESPONSE_FINISH_PARTIALGC_VALUE = 657;
    /**
     * <code>REQUEST_PARTIALGC_CHUNK_REFRESH = 658;</code>
     */
    public static final int REQUEST_PARTIALGC_CHUNK_REFRESH_VALUE = 658;
    /**
     * <code>RESPONSE_PARTIALGC_CHUNK_REFRESH = 659;</code>
     */
    public static final int RESPONSE_PARTIALGC_CHUNK_REFRESH_VALUE = 659;
    /**
     * <code>REQUEST_CHUNK_SET_SECONDARY_REPLICATED = 660;</code>
     */
    public static final int REQUEST_CHUNK_SET_SECONDARY_REPLICATED_VALUE = 660;
    /**
     * <code>RESPONSE_CHUNK_SET_SECONDARY_REPLICATED = 661;</code>
     */
    public static final int RESPONSE_CHUNK_SET_SECONDARY_REPLICATED_VALUE = 661;
    /**
     * <code>REQUEST_BUCKET_SET_ISMETADATASEARCHENABLED = 662;</code>
     */
    public static final int REQUEST_BUCKET_SET_ISMETADATASEARCHENABLED_VALUE = 662;
    /**
     * <code>RESPONSE_BUCKET_SET_ISMETADATASEARCHENABLED = 663;</code>
     */
    public static final int RESPONSE_BUCKET_SET_ISMETADATASEARCHENABLED_VALUE = 663;
    /**
     * <code>REQUEST_INGEST_SYSTEM_UNDER_TRANSFORMATION_REPO_CHUNK = 664;</code>
     */
    public static final int REQUEST_INGEST_SYSTEM_UNDER_TRANSFORMATION_REPO_CHUNK_VALUE = 664;
    /**
     * <code>RESPONSE_INGEST_SYSTEM_UNDER_TRANSFORMATION_REPO_CHUNK = 665;</code>
     */
    public static final int RESPONSE_INGEST_SYSTEM_UNDER_TRANSFORMATION_REPO_CHUNK_VALUE = 665;
    /**
     * <code>REQUEST_NFS_LIST_FILE_LOCKS = 666;</code>
     */
    public static final int REQUEST_NFS_LIST_FILE_LOCKS_VALUE = 666;
    /**
     * <code>RESPONSE_NFS_LIST_FILE_LOCKS = 667;</code>
     */
    public static final int RESPONSE_NFS_LIST_FILE_LOCKS_VALUE = 667;
    /**
     * <code>REQUEST_NFS_CREATE_FILE_LOCK = 668;</code>
     */
    public static final int REQUEST_NFS_CREATE_FILE_LOCK_VALUE = 668;
    /**
     * <code>RESPONSE_NFS_CREATE_FILE_LOCK = 669;</code>
     */
    public static final int RESPONSE_NFS_CREATE_FILE_LOCK_VALUE = 669;
    /**
     * <code>REQUEST_NFS_LOOKUP_PATH_BY_OID = 670;</code>
     */
    public static final int REQUEST_NFS_LOOKUP_PATH_BY_OID_VALUE = 670;
    /**
     * <code>RESPONSE_NFS_LOOKUP_PATH_BY_OID = 671;</code>
     */
    public static final int RESPONSE_NFS_LOOKUP_PATH_BY_OID_VALUE = 671;
    /**
     * <code>REQUEST_DELETE_OBJECT_OWNER_HISTORY = 684;</code>
     */
    public static final int REQUEST_DELETE_OBJECT_OWNER_HISTORY_VALUE = 684;
    /**
     * <code>RESPONSE_DELETE_OBJECT_OWNER_HISTORY = 685;</code>
     */
    public static final int RESPONSE_DELETE_OBJECT_OWNER_HISTORY_VALUE = 685;
    /**
     * <code>REQUEST_TEMP_FAILED_ZONE_HISTORY_LIST = 686;</code>
     */
    public static final int REQUEST_TEMP_FAILED_ZONE_HISTORY_LIST_VALUE = 686;
    /**
     * <code>RESPONSE_TEMP_FAILED_ZONE_HISTORY_LIST = 687;</code>
     */
    public static final int RESPONSE_TEMP_FAILED_ZONE_HISTORY_LIST_VALUE = 687;
    /**
     * <code>REQUEST_BUCKET_LIST_LOCALLY = 688;</code>
     */
    public static final int REQUEST_BUCKET_LIST_LOCALLY_VALUE = 688;
    /**
     * <code>RESPONSE_BUCKET_LIST_LOCALLY = 689;</code>
     */
    public static final int RESPONSE_BUCKET_LIST_LOCALLY_VALUE = 689;
    /**
     * <code>REQUEST_GET_BTREE_ONHEAPCACHE_STATS = 690;</code>
     */
    public static final int REQUEST_GET_BTREE_ONHEAPCACHE_STATS_VALUE = 690;
    /**
     * <code>RESPONSE_GET_BTREE_ONHEAPCACHE_STATS = 691;</code>
     */
    public static final int RESPONSE_GET_BTREE_ONHEAPCACHE_STATS_VALUE = 691;
    /**
     * <code>REQUEST_CHUNK_EC_RESET = 706;</code>
     */
    public static final int REQUEST_CHUNK_EC_RESET_VALUE = 706;
    /**
     * <code>RESPONSE_CHUNK_EC_RESET = 707;</code>
     */
    public static final int RESPONSE_CHUNK_EC_RESET_VALUE = 707;
    /**
     * <code>REQUEST_CREATE_OBJECT_MI_ENTRY_BATCH = 708;</code>
     */
    public static final int REQUEST_CREATE_OBJECT_MI_ENTRY_BATCH_VALUE = 708;
    /**
     * <code>RESPONSE_CREATE_OBJECT_MI_ENTRY_BATCH = 709;</code>
     */
    public static final int RESPONSE_CREATE_OBJECT_MI_ENTRY_BATCH_VALUE = 709;
    /**
     * <code>REQUEST_CREATE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH = 710;</code>
     */
    public static final int REQUEST_CREATE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH_VALUE = 710;
    /**
     * <code>RESPONSE_CREATE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH = 711;</code>
     */
    public static final int RESPONSE_CREATE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH_VALUE = 711;
    /**
     * <code>REQUEST_REMOVE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH = 712;</code>
     */
    public static final int REQUEST_REMOVE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH_VALUE = 712;
    /**
     * <code>RESPONSE_REMOVE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH = 713;</code>
     */
    public static final int RESPONSE_REMOVE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH_VALUE = 713;
    /**
     * <code>REQUEST_SKIP_CHUNKS_FOR_PARTIALGC = 720;</code>
     */
    public static final int REQUEST_SKIP_CHUNKS_FOR_PARTIALGC_VALUE = 720;
    /**
     * <code>RESPONSE_SKIP_CHUNKS_FOR_PARTIALGC = 721;</code>
     */
    public static final int RESPONSE_SKIP_CHUNKS_FOR_PARTIALGC_VALUE = 721;
    /**
     * <code>REQUEST_CHUNK_FIND_VALID_DATA_LENGTH = 722;</code>
     */
    public static final int REQUEST_CHUNK_FIND_VALID_DATA_LENGTH_VALUE = 722;
    /**
     * <code>RESPONSE_CHUNK_FIND_VALID_DATA_LENGTH = 723;</code>
     */
    public static final int RESPONSE_CHUNK_FIND_VALID_DATA_LENGTH_VALUE = 723;
    /**
     * <code>REQUEST_UPDATE_BTREE_REFERENCE = 724;</code>
     */
    public static final int REQUEST_UPDATE_BTREE_REFERENCE_VALUE = 724;
    /**
     * <code>RESPONSE_UPDATE_BTREE_REFERENCE = 725;</code>
     */
    public static final int RESPONSE_UPDATE_BTREE_REFERENCE_VALUE = 725;
    /**
     * <code>REQUEST_SSM_PARTITION_COMMAND = 820;</code>
     *
     * <pre>
     * For SSM (reserved 820-899)
     * </pre>
     */
    public static final int REQUEST_SSM_PARTITION_COMMAND_VALUE = 820;
    /**
     * <code>RESPONSE_SSM_PARTITION_COMMAND = 821;</code>
     */
    public static final int RESPONSE_SSM_PARTITION_COMMAND_VALUE = 821;
    /**
     * <code>REQUEST_SSM_PROGRESS_COMMAND = 822;</code>
     */
    public static final int REQUEST_SSM_PROGRESS_COMMAND_VALUE = 822;
    /**
     * <code>RESPONSE_SSM_PROGRESS_COMMAND = 823;</code>
     */
    public static final int RESPONSE_SSM_PROGRESS_COMMAND_VALUE = 823;
    /**
     * <code>REQUEST_SSM_SPACECALCULATOR_COMMAND = 824;</code>
     */
    public static final int REQUEST_SSM_SPACECALCULATOR_COMMAND_VALUE = 824;
    /**
     * <code>RERPONSE_SSM_SPACECALCULATOR_COMMAND = 825;</code>
     */
    public static final int RERPONSE_SSM_SPACECALCULATOR_COMMAND_VALUE = 825;
    /**
     * <code>REQUEST_SSM_RECORD_COMMAND = 826;</code>
     */
    public static final int REQUEST_SSM_RECORD_COMMAND_VALUE = 826;
    /**
     * <code>RERPONSE_SSM_RECORD_COMMAND = 827;</code>
     */
    public static final int RERPONSE_SSM_RECORD_COMMAND_VALUE = 827;
    /**
     * <code>REQUEST_SSM_FULL_MERGE_COMMAND = 828;</code>
     */
    public static final int REQUEST_SSM_FULL_MERGE_COMMAND_VALUE = 828;
    /**
     * <code>RERPONSE_SSM_FULL_MERGE_COMMAND = 829;</code>
     */
    public static final int RERPONSE_SSM_FULL_MERGE_COMMAND_VALUE = 829;
    /**
     * <code>REQUEST_SSM_NOTIFICATION = 830;</code>
     */
    public static final int REQUEST_SSM_NOTIFICATION_VALUE = 830;
    /**
     * <code>RERPONSE_SSM_NOTIFICATION = 831;</code>
     */
    public static final int RERPONSE_SSM_NOTIFICATION_VALUE = 831;
    /**
     * <code>REQUEST_SSM_RESERVED = 898;</code>
     */
    public static final int REQUEST_SSM_RESERVED_VALUE = 898;
    /**
     * <code>RESPONSE_SSM_RESERVED = 899;</code>
     */
    public static final int RESPONSE_SSM_RESERVED_VALUE = 899;
    /**
     * <code>REQUEST_TRANSFORMATION = 900;</code>
     *
     * <pre>
     * === Transformation commands === 
     * </pre>
     */
    public static final int REQUEST_TRANSFORMATION_VALUE = 900;
    /**
     * <code>RESPONSE_TRANSFORMATION = 901;</code>
     */
    public static final int RESPONSE_TRANSFORMATION_VALUE = 901;
    /**
     * <code>REQUEST_GIVE_OUT_OWNERSHIP = 910;</code>
     *
     * <pre>
     * For Ownership
     * </pre>
     */
    public static final int REQUEST_GIVE_OUT_OWNERSHIP_VALUE = 910;
    /**
     * <code>RESPONSE_GIVE_OUT_OWNERSHIP = 911;</code>
     */
    public static final int RESPONSE_GIVE_OUT_OWNERSHIP_VALUE = 911;
    /**
     * <code>REQUEST_CHECK_RECLAIMABLE = 914;</code>
     *
     * <pre>
     * For Metering
     * </pre>
     */
    public static final int REQUEST_CHECK_RECLAIMABLE_VALUE = 914;
    /**
     * <code>RESPONSE_CHECK_RECLAIMABLE = 915;</code>
     */
    public static final int RESPONSE_CHECK_RECLAIMABLE_VALUE = 915;
    /**
     * <code>REQUEST_RR_OPERATIONS = 916;</code>
     */
    public static final int REQUEST_RR_OPERATIONS_VALUE = 916;
    /**
     * <code>RESPONSE_RR_OPERATIONS = 917;</code>
     */
    public static final int RESPONSE_RR_OPERATIONS_VALUE = 917;
    /**
     * <code>REQUEST_INSERT_REMOTE_REGION_IN_BATCH = 950;</code>
     */
    public static final int REQUEST_INSERT_REMOTE_REGION_IN_BATCH_VALUE = 950;
    /**
     * <code>RESPONSE_INSERT_REMOTE_REGION_IN_BATCH = 951;</code>
     */
    public static final int RESPONSE_INSERT_REMOTE_REGION_IN_BATCH_VALUE = 951;
    /**
     * <code>REQUEST_GET_CHUNK_GC_SCAN_TASK_VALUES = 970;</code>
     */
    public static final int REQUEST_GET_CHUNK_GC_SCAN_TASK_VALUES_VALUE = 970;
    /**
     * <code>RESPONSE_GET_CHUNK_GC_SCAN_TASK_VALUES = 971;</code>
     */
    public static final int RESPONSE_GET_CHUNK_GC_SCAN_TASK_VALUES_VALUE = 971;
    /**
     * <code>REQUEST_NFSDIR_CREATE = 1000;</code>
     */
    public static final int REQUEST_NFSDIR_CREATE_VALUE = 1000;
    /**
     * <code>RESPONSE_NFSDIR_CREATE = 1001;</code>
     */
    public static final int RESPONSE_NFSDIR_CREATE_VALUE = 1001;
    /**
     * <code>REQUEST_NFSSYMLINK_CREATE = 1002;</code>
     */
    public static final int REQUEST_NFSSYMLINK_CREATE_VALUE = 1002;
    /**
     * <code>RESPONSE_NFSSYMLINK_CREATE = 1003;</code>
     */
    public static final int RESPONSE_NFSSYMLINK_CREATE_VALUE = 1003;
    /**
     * <code>REQUEST_NFSDIR_DELETE = 1004;</code>
     */
    public static final int REQUEST_NFSDIR_DELETE_VALUE = 1004;
    /**
     * <code>RESPONSE_NFSDIR_DELETE = 1005;</code>
     */
    public static final int RESPONSE_NFSDIR_DELETE_VALUE = 1005;
    /**
     * <code>REQUEST_NFSFILE_DELETE = 1006;</code>
     */
    public static final int REQUEST_NFSFILE_DELETE_VALUE = 1006;
    /**
     * <code>RESPONSE_NFSFILE_DELETE = 1007;</code>
     */
    public static final int RESPONSE_NFSFILE_DELETE_VALUE = 1007;
    /**
     * <code>REQUEST_NFSSYMLINK_DELETE = 1008;</code>
     */
    public static final int REQUEST_NFSSYMLINK_DELETE_VALUE = 1008;
    /**
     * <code>RESPONSE_NFSSYMLINK_DELETE = 1009;</code>
     */
    public static final int RESPONSE_NFSSYMLINK_DELETE_VALUE = 1009;
    /**
     * <code>REQUEST_NFS_GET_OID_AND_OWNERZONE = 1010;</code>
     */
    public static final int REQUEST_NFS_GET_OID_AND_OWNERZONE_VALUE = 1010;
    /**
     * <code>RESPONSE_NFS_GET_OID_AND_OWNERZONE = 1011;</code>
     */
    public static final int RESPONSE_NFS_GET_OID_AND_OWNERZONE_VALUE = 1011;
    /**
     * <code>REQUEST_NFS_LOOKUP = 1012;</code>
     */
    public static final int REQUEST_NFS_LOOKUP_VALUE = 1012;
    /**
     * <code>RESPONSE_NFS_LOOKUP = 1013;</code>
     */
    public static final int RESPONSE_NFS_LOOKUP_VALUE = 1013;
    /**
     * <code>REQUEST_NFSOBJECT_COPY = 1014;</code>
     */
    public static final int REQUEST_NFSOBJECT_COPY_VALUE = 1014;
    /**
     * <code>RESPONSE_NFSOBJECT_COPY = 1015;</code>
     */
    public static final int RESPONSE_NFSOBJECT_COPY_VALUE = 1015;
    /**
     * <code>REQUEST_NFSFILE_TRUNCATE = 1016;</code>
     */
    public static final int REQUEST_NFSFILE_TRUNCATE_VALUE = 1016;
    /**
     * <code>RESPONSE_NFSFILE_TRUNCATE = 1017;</code>
     */
    public static final int RESPONSE_NFSFILE_TRUNCATE_VALUE = 1017;
    /**
     * <code>REQUEST_NFS_ABORT_MULTIPART_UPLOAD = 1018;</code>
     */
    public static final int REQUEST_NFS_ABORT_MULTIPART_UPLOAD_VALUE = 1018;
    /**
     * <code>RESPONSE_NFS_ABORT_MULTIPART_UPLOAD = 1019;</code>
     */
    public static final int RESPONSE_NFS_ABORT_MULTIPART_UPLOAD_VALUE = 1019;
    /**
     * <code>REQUEST_NFS_LIST_PARTS = 1020;</code>
     */
    public static final int REQUEST_NFS_LIST_PARTS_VALUE = 1020;
    /**
     * <code>RESPONSE_NFS_LIST_PARTS = 1021;</code>
     */
    public static final int RESPONSE_NFS_LIST_PARTS_VALUE = 1021;
    /**
     * <code>REQUEST_NFS_GET_RETENTION = 1022;</code>
     */
    public static final int REQUEST_NFS_GET_RETENTION_VALUE = 1022;
    /**
     * <code>RESPONSE_NFS_GET_RETENTION = 1023;</code>
     */
    public static final int RESPONSE_NFS_GET_RETENTION_VALUE = 1023;
    /**
     * <code>REQUEST_NFS_SET_RETENTION = 1024;</code>
     */
    public static final int REQUEST_NFS_SET_RETENTION_VALUE = 1024;
    /**
     * <code>RESPONSE_NFS_SET_RETENTION = 1025;</code>
     */
    public static final int RESPONSE_NFS_SET_RETENTION_VALUE = 1025;
    /**
     * <code>REQUEST_NFS_GET_ACL = 1026;</code>
     */
    public static final int REQUEST_NFS_GET_ACL_VALUE = 1026;
    /**
     * <code>RESPONSE_NFS_GET_ACL = 1027;</code>
     */
    public static final int RESPONSE_NFS_GET_ACL_VALUE = 1027;
    /**
     * <code>REQUEST_NFS_SET_ACL = 1028;</code>
     */
    public static final int REQUEST_NFS_SET_ACL_VALUE = 1028;
    /**
     * <code>RESPONSE_NFS_SET_ACL = 1029;</code>
     */
    public static final int RESPONSE_NFS_SET_ACL_VALUE = 1029;
    /**
     * <code>REQUEST_NFS_DELETE_UMD = 1030;</code>
     */
    public static final int REQUEST_NFS_DELETE_UMD_VALUE = 1030;
    /**
     * <code>RESPONSE_NFS_DELETE_UMD = 1031;</code>
     */
    public static final int RESPONSE_NFS_DELETE_UMD_VALUE = 1031;
    /**
     * <code>REQUEST_NFS_DELETE_HEAD_SMD = 1032;</code>
     */
    public static final int REQUEST_NFS_DELETE_HEAD_SMD_VALUE = 1032;
    /**
     * <code>RESPONSE_NFS_DELETE_HEAD_SMD = 1033;</code>
     */
    public static final int RESPONSE_NFS_DELETE_HEAD_SMD_VALUE = 1033;
    /**
     * <code>REQUEST_NFS_SET_UMD = 1034;</code>
     */
    public static final int REQUEST_NFS_SET_UMD_VALUE = 1034;
    /**
     * <code>RESPONSE_NFS_SET_UMD = 1035;</code>
     */
    public static final int RESPONSE_NFS_SET_UMD_VALUE = 1035;
    /**
     * <code>REQUEST_NFS_SET_SMD = 1036;</code>
     */
    public static final int REQUEST_NFS_SET_SMD_VALUE = 1036;
    /**
     * <code>RESPONSE_NFS_SET_SMD = 1037;</code>
     */
    public static final int RESPONSE_NFS_SET_SMD_VALUE = 1037;
    /**
     * <code>REQUEST_NFS_GET_SMD = 1038;</code>
     */
    public static final int REQUEST_NFS_GET_SMD_VALUE = 1038;
    /**
     * <code>RESPONSE_NFS_GET_SMD = 1039;</code>
     */
    public static final int RESPONSE_NFS_GET_SMD_VALUE = 1039;
    /**
     * <code>REQUEST_NFS_GET_ALL_SMD = 1040;</code>
     */
    public static final int REQUEST_NFS_GET_ALL_SMD_VALUE = 1040;
    /**
     * <code>RESPONSE_NFS_GET_ALL_SMD = 1041;</code>
     */
    public static final int RESPONSE_NFS_GET_ALL_SMD_VALUE = 1041;
    /**
     * <code>REQUEST_NFS_GET_UMD = 1042;</code>
     */
    public static final int REQUEST_NFS_GET_UMD_VALUE = 1042;
    /**
     * <code>RESPONSE_NFS_GET_UMD = 1043;</code>
     */
    public static final int RESPONSE_NFS_GET_UMD_VALUE = 1043;
    /**
     * <code>REQUEST_NFS_GET_ALL_UMD = 1044;</code>
     */
    public static final int REQUEST_NFS_GET_ALL_UMD_VALUE = 1044;
    /**
     * <code>RESPONSE_NFS_GET_ALL_UMD = 1045;</code>
     */
    public static final int RESPONSE_NFS_GET_ALL_UMD_VALUE = 1045;
    /**
     * <code>REQUEST_NFSDIR_LIST = 1046;</code>
     */
    public static final int REQUEST_NFSDIR_LIST_VALUE = 1046;
    /**
     * <code>RESPONSE_NFSDIR_LIST = 1047;</code>
     */
    public static final int RESPONSE_NFSDIR_LIST_VALUE = 1047;
    /**
     * <code>REQUEST_NFSOBJECT_RENAME = 1048;</code>
     */
    public static final int REQUEST_NFSOBJECT_RENAME_VALUE = 1048;
    /**
     * <code>RESPONSE_NFSOBJECT_RENAME = 1049;</code>
     */
    public static final int RESPONSE_NFSOBJECT_RENAME_VALUE = 1049;
    /**
     * <code>REQUEST_NFSSYMLINK_GET_SMD = 1050;</code>
     */
    public static final int REQUEST_NFSSYMLINK_GET_SMD_VALUE = 1050;
    /**
     * <code>RESPONSE_NFSSYMLINK_GET_SMD = 1051;</code>
     */
    public static final int RESPONSE_NFSSYMLINK_GET_SMD_VALUE = 1051;
    /**
     * <code>REQUEST_NFSFILE_CREATE = 1052;</code>
     */
    public static final int REQUEST_NFSFILE_CREATE_VALUE = 1052;
    /**
     * <code>RESPONSE_NFSFILE_CREATE = 1053;</code>
     */
    public static final int RESPONSE_NFSFILE_CREATE_VALUE = 1053;
    /**
     * <code>REQUEST_FILEKEYVAL_GETANDINC = 1054;</code>
     *
     * <pre>
     * AutoIncrement for FileKeyVal RT - Filesvc
     * </pre>
     */
    public static final int REQUEST_FILEKEYVAL_GETANDINC_VALUE = 1054;
    /**
     * <code>RESPONSE_FILEKEYVAL_GETANDINC = 1055;</code>
     */
    public static final int RESPONSE_FILEKEYVAL_GETANDINC_VALUE = 1055;
    /**
     * <code>REQUEST_NFS_GET_ALL_SMD_AND_UMD = 1056;</code>
     */
    public static final int REQUEST_NFS_GET_ALL_SMD_AND_UMD_VALUE = 1056;
    /**
     * <code>RESPONSE_NFS_GET_ALL_SMD_AND_UMD = 1057;</code>
     */
    public static final int RESPONSE_NFS_GET_ALL_SMD_AND_UMD_VALUE = 1057;
    /**
     * <code>REQUEST_NFS_REPLICATION_INFO = 1058;</code>
     */
    public static final int REQUEST_NFS_REPLICATION_INFO_VALUE = 1058;
    /**
     * <code>RESPONSE_NFS_REPLICATION_INFO = 1059;</code>
     */
    public static final int RESPONSE_NFS_REPLICATION_INFO_VALUE = 1059;
    /**
     * <code>REQUEST_MI_QUERY = 1060;</code>
     *
     * <pre>
     *Metadata index search
     * </pre>
     */
    public static final int REQUEST_MI_QUERY_VALUE = 1060;
    /**
     * <code>RESPONSE_MI_QUERY = 1061;</code>
     */
    public static final int RESPONSE_MI_QUERY_VALUE = 1061;
    /**
     * <code>REQUEST_GET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY = 1062;</code>
     */
    public static final int REQUEST_GET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY_VALUE = 1062;
    /**
     * <code>RESPONSE_GET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY = 1063;</code>
     */
    public static final int RESPONSE_GET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY_VALUE = 1063;
    /**
     * <code>REQUEST_LIST_OBJECT_LIST_ENTRIES = 1064;</code>
     */
    public static final int REQUEST_LIST_OBJECT_LIST_ENTRIES_VALUE = 1064;
    /**
     * <code>RESPONSE_LIST_OBJECT_LIST_ENTRIES = 1065;</code>
     */
    public static final int RESPONSE_LIST_OBJECT_LIST_ENTRIES_VALUE = 1065;
    /**
     * <code>REQUEST_GET_OR_CREATE_BUCKET_ACTIVE_KEY = 1070;</code>
     *
     * <pre>
     *Dare KEK keys for bucket and ns
     * </pre>
     */
    public static final int REQUEST_GET_OR_CREATE_BUCKET_ACTIVE_KEY_VALUE = 1070;
    /**
     * <code>RESPONSE_GET_OR_CREATE_BUCKET_ACTIVE_KEY = 1071;</code>
     */
    public static final int RESPONSE_GET_OR_CREATE_BUCKET_ACTIVE_KEY_VALUE = 1071;
    /**
     * <code>REQUEST_GET_OR_CREATE_NAMESPACE_ACTIVE_KEY = 1072;</code>
     */
    public static final int REQUEST_GET_OR_CREATE_NAMESPACE_ACTIVE_KEY_VALUE = 1072;
    /**
     * <code>RESPONSE_GET_OR_CREATE_NAMESPACE_ACTIVE_KEY = 1073;</code>
     */
    public static final int RESPONSE_GET_OR_CREATE_NAMESPACE_ACTIVE_KEY_VALUE = 1073;
    /**
     * <code>REQUEST_TAKE_BUCKET_SNAPSHOT = 1074;</code>
     *
     * <pre>
     *bucket snapshot request
     * </pre>
     */
    public static final int REQUEST_TAKE_BUCKET_SNAPSHOT_VALUE = 1074;
    /**
     * <code>RESPONSE_TAKE_BUCKET_SNAPSHOT = 1075;</code>
     */
    public static final int RESPONSE_TAKE_BUCKET_SNAPSHOT_VALUE = 1075;
    /**
     * <code>REQUEST_REVERT_BUCKET_SNAPSHOT = 1076;</code>
     */
    public static final int REQUEST_REVERT_BUCKET_SNAPSHOT_VALUE = 1076;
    /**
     * <code>RESPONSE_REVERT_BUCKET_SNAPSHOT = 1077;</code>
     */
    public static final int RESPONSE_REVERT_BUCKET_SNAPSHOT_VALUE = 1077;
    /**
     * <code>REQUEST_DELETE_BUCKET_SNAPSHOT = 1078;</code>
     */
    public static final int REQUEST_DELETE_BUCKET_SNAPSHOT_VALUE = 1078;
    /**
     * <code>RESPONSE_DELETE_BUCKET_SNAPSHOT = 1079;</code>
     */
    public static final int RESPONSE_DELETE_BUCKET_SNAPSHOT_VALUE = 1079;
    /**
     * <code>REQUEST_LIST_BUCKET_SNAPSHOT = 1080;</code>
     */
    public static final int REQUEST_LIST_BUCKET_SNAPSHOT_VALUE = 1080;
    /**
     * <code>RESPONSE_LIST_BUCKET_SNAPSHOT = 1081;</code>
     */
    public static final int RESPONSE_LIST_BUCKET_SNAPSHOT_VALUE = 1081;
    /**
     * <code>REQUEST_REVERT_OBJECT_SNAPSHOT = 1082;</code>
     */
    public static final int REQUEST_REVERT_OBJECT_SNAPSHOT_VALUE = 1082;
    /**
     * <code>RESPONSE_REVERT_OBJECT_SNAPSHOT = 1083;</code>
     */
    public static final int RESPONSE_REVERT_OBJECT_SNAPSHOT_VALUE = 1083;
    /**
     * <code>REQUEST_DELETE_BUCKET_STATE_SNAPSHOT = 1084;</code>
     */
    public static final int REQUEST_DELETE_BUCKET_STATE_SNAPSHOT_VALUE = 1084;
    /**
     * <code>RESPONSE_DELETE_BUCKET_STATE_SNAPSHOT = 1085;</code>
     */
    public static final int RESPONSE_DELETE_BUCKET_STATE_SNAPSHOT_VALUE = 1085;
    /**
     * <code>REQUEST_REVERT_OBJECT_LIST_ENTRY_SNAPSHOT = 1086;</code>
     */
    public static final int REQUEST_REVERT_OBJECT_LIST_ENTRY_SNAPSHOT_VALUE = 1086;
    /**
     * <code>RESPONSE_REVERT_OBJECT_LIST_ENTRY_SNAPSHOT = 1087;</code>
     */
    public static final int RESPONSE_REVERT_OBJECT_LIST_ENTRY_SNAPSHOT_VALUE = 1087;
    /**
     * <code>REQUEST_LIST_OBJECTS_BY_TAG = 1100;</code>
     *
     * <pre>
     *ATMOS Listable Tag
     * </pre>
     */
    public static final int REQUEST_LIST_OBJECTS_BY_TAG_VALUE = 1100;
    /**
     * <code>RESPONSE_LIST_OBJECTS_BY_TAG = 1101;</code>
     */
    public static final int RESPONSE_LIST_OBJECTS_BY_TAG_VALUE = 1101;
    /**
     * <code>REQUEST_QUERY_LISTABLE_TAG_HIERARCHY = 1102;</code>
     */
    public static final int REQUEST_QUERY_LISTABLE_TAG_HIERARCHY_VALUE = 1102;
    /**
     * <code>RESPONSE_QUERY_LISTABLE_TAG_HIERARCHY = 1103;</code>
     */
    public static final int RESPONSE_QUERY_LISTABLE_TAG_HIERARCHY_VALUE = 1103;
    /**
     * <code>REQUEST_UPGRADE_LISTABLE_TAG = 1104;</code>
     */
    public static final int REQUEST_UPGRADE_LISTABLE_TAG_VALUE = 1104;
    /**
     * <code>RESPONSE_UPGRADE_LISTABLE_TAG = 1105;</code>
     */
    public static final int RESPONSE_UPGRADE_LISTABLE_TAG_VALUE = 1105;
    /**
     * <code>REQUEST_GET_REJOIN_PROGRESS = 1106;</code>
     *
     * <pre>
     *TSO Rejoin Progress
     * </pre>
     */
    public static final int REQUEST_GET_REJOIN_PROGRESS_VALUE = 1106;
    /**
     * <code>RESPONSE_GET_REJOIN_PROGRESS = 1107;</code>
     */
    public static final int RESPONSE_GET_REJOIN_PROGRESS_VALUE = 1107;
    /**
     * <code>REQUEST_DELETE_REJOIN_PROGRESS = 1108;</code>
     */
    public static final int REQUEST_DELETE_REJOIN_PROGRESS_VALUE = 1108;
    /**
     * <code>RESPONSE_DELETE_REJOIN_PROGRESS = 1109;</code>
     */
    public static final int RESPONSE_DELETE_REJOIN_PROGRESS_VALUE = 1109;
    /**
     * <code>REQUEST_OWNERSHIP_PING = 1200;</code>
     *
     * <pre>
     *======================================
     * </pre>
     */
    public static final int REQUEST_OWNERSHIP_PING_VALUE = 1200;
    /**
     * <code>RESPONSE_OWNERSHIP_PING = 1201;</code>
     */
    public static final int RESPONSE_OWNERSHIP_PING_VALUE = 1201;
    /**
     * <code>REQUEST_CHUNK_TABLE_DT_QUERY = 1202;</code>
     *
     * <pre>
     *The range in [1202, 1215] is reserved for corruption scanner
     * </pre>
     */
    public static final int REQUEST_CHUNK_TABLE_DT_QUERY_VALUE = 1202;
    /**
     * <code>RESPONSE_CHUNK_TABLE_DT_QUERY = 1203;</code>
     */
    public static final int RESPONSE_CHUNK_TABLE_DT_QUERY_VALUE = 1203;
    /**
     * <code>REQUEST_CHUNK_GC_READY = 1216;</code>
     */
    public static final int REQUEST_CHUNK_GC_READY_VALUE = 1216;
    /**
     * <code>RESPONSE_CHUNK_GC_READY = 1217;</code>
     */
    public static final int RESPONSE_CHUNK_GC_READY_VALUE = 1217;
    /**
     * <code>REQUEST_VNEST_DIAGNOSTIC = 1218;</code>
     */
    public static final int REQUEST_VNEST_DIAGNOSTIC_VALUE = 1218;
    /**
     * <code>RESPONSE_VNEST_DIAGNOSTIC = 1219;</code>
     */
    public static final int RESPONSE_VNEST_DIAGNOSTIC_VALUE = 1219;
    /**
     * <code>REQUEST_INSERT_BANDWIDTH_DATA_GROUP = 1220;</code>
     */
    public static final int REQUEST_INSERT_BANDWIDTH_DATA_GROUP_VALUE = 1220;
    /**
     * <code>RESPONSE_INSERT_BANDWIDTH_DATA_GROUP = 1221;</code>
     */
    public static final int RESPONSE_INSERT_BANDWIDTH_DATA_GROUP_VALUE = 1221;
    /**
     * <code>REQUEST_POSITIVE_REF_MARKER = 1222;</code>
     *
     * <pre>
     * Metering blobsvc request
     * </pre>
     */
    public static final int REQUEST_POSITIVE_REF_MARKER_VALUE = 1222;
    /**
     * <code>RESPONSE_POSITIVE_REF_MARKER = 1223;</code>
     */
    public static final int RESPONSE_POSITIVE_REF_MARKER_VALUE = 1223;
    /**
     * <code>REQUEST_UPDATE_METERING_PROGRESS_MARKER = 1224;</code>
     */
    public static final int REQUEST_UPDATE_METERING_PROGRESS_MARKER_VALUE = 1224;
    /**
     * <code>RESPONSE_UPDATE_METERING_PROGRESS_MARKER = 1225;</code>
     */
    public static final int RESPONSE_UPDATE_METERING_PROGRESS_MARKER_VALUE = 1225;
    /**
     * <code>REQUEST_GET_METERING_JOURNAL_PARSER_MARKER = 1226;</code>
     *
     * <pre>
     * Metering Journal Parser
     * </pre>
     */
    public static final int REQUEST_GET_METERING_JOURNAL_PARSER_MARKER_VALUE = 1226;
    /**
     * <code>RESPONSE_GET_METERING_JOURNAL_PARSER_MARKER = 1227;</code>
     */
    public static final int RESPONSE_GET_METERING_JOURNAL_PARSER_MARKER_VALUE = 1227;
    /**
     * <code>REQUEST_SET_METERING_JOURNAL_PARSER_MARKER = 1228;</code>
     */
    public static final int REQUEST_SET_METERING_JOURNAL_PARSER_MARKER_VALUE = 1228;
    /**
     * <code>RESPONSE_SET_METERING_JOURNAL_PARSER_MARKER = 1229;</code>
     */
    public static final int RESPONSE_SET_METERING_JOURNAL_PARSER_MARKER_VALUE = 1229;
    /**
     * <code>REQUEST_NFS_LIST_FILES_BY_PATHS = 1230;</code>
     */
    public static final int REQUEST_NFS_LIST_FILES_BY_PATHS_VALUE = 1230;
    /**
     * <code>RESPONSE_NFS_LIST_FILES_BY_PATHS = 1231;</code>
     */
    public static final int RESPONSE_NFS_LIST_FILES_BY_PATHS_VALUE = 1231;
    /**
     * <code>REQUEST_REPLACE_BLOCKS = 1232;</code>
     *
     * <pre>
     *Replace Blocks
     * </pre>
     */
    public static final int REQUEST_REPLACE_BLOCKS_VALUE = 1232;
    /**
     * <code>RESPONSE_REPLACE_BLOCKS = 1233;</code>
     */
    public static final int RESPONSE_REPLACE_BLOCKS_VALUE = 1233;
    /**
     * <code>REQUEST_NFS_SET_SMD_UMD = 1234;</code>
     */
    public static final int REQUEST_NFS_SET_SMD_UMD_VALUE = 1234;
    /**
     * <code>RESPONSE_NFS_SET_SMD_UMD = 1235;</code>
     */
    public static final int RESPONSE_NFS_SET_SMD_UMD_VALUE = 1235;
    /**
     * <code>REQUEST_GET_CLUSTER_ID = 1236;</code>
     */
    public static final int REQUEST_GET_CLUSTER_ID_VALUE = 1236;
    /**
     * <code>RESPONSE_GET_CLUSTER_ID = 1237;</code>
     */
    public static final int RESPONSE_GET_CLUSTER_ID_VALUE = 1237;
    /**
     * <code>REQUEST_UPDATE_CLUSTER_ID = 1238;</code>
     */
    public static final int REQUEST_UPDATE_CLUSTER_ID_VALUE = 1238;
    /**
     * <code>RESPONSE_UPDATE_CLUSTER_ID = 1239;</code>
     */
    public static final int RESPONSE_UPDATE_CLUSTER_ID_VALUE = 1239;
    /**
     * <code>REQUEST_CHECK_RG_CONTAINS_ZONE = 1240;</code>
     */
    public static final int REQUEST_CHECK_RG_CONTAINS_ZONE_VALUE = 1240;
    /**
     * <code>RESPONSE_CHECK_RG_CONTAINS_ZONE = 1241;</code>
     */
    public static final int RESPONSE_CHECK_RG_CONTAINS_ZONE_VALUE = 1241;
    /**
     * <code>REQUEST_CREATE_HDFS_DELEGATION_TOKEN = 1242;</code>
     *
     * <pre>
     * HDFS Delegation Token info in RT table
     * </pre>
     */
    public static final int REQUEST_CREATE_HDFS_DELEGATION_TOKEN_VALUE = 1242;
    /**
     * <code>RESPONSE_CREATE_HDFS_DELEGATION_TOKEN = 1243;</code>
     */
    public static final int RESPONSE_CREATE_HDFS_DELEGATION_TOKEN_VALUE = 1243;
    /**
     * <code>REQUEST_GET_HDFS_DELEGATION_TOKEN = 1244;</code>
     */
    public static final int REQUEST_GET_HDFS_DELEGATION_TOKEN_VALUE = 1244;
    /**
     * <code>RESPONSE_GET_HDFS_DELEGATION_TOKEN = 1245;</code>
     */
    public static final int RESPONSE_GET_HDFS_DELEGATION_TOKEN_VALUE = 1245;
    /**
     * <code>REQUEST_LIST_HDFS_DELEGATION_TOKEN = 1246;</code>
     */
    public static final int REQUEST_LIST_HDFS_DELEGATION_TOKEN_VALUE = 1246;
    /**
     * <code>RESPONSE_LIST_HDFS_DELEGATION_TOKEN = 1247;</code>
     */
    public static final int RESPONSE_LIST_HDFS_DELEGATION_TOKEN_VALUE = 1247;
    /**
     * <code>REQUEST_DELETE_HDFS_DELEGATION_TOKEN = 1248;</code>
     */
    public static final int REQUEST_DELETE_HDFS_DELEGATION_TOKEN_VALUE = 1248;
    /**
     * <code>RESPONSE_DELETE_HDFS_DELEGATION_TOKEN = 1249;</code>
     */
    public static final int RESPONSE_DELETE_HDFS_DELEGATION_TOKEN_VALUE = 1249;
    /**
     * <code>REQUEST_UPDATE_HDFS_DELEGATION_TOKEN = 1250;</code>
     */
    public static final int REQUEST_UPDATE_HDFS_DELEGATION_TOKEN_VALUE = 1250;
    /**
     * <code>RESPONSE_UPDATE_HDFS_DELEGATION_TOKEN = 1251;</code>
     */
    public static final int RESPONSE_UPDATE_HDFS_DELEGATION_TOKEN_VALUE = 1251;
    /**
     * <code>REQUEST_WRITE_HDFS_SALT_DATA = 1252;</code>
     *
     * <pre>
     * HDFS Salt Data info in RT table
     * </pre>
     */
    public static final int REQUEST_WRITE_HDFS_SALT_DATA_VALUE = 1252;
    /**
     * <code>RESPONSE_WRITE_HDFS_SALT_DATA = 1253;</code>
     */
    public static final int RESPONSE_WRITE_HDFS_SALT_DATA_VALUE = 1253;
    /**
     * <code>REQUEST_READ_HDFS_SALT_DATA = 1254;</code>
     */
    public static final int REQUEST_READ_HDFS_SALT_DATA_VALUE = 1254;
    /**
     * <code>RESPONSE_READ_HDFS_SALT_DATA = 1255;</code>
     */
    public static final int RESPONSE_READ_HDFS_SALT_DATA_VALUE = 1255;
    /**
     * <code>REQUEST_DELETE_HDFS_SALT_DATA = 1256;</code>
     */
    public static final int REQUEST_DELETE_HDFS_SALT_DATA_VALUE = 1256;
    /**
     * <code>RESPONSE_DELETE_HDFS_SALT_DATA = 1257;</code>
     */
    public static final int RESPONSE_DELETE_HDFS_SALT_DATA_VALUE = 1257;
    /**
     * <code>REQUEST_UPDATE_HDFS_SALT_DATA = 1258;</code>
     */
    public static final int REQUEST_UPDATE_HDFS_SALT_DATA_VALUE = 1258;
    /**
     * <code>RESPONSE_UPDATE_HDFS_SALT_DATA = 1259;</code>
     */
    public static final int RESPONSE_UPDATE_HDFS_SALT_DATA_VALUE = 1259;
    /**
     * <code>REQUEST_INSERT_BLOB_POS_START_MAJOR = 1260;</code>
     *
     * <pre>
     *metering upgrade marker
     * </pre>
     */
    public static final int REQUEST_INSERT_BLOB_POS_START_MAJOR_VALUE = 1260;
    /**
     * <code>RESPONSE_INSERT_BLOB_POS_START_MAJOR = 1261;</code>
     */
    public static final int RESPONSE_INSERT_BLOB_POS_START_MAJOR_VALUE = 1261;
    /**
     * <code>REQUEST_GET_BLOB_POS_START_MAJOR = 1262;</code>
     */
    public static final int REQUEST_GET_BLOB_POS_START_MAJOR_VALUE = 1262;
    /**
     * <code>RESPONSE_GET_BLOB_POS_START_MAJOR = 1263;</code>
     */
    public static final int RESPONSE_GET_BLOB_POS_START_MAJOR_VALUE = 1263;
    /**
     * <code>REQUEST_ENABLE_GEO_REPLAYER = 1264;</code>
     */
    public static final int REQUEST_ENABLE_GEO_REPLAYER_VALUE = 1264;
    /**
     * <code>RESPONSE_ENABLE_GEO_REPLAYER = 1265;</code>
     */
    public static final int RESPONSE_ENABLE_GEO_REPLAYER_VALUE = 1265;
    /**
     * <code>REQUEST_DISABLE_GEO_REPLAYER = 1266;</code>
     */
    public static final int REQUEST_DISABLE_GEO_REPLAYER_VALUE = 1266;
    /**
     * <code>RESPONSE_DISABLE_GEO_REPLAYER = 1267;</code>
     */
    public static final int RESPONSE_DISABLE_GEO_REPLAYER_VALUE = 1267;
    /**
     * <code>REQUEST_INSERT_TSO_TRANSITION_KEY = 1270;</code>
     */
    public static final int REQUEST_INSERT_TSO_TRANSITION_KEY_VALUE = 1270;
    /**
     * <code>RESPONSE_INSERT_TSO_TRANSITION_KEY = 1271;</code>
     */
    public static final int RESPONSE_INSERT_TSO_TRANSITION_KEY_VALUE = 1271;
    /**
     * <code>REQUEST_REMOVE_TSO_TRANSITION_KEY = 1272;</code>
     */
    public static final int REQUEST_REMOVE_TSO_TRANSITION_KEY_VALUE = 1272;
    /**
     * <code>RESPONSE_REMOVE_TSO_TRANSITION_KEY = 1273;</code>
     */
    public static final int RESPONSE_REMOVE_TSO_TRANSITION_KEY_VALUE = 1273;
    /**
     * <code>REQUEST_VNEST_CONTROL_MSG = 1274;</code>
     */
    public static final int REQUEST_VNEST_CONTROL_MSG_VALUE = 1274;
    /**
     * <code>RESPONSE_VNEST_CONTROL_MSG = 1275;</code>
     */
    public static final int RESPONSE_VNEST_CONTROL_MSG_VALUE = 1275;
    /**
     * <code>REQUEST_GET_CLUSTER_KEY = 1276;</code>
     */
    public static final int REQUEST_GET_CLUSTER_KEY_VALUE = 1276;
    /**
     * <code>RESPONSE_GET_CLUSTER_KEY = 1277;</code>
     */
    public static final int RESPONSE_GET_CLUSTER_KEY_VALUE = 1277;
    /**
     * <code>REQUEST_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET = 1300;</code>
     *
     * <pre>
     * For TSO
     * </pre>
     */
    public static final int REQUEST_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET_VALUE = 1300;
    /**
     * <code>RESPONSE_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET = 1301;</code>
     */
    public static final int RESPONSE_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET_VALUE = 1301;
    /**
     * <code>REQUEST_GEO_LIST_OBJ_INDEX_RANGE = 1302;</code>
     */
    public static final int REQUEST_GEO_LIST_OBJ_INDEX_RANGE_VALUE = 1302;
    /**
     * <code>RESPONSE_GEO_LIST_OBJ_INDEX_RANGE = 1303;</code>
     */
    public static final int RESPONSE_GEO_LIST_OBJ_INDEX_RANGE_VALUE = 1303;
    /**
     * <code>REQUEST_BUCKET_SET_POLICY = 1304;</code>
     *
     * <pre>
     * For bucket policy
     * </pre>
     */
    public static final int REQUEST_BUCKET_SET_POLICY_VALUE = 1304;
    /**
     * <code>RESPONSE_BUCKET_SET_POLICY = 1305;</code>
     */
    public static final int RESPONSE_BUCKET_SET_POLICY_VALUE = 1305;
    /**
     * <code>REQUEST_BUCKET_GET_POLICY = 1306;</code>
     */
    public static final int REQUEST_BUCKET_GET_POLICY_VALUE = 1306;
    /**
     * <code>RESPONSE_BUCKET_GET_POLICY = 1307;</code>
     */
    public static final int RESPONSE_BUCKET_GET_POLICY_VALUE = 1307;
    /**
     * <code>REQUEST_BUCKET_DELETE_BUCKET_POLICY = 1308;</code>
     */
    public static final int REQUEST_BUCKET_DELETE_BUCKET_POLICY_VALUE = 1308;
    /**
     * <code>RESPONSE_BUCKET_DELETE_BUCKET_POLICY = 1309;</code>
     */
    public static final int RESPONSE_BUCKET_DELETE_BUCKET_POLICY_VALUE = 1309;
    /**
     * <code>REQUEST_UPDATE_USER_TAG = 1310;</code>
     *
     * <pre>
     * UserTags for Object User
     * </pre>
     */
    public static final int REQUEST_UPDATE_USER_TAG_VALUE = 1310;
    /**
     * <code>RESPONSE_UPDATE_USER_TAG = 1311;</code>
     */
    public static final int RESPONSE_UPDATE_USER_TAG_VALUE = 1311;
    /**
     * <code>REQUEST_DELETE_USER_TAG = 1312;</code>
     */
    public static final int REQUEST_DELETE_USER_TAG_VALUE = 1312;
    /**
     * <code>RESPONSE_DELETE_USER_TAG = 1313;</code>
     */
    public static final int RESPONSE_DELETE_USER_TAG_VALUE = 1313;
    /**
     * <code>REQUEST_USER_TAGS_QUERY = 1314;</code>
     */
    public static final int REQUEST_USER_TAGS_QUERY_VALUE = 1314;
    /**
     * <code>RESPONSE_USER_TAGS_QUERY = 1315;</code>
     */
    public static final int RESPONSE_USER_TAGS_QUERY_VALUE = 1315;
    /**
     * <code>REQUEST_REMOVE_REBUILD_REFTABLE_TASK_MARKER = 1316;</code>
     *
     * <pre>
     *RemoveRefTableRebuildTaskMarker
     * </pre>
     */
    public static final int REQUEST_REMOVE_REBUILD_REFTABLE_TASK_MARKER_VALUE = 1316;
    /**
     * <code>RESPONSE_REMOVE_REBUILD_REFTABLE_TASK_MARKER = 1317;</code>
     */
    public static final int RESPONSE_REMOVE_REBUILD_REFTABLE_TASK_MARKER_VALUE = 1317;
    /**
     * <code>REQUEST_RESET_BOOTSTRAP_TASKS = 1350;</code>
     *
     * <pre>
     * 1350-1375 are reserved for bootstrap related commands
     * </pre>
     */
    public static final int REQUEST_RESET_BOOTSTRAP_TASKS_VALUE = 1350;
    /**
     * <code>RESPONSE_RESET_BOOTSTRAP_TASKS = 1351;</code>
     */
    public static final int RESPONSE_RESET_BOOTSTRAP_TASKS_VALUE = 1351;
    /**
     * <code>REQUEST_INSERT_BOOTSTRAP_MARKER = 1352;</code>
     */
    public static final int REQUEST_INSERT_BOOTSTRAP_MARKER_VALUE = 1352;
    /**
     * <code>RESPONSE_INSERT_BOOTSTRAP_MARKER = 1353;</code>
     */
    public static final int RESPONSE_INSERT_BOOTSTRAP_MARKER_VALUE = 1353;
    /**
     * <code>REQUEST_REMOVE_BOOTSTRAP_MARKER = 1354;</code>
     */
    public static final int REQUEST_REMOVE_BOOTSTRAP_MARKER_VALUE = 1354;
    /**
     * <code>RESPONSE_REMOVE_BOOTSTRAP_MARKER = 1355;</code>
     */
    public static final int RESPONSE_REMOVE_BOOTSTRAP_MARKER_VALUE = 1355;
    /**
     * <code>REQUEST_INSERT_BOOTSTRAP_TASKS = 1356;</code>
     */
    public static final int REQUEST_INSERT_BOOTSTRAP_TASKS_VALUE = 1356;
    /**
     * <code>RESPONSE_INSERT_BOOTSTRAP_TASKS = 1357;</code>
     */
    public static final int RESPONSE_INSERT_BOOTSTRAP_TASKS_VALUE = 1357;
    /**
     * <code>REQUEST_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_TREE = 1358;</code>
     */
    public static final int REQUEST_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_TREE_VALUE = 1358;
    /**
     * <code>RESPONSE_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_TREE = 1359;</code>
     */
    public static final int RESPONSE_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_TREE_VALUE = 1359;
    /**
     * <code>REQUEST_ALERT_FABRIC_SEQ_NUM = 1376;</code>
     *
     * <pre>
     *Alert and Audit Fabric sequence Number related commands
     * </pre>
     */
    public static final int REQUEST_ALERT_FABRIC_SEQ_NUM_VALUE = 1376;
    /**
     * <code>RESPONSE_ALERT_FABRIC_SEQ_NUM = 1377;</code>
     */
    public static final int RESPONSE_ALERT_FABRIC_SEQ_NUM_VALUE = 1377;
    /**
     * <code>REQUEST_AUDIT_FABRIC_SEQ_NUM = 1378;</code>
     */
    public static final int REQUEST_AUDIT_FABRIC_SEQ_NUM_VALUE = 1378;
    /**
     * <code>RESPONSE_AUDIT_FABRIC_SEQ_NUM = 1379;</code>
     */
    public static final int RESPONSE_AUDIT_FABRIC_SEQ_NUM_VALUE = 1379;
    /**
     * <code>REQUEST_GET_ORIGINAL_IP_LIST = 1380;</code>
     *
     * <pre>
     *IP change support related messages
     * </pre>
     */
    public static final int REQUEST_GET_ORIGINAL_IP_LIST_VALUE = 1380;
    /**
     * <code>RESPONSE_GET_ORIGINAL_IP_LIST = 1381;</code>
     */
    public static final int RESPONSE_GET_ORIGINAL_IP_LIST_VALUE = 1381;
    /**
     * <code>REQUEST_GET_ORIGINALIP_KEY = 1382;</code>
     */
    public static final int REQUEST_GET_ORIGINALIP_KEY_VALUE = 1382;
    /**
     * <code>RESPONSE_GET_ORIGINALIP_KEY = 1383;</code>
     */
    public static final int RESPONSE_GET_ORIGINALIP_KEY_VALUE = 1383;
    /**
     * <code>REQUEST_PUT_ORIGINALIP_KEY = 1384;</code>
     */
    public static final int REQUEST_PUT_ORIGINALIP_KEY_VALUE = 1384;
    /**
     * <code>RESPONSE_PUT_ORIGINALIP_KEY = 1385;</code>
     */
    public static final int RESPONSE_PUT_ORIGINALIP_KEY_VALUE = 1385;
    /**
     * <code>REQUEST_INSERT_GEO_NODE_LEVEL_METERING_INFO = 1360;</code>
     *
     * <pre>
     *geo metering
     * </pre>
     */
    public static final int REQUEST_INSERT_GEO_NODE_LEVEL_METERING_INFO_VALUE = 1360;
    /**
     * <code>RESPONSE_INSERT_GEO_NODE_LEVEL_METERING_INFO = 1361;</code>
     */
    public static final int RESPONSE_INSERT_GEO_NODE_LEVEL_METERING_INFO_VALUE = 1361;
    /**
     * <code>REQUEST_GEO_RG_LEVEL_METERING_LATEST_INFO = 1362;</code>
     */
    public static final int REQUEST_GEO_RG_LEVEL_METERING_LATEST_INFO_VALUE = 1362;
    /**
     * <code>RESPONSE_GEO_RG_LEVEL_METERING_LATEST_INFO = 1363;</code>
     */
    public static final int RESPONSE_GEO_RG_LEVEL_METERING_LATEST_INFO_VALUE = 1363;
    /**
     * <code>REQUEST_GEO_ZONE_LEVEL_LATEST_METERING_INFO = 1364;</code>
     */
    public static final int REQUEST_GEO_ZONE_LEVEL_LATEST_METERING_INFO_VALUE = 1364;
    /**
     * <code>RESPONSE_GEO_ZONE_LEVEL_LATEST_METERING_INFO = 1365;</code>
     */
    public static final int RESPONSE_GEO_ZONE_LEVEL_LATEST_METERING_INFO_VALUE = 1365;
    /**
     * <code>REQUEST_GEO_RG_LEVEL_METERING_SAMPLE_INFO = 1366;</code>
     */
    public static final int REQUEST_GEO_RG_LEVEL_METERING_SAMPLE_INFO_VALUE = 1366;
    /**
     * <code>RESPONSE_GEO_RG_LEVEL_METERING_SAMPLE_INFO = 1367;</code>
     */
    public static final int RESPONSE_GEO_RG_LEVEL_METERING_SAMPLE_INFO_VALUE = 1367;
    /**
     * <code>REQUEST_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO = 1368;</code>
     */
    public static final int REQUEST_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO_VALUE = 1368;
    /**
     * <code>RESPONSE_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO = 1369;</code>
     */
    public static final int RESPONSE_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO_VALUE = 1369;
    /**
     * <code>REQUEST_INSERT_JOURNAL_REPLICATE_TASK_RANGE = 1370;</code>
     */
    public static final int REQUEST_INSERT_JOURNAL_REPLICATE_TASK_RANGE_VALUE = 1370;
    /**
     * <code>RESPONSE_INSERT_JOURNAL_REPLICATE_TASK_RANGE = 1371;</code>
     */
    public static final int RESPONSE_INSERT_JOURNAL_REPLICATE_TASK_RANGE_VALUE = 1371;
    /**
     * <code>REQUEST_SET_NOTIFIED_FOR_REMOTE_ZONE = 1400;</code>
     */
    public static final int REQUEST_SET_NOTIFIED_FOR_REMOTE_ZONE_VALUE = 1400;
    /**
     * <code>RESPONSE_SET_NOTIFIED_FOR_REMOTE_ZONE = 1401;</code>
     */
    public static final int RESPONSE_SET_NOTIFIED_FOR_REMOTE_ZONE_VALUE = 1401;
    /**
     * <code>REQUEST_REDO_FAILURE_MODE_REPLAY_FOR_REMOTE_ZONE = 1402;</code>
     */
    public static final int REQUEST_REDO_FAILURE_MODE_REPLAY_FOR_REMOTE_ZONE_VALUE = 1402;
    /**
     * <code>RESPONSE_REDO_FAILURE_MODE_REPLAY_FOR_REMOTE_ZONE = 1403;</code>
     */
    public static final int RESPONSE_REDO_FAILURE_MODE_REPLAY_FOR_REMOTE_ZONE_VALUE = 1403;
    /**
     * <code>REQUEST_REMOVE_REGION = 1404;</code>
     */
    public static final int REQUEST_REMOVE_REGION_VALUE = 1404;
    /**
     * <code>RESPONSE_REMOVE_REGION = 1405;</code>
     */
    public static final int RESPONSE_REMOVE_REGION_VALUE = 1405;
    /**
     * <code>REQUEST_TRIGGER_IC = 1406;</code>
     */
    public static final int REQUEST_TRIGGER_IC_VALUE = 1406;
    /**
     * <code>RESPONSE_TRIGGER_IC = 1407;</code>
     */
    public static final int RESPONSE_TRIGGER_IC_VALUE = 1407;
    /**
     * <code>REQUEST_INSERT_RECONSTRUCTION_KEY = 1408;</code>
     */
    public static final int REQUEST_INSERT_RECONSTRUCTION_KEY_VALUE = 1408;
    /**
     * <code>RESPONSE_INSERT_RECONSTRUCTION_KEY = 1409;</code>
     */
    public static final int RESPONSE_INSERT_RECONSTRUCTION_KEY_VALUE = 1409;
    /**
     * <code>REQUEST_SENSOR_CREATE = 1410;</code>
     *
     * <pre>
     *===== Sensor commands===
     * </pre>
     */
    public static final int REQUEST_SENSOR_CREATE_VALUE = 1410;
    /**
     * <code>RESPONSE_SENSOR_CREATE = 1411;</code>
     */
    public static final int RESPONSE_SENSOR_CREATE_VALUE = 1411;
    /**
     * <code>REQUEST_SENSOR_GET = 1412;</code>
     */
    public static final int REQUEST_SENSOR_GET_VALUE = 1412;
    /**
     * <code>RESPONSE_SENSOR_GET = 1413;</code>
     */
    public static final int RESPONSE_SENSOR_GET_VALUE = 1413;
    /**
     * <code>REQUEST_SENSOR_LIST = 1414;</code>
     */
    public static final int REQUEST_SENSOR_LIST_VALUE = 1414;
    /**
     * <code>RESPONSE_SENSOR_LIST = 1415;</code>
     */
    public static final int RESPONSE_SENSOR_LIST_VALUE = 1415;
    /**
     * <code>REQUEST_SENSOR_DELETE = 1416;</code>
     */
    public static final int REQUEST_SENSOR_DELETE_VALUE = 1416;
    /**
     * <code>RESPONSE_SENSOR_DELETE = 1417;</code>
     */
    public static final int RESPONSE_SENSOR_DELETE_VALUE = 1417;
    /**
     * <code>REQUEST_SENSOR_UPDATE = 1418;</code>
     */
    public static final int REQUEST_SENSOR_UPDATE_VALUE = 1418;
    /**
     * <code>RESPONSE_SENSOR_UPDATE = 1419;</code>
     */
    public static final int RESPONSE_SENSOR_UPDATE_VALUE = 1419;
    /**
     * <code>REQUEST_SENSOR_STATUS_GET = 1420;</code>
     */
    public static final int REQUEST_SENSOR_STATUS_GET_VALUE = 1420;
    /**
     * <code>RESPONSE_SENSOR_STATUS_GET = 1421;</code>
     */
    public static final int RESPONSE_SENSOR_STATUS_GET_VALUE = 1421;
    /**
     * <code>REQUEST_SENSOR_STATUS_SET = 1422;</code>
     */
    public static final int REQUEST_SENSOR_STATUS_SET_VALUE = 1422;
    /**
     * <code>RESPONSE_SENSOR_STATUS_SET = 1423;</code>
     *
     * <pre>
     *===== end Sensor commands====
     * </pre>
     */
    public static final int RESPONSE_SENSOR_STATUS_SET_VALUE = 1423;
    /**
     * <code>REQUEST_OBJECTGC_LOCAL_REFERENCE_PROGRESS = 1430;</code>
     */
    public static final int REQUEST_OBJECTGC_LOCAL_REFERENCE_PROGRESS_VALUE = 1430;
    /**
     * <code>RESPONSE_OBJECTGC_LOCAL_REFERENCE_PROGRESS = 1431;</code>
     */
    public static final int RESPONSE_OBJECTGC_LOCAL_REFERENCE_PROGRESS_VALUE = 1431;
    /**
     * <code>REQUEST_OBJECTGC_STATS = 1432;</code>
     */
    public static final int REQUEST_OBJECTGC_STATS_VALUE = 1432;
    /**
     * <code>RESPONSE_OBJECTGC_STATS = 1433;</code>
     */
    public static final int RESPONSE_OBJECTGC_STATS_VALUE = 1433;
    /**
     * <code>REQUEST_OBJECTGC_NODE_TIME = 1434;</code>
     */
    public static final int REQUEST_OBJECTGC_NODE_TIME_VALUE = 1434;
    /**
     * <code>RESPONSE_OBJECTGC_NODE_TIME = 1435;</code>
     */
    public static final int RESPONSE_OBJECTGC_NODE_TIME_VALUE = 1435;
    /**
     * <code>REQUEST_CHUNK_RANGE_REPLICATION_CHECK = 1494;</code>
     */
    public static final int REQUEST_CHUNK_RANGE_REPLICATION_CHECK_VALUE = 1494;
    /**
     * <code>RESPONSE_CHUNK_RANGE_REPLICATION_CHECK = 1495;</code>
     */
    public static final int RESPONSE_CHUNK_RANGE_REPLICATION_CHECK_VALUE = 1495;
    /**
     * <code>REQUEST_OBJECT_REPLICATION_INFO = 1496;</code>
     */
    public static final int REQUEST_OBJECT_REPLICATION_INFO_VALUE = 1496;
    /**
     * <code>RESPONSE_OBJECT_REPLICATION_INFO = 1497;</code>
     */
    public static final int RESPONSE_OBJECT_REPLICATION_INFO_VALUE = 1497;
    /**
     * <code>REQUEST_GEO_CHECK_OBJECT_INDEX_REPLICATION = 1498;</code>
     */
    public static final int REQUEST_GEO_CHECK_OBJECT_INDEX_REPLICATION_VALUE = 1498;
    /**
     * <code>RESPONSE_GEO_CHECK_OBJECT_INDEX_REPLICATION = 1499;</code>
     */
    public static final int RESPONSE_GEO_CHECK_OBJECT_INDEX_REPLICATION_VALUE = 1499;
    /**
     * <code>REQUEST_POLL_SERVICE_READINESS = 1500;</code>
     */
    public static final int REQUEST_POLL_SERVICE_READINESS_VALUE = 1500;
    /**
     * <code>RESPONSE_POLL_SERVICE_READINESS = 1501;</code>
     */
    public static final int RESPONSE_POLL_SERVICE_READINESS_VALUE = 1501;
    /**
     * <code>REQUEST_INSERT_BUCKET_STAT_BATCH = 1502;</code>
     */
    public static final int REQUEST_INSERT_BUCKET_STAT_BATCH_VALUE = 1502;
    /**
     * <code>RESPONSE_INSERT_BUCKET_STAT_BATCH = 1503;</code>
     */
    public static final int RESPONSE_INSERT_BUCKET_STAT_BATCH_VALUE = 1503;
    /**
     * <code>REQUEST_RECYCLE_MPU_PARTS = 1504;</code>
     */
    public static final int REQUEST_RECYCLE_MPU_PARTS_VALUE = 1504;
    /**
     * <code>RESPONSE_RECYCLE_MPU_PARTS = 1505;</code>
     */
    public static final int RESPONSE_RECYCLE_MPU_PARTS_VALUE = 1505;
    /**
     * <code>REQUEST_DT_PING = 1506;</code>
     */
    public static final int REQUEST_DT_PING_VALUE = 1506;
    /**
     * <code>RESPONSE_DT_PING = 1507;</code>
     */
    public static final int RESPONSE_DT_PING_VALUE = 1507;
    /**
     * <code>REQUEST_NFSOBJECT_MULTI_COPY = 1510;</code>
     */
    public static final int REQUEST_NFSOBJECT_MULTI_COPY_VALUE = 1510;
    /**
     * <code>RESPONSE_NFSOBJECT_MULTI_COPY = 1511;</code>
     */
    public static final int RESPONSE_NFSOBJECT_MULTI_COPY_VALUE = 1511;
    /**
     * <code>REQUEST_GET_METERING_PROGRESS_MARKER = 1512;</code>
     */
    public static final int REQUEST_GET_METERING_PROGRESS_MARKER_VALUE = 1512;
    /**
     * <code>RESPONSE_GET_METERING_PROGRESS_MARKER = 1513;</code>
     */
    public static final int RESPONSE_GET_METERING_PROGRESS_MARKER_VALUE = 1513;
    /**
     * <code>REQUEST_LIST_BACKGROUND_OPERATORS = 1514;</code>
     */
    public static final int REQUEST_LIST_BACKGROUND_OPERATORS_VALUE = 1514;
    /**
     * <code>RESPONSE_LIST_BACKGROUND_OPERATORS = 1515;</code>
     */
    public static final int RESPONSE_LIST_BACKGROUND_OPERATORS_VALUE = 1515;
    /**
     * <code>REQUEST_GET_CAPACITY_STATISTICS = 1516;</code>
     */
    public static final int REQUEST_GET_CAPACITY_STATISTICS_VALUE = 1516;
    /**
     * <code>RESPONSE_GET_CAPACITY_STATISTICS = 1517;</code>
     */
    public static final int RESPONSE_GET_CAPACITY_STATISTICS_VALUE = 1517;
    /**
     * <code>REQUEST_UPDATE_CHUNK_VERIFICATION_SEQ = 1518;</code>
     */
    public static final int REQUEST_UPDATE_CHUNK_VERIFICATION_SEQ_VALUE = 1518;
    /**
     * <code>RESPONSE_UPDATE_CHUNK_VERIFICATION_SEQ = 1519;</code>
     */
    public static final int RESPONSE_UPDATE_CHUNK_VERIFICATION_SEQ_VALUE = 1519;
    /**
     * <code>REQUEST_GET_CROSS_REFERENCE_CHECK_STATUS = 1520;</code>
     */
    public static final int REQUEST_GET_CROSS_REFERENCE_CHECK_STATUS_VALUE = 1520;
    /**
     * <code>RESPONSE_GET_CROSS_REFERENCE_CHECK_STATUS = 1521;</code>
     */
    public static final int RESPONSE_GET_CROSS_REFERENCE_CHECK_STATUS_VALUE = 1521;
    /**
     * <code>REQUEST_CHECK_POSITIVE_REFERNCE_FOR_REMOTE_CHUNK = 1522;</code>
     */
    public static final int REQUEST_CHECK_POSITIVE_REFERNCE_FOR_REMOTE_CHUNK_VALUE = 1522;
    /**
     * <code>RESPONSE_CHECK_POSITIVE_REFERNCE_FOR_REMOTE_CHUNK = 1523;</code>
     */
    public static final int RESPONSE_CHECK_POSITIVE_REFERNCE_FOR_REMOTE_CHUNK_VALUE = 1523;
    /**
     * <code>REQUEST_VERIFY_REFERENCE_FROM_REMOTE_RR = 1524;</code>
     */
    public static final int REQUEST_VERIFY_REFERENCE_FROM_REMOTE_RR_VALUE = 1524;
    /**
     * <code>RESPONSE_VERIFY_REFERENCE_FROM_REMOTE_RR = 1525;</code>
     */
    public static final int RESPONSE_VERIFY_REFERENCE_FROM_REMOTE_RR_VALUE = 1525;
    /**
     * <code>REQUEST_GET_RR_SEQUENCE_KEY = 1528;</code>
     */
    public static final int REQUEST_GET_RR_SEQUENCE_KEY_VALUE = 1528;
    /**
     * <code>REPONSE_GET_RR_SEQUENCE_KEY = 1529;</code>
     */
    public static final int REPONSE_GET_RR_SEQUENCE_KEY_VALUE = 1529;
    /**
     * <code>REQUEST_UPDATE_COPY_JOB_PROGRESS = 1530;</code>
     */
    public static final int REQUEST_UPDATE_COPY_JOB_PROGRESS_VALUE = 1530;
    /**
     * <code>RESPONSE_UPDATE_COPY_JOB_PROGRESS = 1531;</code>
     */
    public static final int RESPONSE_UPDATE_COPY_JOB_PROGRESS_VALUE = 1531;
    /**
     * <code>REQUEST_FORCE_CHUNK_GC_VERFICATION = 1532;</code>
     */
    public static final int REQUEST_FORCE_CHUNK_GC_VERFICATION_VALUE = 1532;
    /**
     * <code>RESPONSE_FORCE_CHUNK_GC_VERFICATION = 1533;</code>
     */
    public static final int RESPONSE_FORCE_CHUNK_GC_VERFICATION_VALUE = 1533;
    /**
     * <code>REQUEST_ALERT_POLICY_CREATE = 1534;</code>
     *
     * <pre>
     *===== Alert Policy commands===
     * </pre>
     */
    public static final int REQUEST_ALERT_POLICY_CREATE_VALUE = 1534;
    /**
     * <code>RESPONSE_ALERT_POLICY_CREATE = 1535;</code>
     */
    public static final int RESPONSE_ALERT_POLICY_CREATE_VALUE = 1535;
    /**
     * <code>REQUEST_ALERT_POLICY_GET = 1536;</code>
     */
    public static final int REQUEST_ALERT_POLICY_GET_VALUE = 1536;
    /**
     * <code>RESPONSE_ALERT_POLICY_GET = 1537;</code>
     */
    public static final int RESPONSE_ALERT_POLICY_GET_VALUE = 1537;
    /**
     * <code>REQUEST_ALERT_POLICY_DELETE = 1538;</code>
     */
    public static final int REQUEST_ALERT_POLICY_DELETE_VALUE = 1538;
    /**
     * <code>RESPONSE_ALERT_POLICY_DELETE = 1539;</code>
     */
    public static final int RESPONSE_ALERT_POLICY_DELETE_VALUE = 1539;
    /**
     * <code>REQUEST_ALERT_POLICY_LIST = 1540;</code>
     */
    public static final int REQUEST_ALERT_POLICY_LIST_VALUE = 1540;
    /**
     * <code>RESPONSE_ALERT_POLICY_LIST = 1541;</code>
     *
     * <pre>
     *===== end Alert Policy commands====
     * </pre>
     */
    public static final int RESPONSE_ALERT_POLICY_LIST_VALUE = 1541;
    /**
     * <code>REQUEST_UPDATE_PARTIAL_GC_COPIED_DATA = 1542;</code>
     */
    public static final int REQUEST_UPDATE_PARTIAL_GC_COPIED_DATA_VALUE = 1542;
    /**
     * <code>RESPONSE_UPDATE_PARTIAL_GC_COPIED_DATA = 1543;</code>
     */
    public static final int RESPONSE_UPDATE_PARTIAL_GC_COPIED_DATA_VALUE = 1543;
    /**
     * <code>REQUEST_EKMSERVER_CREATE = 1544;</code>
     *
     * <pre>
     *===== EKMSERVER commands===
     * </pre>
     */
    public static final int REQUEST_EKMSERVER_CREATE_VALUE = 1544;
    /**
     * <code>RESPONSE_EKMSERVER_CREATE = 1545;</code>
     */
    public static final int RESPONSE_EKMSERVER_CREATE_VALUE = 1545;
    /**
     * <code>REQUEST_EKMSERVER_GET = 1546;</code>
     */
    public static final int REQUEST_EKMSERVER_GET_VALUE = 1546;
    /**
     * <code>RESPONSE_EKMSERVER_GET = 1547;</code>
     */
    public static final int RESPONSE_EKMSERVER_GET_VALUE = 1547;
    /**
     * <code>REQUEST_EKMSERVER_LIST = 1548;</code>
     */
    public static final int REQUEST_EKMSERVER_LIST_VALUE = 1548;
    /**
     * <code>RESPONSE_EKMSERVER_LIST = 1549;</code>
     */
    public static final int RESPONSE_EKMSERVER_LIST_VALUE = 1549;
    /**
     * <code>REQUEST_EKMSERVER_DELETE = 1550;</code>
     */
    public static final int REQUEST_EKMSERVER_DELETE_VALUE = 1550;
    /**
     * <code>RESPONSE_EKMSERVER_DELETE = 1551;</code>
     */
    public static final int RESPONSE_EKMSERVER_DELETE_VALUE = 1551;
    /**
     * <code>REQUEST_EKMSERVER_UPDATE = 1552;</code>
     */
    public static final int REQUEST_EKMSERVER_UPDATE_VALUE = 1552;
    /**
     * <code>RESPONSE_EKMSERVER_UPDATE = 1553;</code>
     *
     * <pre>
     *===== end EKMSERVER commands====
     * </pre>
     */
    public static final int RESPONSE_EKMSERVER_UPDATE_VALUE = 1553;
    /**
     * <code>REQUEST_EKMCLUSTER_CREATE = 1554;</code>
     *
     * <pre>
     *===== EKMCLUSTER commands===
     * </pre>
     */
    public static final int REQUEST_EKMCLUSTER_CREATE_VALUE = 1554;
    /**
     * <code>RESPONSE_EKMCLUSTER_CREATE = 1555;</code>
     */
    public static final int RESPONSE_EKMCLUSTER_CREATE_VALUE = 1555;
    /**
     * <code>REQUEST_EKMCLUSTER_GET = 1556;</code>
     */
    public static final int REQUEST_EKMCLUSTER_GET_VALUE = 1556;
    /**
     * <code>RESPONSE_EKMCLUSTER_GET = 1557;</code>
     */
    public static final int RESPONSE_EKMCLUSTER_GET_VALUE = 1557;
    /**
     * <code>REQUEST_EKMCLUSTER_LIST = 1558;</code>
     */
    public static final int REQUEST_EKMCLUSTER_LIST_VALUE = 1558;
    /**
     * <code>RESPONSE_EKMCLUSTER_LIST = 1559;</code>
     */
    public static final int RESPONSE_EKMCLUSTER_LIST_VALUE = 1559;
    /**
     * <code>REQUEST_EKMCLUSTER_DELETE = 1560;</code>
     */
    public static final int REQUEST_EKMCLUSTER_DELETE_VALUE = 1560;
    /**
     * <code>RESPONSE_EKMCLUSTER_DELETE = 1561;</code>
     */
    public static final int RESPONSE_EKMCLUSTER_DELETE_VALUE = 1561;
    /**
     * <code>REQUEST_EKMCLUSTER_UPDATE = 1562;</code>
     */
    public static final int REQUEST_EKMCLUSTER_UPDATE_VALUE = 1562;
    /**
     * <code>RESPONSE_EKMCLUSTER_UPDATE = 1563;</code>
     */
    public static final int RESPONSE_EKMCLUSTER_UPDATE_VALUE = 1563;
    /**
     * <code>REQUEST_EKMCLUSTER_STATUS_GET = 1564;</code>
     */
    public static final int REQUEST_EKMCLUSTER_STATUS_GET_VALUE = 1564;
    /**
     * <code>RESPONSE_EKMCLUSTER_STATUS_GET = 1565;</code>
     */
    public static final int RESPONSE_EKMCLUSTER_STATUS_GET_VALUE = 1565;
    /**
     * <code>REQUEST_EKMCLUSTER_STATUS_SET = 1566;</code>
     */
    public static final int REQUEST_EKMCLUSTER_STATUS_SET_VALUE = 1566;
    /**
     * <code>RESPONSE_EKMCLUSTER_STATUS_SET = 1567;</code>
     *
     * <pre>
     *===== end EKMCLUSTER commands====
     * </pre>
     */
    public static final int RESPONSE_EKMCLUSTER_STATUS_SET_VALUE = 1567;
    /**
     * <code>REQUEST_ROTATIONTASK_CREATE = 1568;</code>
     *
     * <pre>
     *===== EKMROTATIONTASK commands===
     * </pre>
     */
    public static final int REQUEST_ROTATIONTASK_CREATE_VALUE = 1568;
    /**
     * <code>RESPONSE_ROTATIONTASK_CREATE = 1569;</code>
     */
    public static final int RESPONSE_ROTATIONTASK_CREATE_VALUE = 1569;
    /**
     * <code>REQUEST_ROTATIONTASK_GET = 1570;</code>
     */
    public static final int REQUEST_ROTATIONTASK_GET_VALUE = 1570;
    /**
     * <code>RESPONSE_ROTATIONTASK_GET = 1571;</code>
     */
    public static final int RESPONSE_ROTATIONTASK_GET_VALUE = 1571;
    /**
     * <code>REQUEST_ROTATIONTASK_LIST = 1572;</code>
     */
    public static final int REQUEST_ROTATIONTASK_LIST_VALUE = 1572;
    /**
     * <code>RESPONSE_ROTATIONTASK_LIST = 1573;</code>
     */
    public static final int RESPONSE_ROTATIONTASK_LIST_VALUE = 1573;
    /**
     * <code>REQUEST_ROTATIONTASK_DELETE = 1574;</code>
     */
    public static final int REQUEST_ROTATIONTASK_DELETE_VALUE = 1574;
    /**
     * <code>RESPONSE_ROTATIONTASK_DELETE = 1575;</code>
     */
    public static final int RESPONSE_ROTATIONTASK_DELETE_VALUE = 1575;
    /**
     * <code>REQUEST_ROTATIONTASK_UPDATE = 1576;</code>
     */
    public static final int REQUEST_ROTATIONTASK_UPDATE_VALUE = 1576;
    /**
     * <code>RESPONSE_ROTATIONTASK_UPDATE = 1577;</code>
     */
    public static final int RESPONSE_ROTATIONTASK_UPDATE_VALUE = 1577;
    /**
     * <code>REQUEST_ROTATIONTASK_STATUS_GET = 1578;</code>
     */
    public static final int REQUEST_ROTATIONTASK_STATUS_GET_VALUE = 1578;
    /**
     * <code>RESPONSE_ROTATIONTASK_STATUS_GET = 1579;</code>
     */
    public static final int RESPONSE_ROTATIONTASK_STATUS_GET_VALUE = 1579;
    /**
     * <code>REQUEST_ROTATIONTASK_STATUS_SET = 1580;</code>
     */
    public static final int REQUEST_ROTATIONTASK_STATUS_SET_VALUE = 1580;
    /**
     * <code>RESPONSE_ROTATIONTASK_STATUS_SET = 1581;</code>
     */
    public static final int RESPONSE_ROTATIONTASK_STATUS_SET_VALUE = 1581;
    /**
     * <code>REQUEST_GET_OR_CREATE_ROTATIONTASK_ACTIVE_KEY = 1582;</code>
     */
    public static final int REQUEST_GET_OR_CREATE_ROTATIONTASK_ACTIVE_KEY_VALUE = 1582;
    /**
     * <code>RESPONSE_GET_OR_CREATE_ROTATIONTASK_ACTIVE_KEY = 1583;</code>
     */
    public static final int RESPONSE_GET_OR_CREATE_ROTATIONTASK_ACTIVE_KEY_VALUE = 1583;
    /**
     * <code>REQUEST_SET_ROTATIONTASK_ACTIVE_KEY = 1584;</code>
     */
    public static final int REQUEST_SET_ROTATIONTASK_ACTIVE_KEY_VALUE = 1584;
    /**
     * <code>RESPONSE_SET_ROTATIONTASK_ACTIVE_KEY = 1585;</code>
     *
     * <pre>
     *===== end ROTATIONTASK commands====
     * </pre>
     */
    public static final int RESPONSE_SET_ROTATIONTASK_ACTIVE_KEY_VALUE = 1585;
    /**
     * <code>REQUEST_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD = 1606;</code>
     *
     * <pre>
     *==== ACTIVE MASTER ROTATION KEY RECORD COMMANDS ====
     * </pre>
     */
    public static final int REQUEST_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD_VALUE = 1606;
    /**
     * <code>RESPONSE_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD = 1607;</code>
     */
    public static final int RESPONSE_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD_VALUE = 1607;
    /**
     * <code>REQUEST_GET_ACTIVE_ROTATION_MASTER_KEY_RECORD = 1608;</code>
     */
    public static final int REQUEST_GET_ACTIVE_ROTATION_MASTER_KEY_RECORD_VALUE = 1608;
    /**
     * <code>RESPONSE_GET_ACTIVE_ROTATION_MASTER_KEY_RECORD = 1609;</code>
     *
     * <pre>
     *==== END ACTIVE MASTER ROTATION KEY RECORD COMMANDS ====
     * </pre>
     */
    public static final int RESPONSE_GET_ACTIVE_ROTATION_MASTER_KEY_RECORD_VALUE = 1609;
    /**
     * <code>REQUEST_CREATE_KEY_ROTATION_EVENT = 1612;</code>
     *
     * <pre>
     *==== KEY ROTATION EVENT COMMANDS ====
     * </pre>
     */
    public static final int REQUEST_CREATE_KEY_ROTATION_EVENT_VALUE = 1612;
    /**
     * <code>RESPONSE_CREATE_KEY_ROTATION_EVENT = 1613;</code>
     */
    public static final int RESPONSE_CREATE_KEY_ROTATION_EVENT_VALUE = 1613;
    /**
     * <code>REQUEST_GET_KEY_ROTATION_EVENT = 1614;</code>
     */
    public static final int REQUEST_GET_KEY_ROTATION_EVENT_VALUE = 1614;
    /**
     * <code>RESPONSE_GET_KEY_ROTATION_EVENT = 1615;</code>
     */
    public static final int RESPONSE_GET_KEY_ROTATION_EVENT_VALUE = 1615;
    /**
     * <code>REQUEST_UPDATE_KEY_ROTATION_EVENT = 1616;</code>
     */
    public static final int REQUEST_UPDATE_KEY_ROTATION_EVENT_VALUE = 1616;
    /**
     * <code>RESPONSE_UPDATE_KEY_ROTATION_EVENT = 1617;</code>
     */
    public static final int RESPONSE_UPDATE_KEY_ROTATION_EVENT_VALUE = 1617;
    /**
     * <code>REQUEST_LIST_KEY_ROTATION_EVENT = 1618;</code>
     */
    public static final int REQUEST_LIST_KEY_ROTATION_EVENT_VALUE = 1618;
    /**
     * <code>RESPONSE_LIST_KEY_ROTATION_EVENT = 1619;</code>
     *
     * <pre>
     *==== END KEY ROTATION_EVENT COMMANDS ====
     * </pre>
     */
    public static final int RESPONSE_LIST_KEY_ROTATION_EVENT_VALUE = 1619;
    /**
     * <code>REQUEST_NAMESPACE_REWRAP_TASK_CREATE = 1624;</code>
     *
     * <pre>
     *==== NAMESPACE REWRAP TASK KEY COMMANDS ====
     * </pre>
     */
    public static final int REQUEST_NAMESPACE_REWRAP_TASK_CREATE_VALUE = 1624;
    /**
     * <code>RESPONSE_NAMESPACE_REWRAP_TASK_CREATE = 1625;</code>
     */
    public static final int RESPONSE_NAMESPACE_REWRAP_TASK_CREATE_VALUE = 1625;
    /**
     * <code>REQUEST_NAMESPACE_REWRAP_TASK_GET = 1626;</code>
     */
    public static final int REQUEST_NAMESPACE_REWRAP_TASK_GET_VALUE = 1626;
    /**
     * <code>RESPONSE_NAMESPACE_REWRAP_TASK_GET = 1627;</code>
     */
    public static final int RESPONSE_NAMESPACE_REWRAP_TASK_GET_VALUE = 1627;
    /**
     * <code>REQUEST_NAMESPACE_REWRAP_TASK_UPDATE = 1628;</code>
     */
    public static final int REQUEST_NAMESPACE_REWRAP_TASK_UPDATE_VALUE = 1628;
    /**
     * <code>RESPONSE_NAMESPACE_REWRAP_TASK_UPDATE = 1629;</code>
     */
    public static final int RESPONSE_NAMESPACE_REWRAP_TASK_UPDATE_VALUE = 1629;
    /**
     * <code>REQUEST_NAMESPACE_REWRAP_TASK_DELETE = 1630;</code>
     */
    public static final int REQUEST_NAMESPACE_REWRAP_TASK_DELETE_VALUE = 1630;
    /**
     * <code>RESPONSE_NAMESPACE_REWRAP_TASK_DELETE = 1631;</code>
     */
    public static final int RESPONSE_NAMESPACE_REWRAP_TASK_DELETE_VALUE = 1631;
    /**
     * <code>REQUEST_NAMESPACE_REWRAP_TASK_LIST = 1632;</code>
     */
    public static final int REQUEST_NAMESPACE_REWRAP_TASK_LIST_VALUE = 1632;
    /**
     * <code>RESPONSE_NAMESPACE_REWRAP_TASK_LIST = 1633;</code>
     *
     * <pre>
     *==== END NAMESPACE REWRAP TASK KEY COMMANDS ====
     * </pre>
     */
    public static final int RESPONSE_NAMESPACE_REWRAP_TASK_LIST_VALUE = 1633;
    /**
     * <code>REQUEST_EKMCLUSTER_STATUS_ACTIVATE = 1634;</code>
     *
     * <pre>
     *==== EKMCLUSTER ACTIVATION COMMANDS ====
     * </pre>
     */
    public static final int REQUEST_EKMCLUSTER_STATUS_ACTIVATE_VALUE = 1634;
    /**
     * <code>RESPONSE_EKMCLUSTER_STATUS_ACTIVATE = 1635;</code>
     */
    public static final int RESPONSE_EKMCLUSTER_STATUS_ACTIVATE_VALUE = 1635;
    /**
     * <code>REQUEST_EKMCLUSTER_STATUS_DEACTIVATE = 1636;</code>
     */
    public static final int REQUEST_EKMCLUSTER_STATUS_DEACTIVATE_VALUE = 1636;
    /**
     * <code>RESPONSE_EKMCLUSTER_STATUS_DEACTIVATE = 1637;</code>
     *
     * <pre>
     *==== END EKMCLUSTER ACTIVATION COMMANDS ====
     * </pre>
     */
    public static final int RESPONSE_EKMCLUSTER_STATUS_DEACTIVATE_VALUE = 1637;
    /**
     * <code>REQUEST_SET_ACTIVE_ROTATION_KEY_RECORD = 1638;</code>
     *
     * <pre>
     *==== ACTIVE ROTATION KEY RECORD COMMANDS ====
     * </pre>
     */
    public static final int REQUEST_SET_ACTIVE_ROTATION_KEY_RECORD_VALUE = 1638;
    /**
     * <code>RESPONSE_SET_ACTIVE_ROTATION_KEY_RECORD = 1639;</code>
     */
    public static final int RESPONSE_SET_ACTIVE_ROTATION_KEY_RECORD_VALUE = 1639;
    /**
     * <code>REQUEST_GET_ACTIVE_ROTATION_KEY_RECORD = 1640;</code>
     */
    public static final int REQUEST_GET_ACTIVE_ROTATION_KEY_RECORD_VALUE = 1640;
    /**
     * <code>RESPONSE_GET_ACTIVE_ROTATION_KEY_RECORD = 1641;</code>
     */
    public static final int RESPONSE_GET_ACTIVE_ROTATION_KEY_RECORD_VALUE = 1641;
    /**
     * <code>REQUEST_ROTATE_ACTIVE_ROTATION_KEY_RECORD = 1642;</code>
     */
    public static final int REQUEST_ROTATE_ACTIVE_ROTATION_KEY_RECORD_VALUE = 1642;
    /**
     * <code>RESPONSE_ROTATE_ACTIVE_ROTATION_KEY_RECORD = 1643;</code>
     *
     * <pre>
     *==== END ACTIVE ROTATION KEY RECORD COMMANDS ====
     * </pre>
     */
    public static final int RESPONSE_ROTATE_ACTIVE_ROTATION_KEY_RECORD_VALUE = 1643;
    /**
     * <code>REQUEST_PROCESS_BULK_ALERT_ACK = 1644;</code>
     */
    public static final int REQUEST_PROCESS_BULK_ALERT_ACK_VALUE = 1644;
    /**
     * <code>RESPONSE_PROCESS_BULK_ALERT_ACK = 1645;</code>
     */
    public static final int RESPONSE_PROCESS_BULK_ALERT_ACK_VALUE = 1645;
    /**
     * <code>REQUEST_GET_ALERT_STATS = 1646;</code>
     */
    public static final int REQUEST_GET_ALERT_STATS_VALUE = 1646;
    /**
     * <code>RESPONSE_GET_ALERT_STATS = 1647;</code>
     */
    public static final int RESPONSE_GET_ALERT_STATS_VALUE = 1647;
    /**
     * <code>REQUEST_GET_BPLUSTREE_FOR_BTREE_GC = 1648;</code>
     */
    public static final int REQUEST_GET_BPLUSTREE_FOR_BTREE_GC_VALUE = 1648;
    /**
     * <code>RESPONSE_GET_BPLUSTREE_FOR_BTREE_GC = 1649;</code>
     */
    public static final int RESPONSE_GET_BPLUSTREE_FOR_BTREE_GC_VALUE = 1649;
    /**
     * <code>REQUEST_DT_SYNC_ADOPTED_TREE_ATTACH = 1656;</code>
     */
    public static final int REQUEST_DT_SYNC_ADOPTED_TREE_ATTACH_VALUE = 1656;
    /**
     * <code>REQUEST_LIST_CLEAN_UP_JOB = 1658;</code>
     */
    public static final int REQUEST_LIST_CLEAN_UP_JOB_VALUE = 1658;
    /**
     * <code>RESPONSE_LIST_CLEAN_UP_JOB = 1659;</code>
     */
    public static final int RESPONSE_LIST_CLEAN_UP_JOB_VALUE = 1659;
    /**
     * <code>REQUEST_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME = 1660;</code>
     */
    public static final int REQUEST_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME_VALUE = 1660;
    /**
     * <code>RESPONSE_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME = 1661;</code>
     */
    public static final int RESPONSE_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME_VALUE = 1661;
    /**
     * <code>REQUEST_CREATE_BULK_ALERT_ACK_KEY = 1662;</code>
     */
    public static final int REQUEST_CREATE_BULK_ALERT_ACK_KEY_VALUE = 1662;
    /**
     * <code>RESPONSE_CREATE_BULK_ALERT_ACK_KEY = 1663;</code>
     */
    public static final int RESPONSE_CREATE_BULK_ALERT_ACK_KEY_VALUE = 1663;
    /**
     * <code>REQUEST_GET_BULK_ALERT_ACK_KEY = 1664;</code>
     */
    public static final int REQUEST_GET_BULK_ALERT_ACK_KEY_VALUE = 1664;
    /**
     * <code>RESPONSE_GET_BULK_ALERT_ACK_KEY = 1665;</code>
     */
    public static final int RESPONSE_GET_BULK_ALERT_ACK_KEY_VALUE = 1665;
    /**
     * <code>REQUEST_CLEAR_BULK_ALERT_ACK_KEY = 1666;</code>
     */
    public static final int REQUEST_CLEAR_BULK_ALERT_ACK_KEY_VALUE = 1666;
    /**
     * <code>RESPONSE_CLEAR_BULK_ALERT_ACK_KEY = 1667;</code>
     */
    public static final int RESPONSE_CLEAR_BULK_ALERT_ACK_KEY_VALUE = 1667;
    /**
     * <code>REQUEST_PROCESS_BULK_ALERT_ACK_KEY = 1668;</code>
     */
    public static final int REQUEST_PROCESS_BULK_ALERT_ACK_KEY_VALUE = 1668;
    /**
     * <code>RESPONSE_PROCESS_BULK_ALERT_ACK_KEY = 1669;</code>
     */
    public static final int RESPONSE_PROCESS_BULK_ALERT_ACK_KEY_VALUE = 1669;
    /**
     * <code>REQUEST_UPDATE_BULK_ALERT_ACK_KEY = 1670;</code>
     */
    public static final int REQUEST_UPDATE_BULK_ALERT_ACK_KEY_VALUE = 1670;
    /**
     * <code>RESPONSE_UPDATE_BULK_ALERT_ACK_KEY = 1671;</code>
     */
    public static final int RESPONSE_UPDATE_BULK_ALERT_ACK_KEY_VALUE = 1671;
    /**
     * <code>REQUEST_INSERT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS = 1672;</code>
     */
    public static final int REQUEST_INSERT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS_VALUE = 1672;
    /**
     * <code>RESPONSE_INSERT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS = 1673;</code>
     */
    public static final int RESPONSE_INSERT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS_VALUE = 1673;
    /**
     * <code>REQUEST_LISTING_REPLICATION_INFO = 1674;</code>
     */
    public static final int REQUEST_LISTING_REPLICATION_INFO_VALUE = 1674;
    /**
     * <code>RESPONSE_LISTING_REPLICATION_INFO = 1675;</code>
     */
    public static final int RESPONSE_LISTING_REPLICATION_INFO_VALUE = 1675;
    /**
     * <code>REQUEST_GEO_CHECK_LISTING_INDEX_REPLICATION = 1676;</code>
     */
    public static final int REQUEST_GEO_CHECK_LISTING_INDEX_REPLICATION_VALUE = 1676;
    /**
     * <code>RESPONSE_GEO_CHECK_LISTING_INDEX_REPLICATION = 1677;</code>
     */
    public static final int RESPONSE_GEO_CHECK_LISTING_INDEX_REPLICATION_VALUE = 1677;
    /**
     * <code>REQUEST_GET_LAST_PAGE_TABLE_JOURNAL_REGION = 1678;</code>
     */
    public static final int REQUEST_GET_LAST_PAGE_TABLE_JOURNAL_REGION_VALUE = 1678;
    /**
     * <code>RESPONSE_GET_LAST_PAGE_TABLE_JOURNAL_REGION = 1679;</code>
     */
    public static final int RESPONSE_GET_LAST_PAGE_TABLE_JOURNAL_REGION_VALUE = 1679;
    /**
     * <code>REQUEST_LIST_PAGE_TABLE_BASE_RECORD = 1680;</code>
     */
    public static final int REQUEST_LIST_PAGE_TABLE_BASE_RECORD_VALUE = 1680;
    /**
     * <code>RESPONSE_LIST_PAGE_TABLE_BASE_RECORD = 1681;</code>
     */
    public static final int RESPONSE_LIST_PAGE_TABLE_BASE_RECORD_VALUE = 1681;
    /**
     * <code>REQUEST_LIST_PAGE_TABLE_JOURNAL_REGION = 1682;</code>
     */
    public static final int REQUEST_LIST_PAGE_TABLE_JOURNAL_REGION_VALUE = 1682;
    /**
     * <code>RESPONSE_LIST_PAGE_TABLE_JOURNAL_REGION = 1683;</code>
     */
    public static final int RESPONSE_LIST_PAGE_TABLE_JOURNAL_REGION_VALUE = 1683;
    /**
     * <code>REQUEST_DELETE_PAGE_TABLE_JOURNAL_AND_BASE = 1684;</code>
     */
    public static final int REQUEST_DELETE_PAGE_TABLE_JOURNAL_AND_BASE_VALUE = 1684;
    /**
     * <code>RESPONSE_DELETE_PAGE_TABLE_JOURNAL_AND_BASE = 1685;</code>
     */
    public static final int RESPONSE_DELETE_PAGE_TABLE_JOURNAL_AND_BASE_VALUE = 1685;
    /**
     * <code>REQUEST_LIST_PAGE_TABLE_BASE_INDEX_RECORD = 1686;</code>
     */
    public static final int REQUEST_LIST_PAGE_TABLE_BASE_INDEX_RECORD_VALUE = 1686;
    /**
     * <code>RESPONSE_LIST_PAGE_TABLE_BASE_INDEX_RECORD = 1687;</code>
     */
    public static final int RESPONSE_LIST_PAGE_TABLE_BASE_INDEX_RECORD_VALUE = 1687;
    /**
     * <code>REQUEST_GET_LAST_PAGE_TABLE_BASE_INDEX_RECORD = 1688;</code>
     */
    public static final int REQUEST_GET_LAST_PAGE_TABLE_BASE_INDEX_RECORD_VALUE = 1688;
    /**
     * <code>RESPONSE_GET_LAST_PAGE_TABLE_BASE_INDEX_RECORD = 1689;</code>
     */
    public static final int RESPONSE_GET_LAST_PAGE_TABLE_BASE_INDEX_RECORD_VALUE = 1689;
    /**
     * <code>REQUEST_INSERT_REMOTE_PAGE_TABLE_REGION_IN_BATCH = 1690;</code>
     */
    public static final int REQUEST_INSERT_REMOTE_PAGE_TABLE_REGION_IN_BATCH_VALUE = 1690;
    /**
     * <code>RESPONSE_INSERT_REMOTE_PAGE_TABLE_REGION_IN_BATCH = 1691;</code>
     */
    public static final int RESPONSE_INSERT_REMOTE_PAGE_TABLE_REGION_IN_BATCH_VALUE = 1691;
    /**
     * <code>REQUEST_INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_BATCH = 1692;</code>
     */
    public static final int REQUEST_INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_BATCH_VALUE = 1692;
    /**
     * <code>RESPONSE_INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_BATCH = 1693;</code>
     */
    public static final int RESPONSE_INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_BATCH_VALUE = 1693;
    /**
     * <code>REQUEST_SET_BULK_ALERT_ACK = 1694;</code>
     */
    public static final int REQUEST_SET_BULK_ALERT_ACK_VALUE = 1694;
    /**
     * <code>RESPONSE_SET_BULK_ALERT_ACK = 1695;</code>
     */
    public static final int RESPONSE_SET_BULK_ALERT_ACK_VALUE = 1695;
    /**
     * <code>REQUEST_PAGE_TABLE_BASE_SYNC = 1696;</code>
     */
    public static final int REQUEST_PAGE_TABLE_BASE_SYNC_VALUE = 1696;
    /**
     * <code>RESPONSE_PAGE_TABLE_BASE_SYNC = 1697;</code>
     */
    public static final int RESPONSE_PAGE_TABLE_BASE_SYNC_VALUE = 1697;
    /**
     * <code>REQUEST_DT_RESET_PAGE_TABLE_MODE = 1698;</code>
     */
    public static final int REQUEST_DT_RESET_PAGE_TABLE_MODE_VALUE = 1698;
    /**
     * <code>RESPONSE_DT_RESET_PAGE_TABLE_MODE = 1699;</code>
     */
    public static final int RESPONSE_DT_RESET_PAGE_TABLE_MODE_VALUE = 1699;
    /**
     * <code>REQUEST_LISTING_SWITCH_TASKS_PROGRESS = 1700;</code>
     */
    public static final int REQUEST_LISTING_SWITCH_TASKS_PROGRESS_VALUE = 1700;
    /**
     * <code>RESPONSE_LISTING_SWITCH_TASKS_PROGRESS = 1701;</code>
     */
    public static final int RESPONSE_LISTING_SWITCH_TASKS_PROGRESS_VALUE = 1701;
    /**
     * <code>REQUEST_REMOTE_DT_BOOTSTRAP_STATUS = 1702;</code>
     */
    public static final int REQUEST_REMOTE_DT_BOOTSTRAP_STATUS_VALUE = 1702;
    /**
     * <code>RESPONSE_REMOTE_DT_BOOTSTRAP_STATUS = 1703;</code>
     */
    public static final int RESPONSE_REMOTE_DT_BOOTSTRAP_STATUS_VALUE = 1703;
    /**
     * <code>REQUEST_GET_ADDRESS_FOR_PAGE_TABLE_ID = 1704;</code>
     */
    public static final int REQUEST_GET_ADDRESS_FOR_PAGE_TABLE_ID_VALUE = 1704;
    /**
     * <code>RESPONSE_GET_ADDRESS_FOR_PAGE_TABLE_ID = 1705;</code>
     */
    public static final int RESPONSE_GET_ADDRESS_FOR_PAGE_TABLE_ID_VALUE = 1705;
    /**
     * <code>REQUEST_CREATE_SAN_DEVICE = 1706;</code>
     *
     * <pre>
     *Added for ECS-Flex vSan
     * </pre>
     */
    public static final int REQUEST_CREATE_SAN_DEVICE_VALUE = 1706;
    /**
     * <code>RESPONSE_CREATE_SAN_DEVICE = 1707;</code>
     */
    public static final int RESPONSE_CREATE_SAN_DEVICE_VALUE = 1707;
    /**
     * <code>REQUEST_CREATE_SAN_DEVICE_TO_OWNER = 1708;</code>
     *
     * <pre>
     *sent to the device owner
     * </pre>
     */
    public static final int REQUEST_CREATE_SAN_DEVICE_TO_OWNER_VALUE = 1708;
    /**
     * <code>RESPONSE_CREATE_SAN_DEVICE_FROM_OWNER = 1709;</code>
     */
    public static final int RESPONSE_CREATE_SAN_DEVICE_FROM_OWNER_VALUE = 1709;
    /**
     * <code>REQUEST_AGGREGATION_PUBLISH_TOP_N = 1710;</code>
     */
    public static final int REQUEST_AGGREGATION_PUBLISH_TOP_N_VALUE = 1710;
    /**
     * <code>RESPONSE_AGGREGATION_PUBLISH_TOP_N = 1711;</code>
     */
    public static final int RESPONSE_AGGREGATION_PUBLISH_TOP_N_VALUE = 1711;
    /**
     * <code>REQUEST_UPDATE_PARTITION_TOTALSPACE = 1712;</code>
     */
    public static final int REQUEST_UPDATE_PARTITION_TOTALSPACE_VALUE = 1712;
    /**
     * <code>RESPONSE_UPDATE_PARTITION_TOTALSPACE = 1713;</code>
     */
    public static final int RESPONSE_UPDATE_PARTITION_TOTALSPACE_VALUE = 1713;
    /**
     * <code>REQUEST_XOR_DECODE_FOR_DTQUERY = 1714;</code>
     *
     * <pre>
     * XOR Decode for Dtquery
     * </pre>
     */
    public static final int REQUEST_XOR_DECODE_FOR_DTQUERY_VALUE = 1714;
    /**
     * <code>RESPONSE_XOR_DECODE_FOR_DTQUERY = 1715;</code>
     */
    public static final int RESPONSE_XOR_DECODE_FOR_DTQUERY_VALUE = 1715;
    /**
     * <code>REQUEST_DATA_MIGRATION_STATUS_KEY_CREATE = 1716;</code>
     *
     * <pre>
     *==== DATA_MIGRATION COMMANDS ====
     * </pre>
     */
    public static final int REQUEST_DATA_MIGRATION_STATUS_KEY_CREATE_VALUE = 1716;
    /**
     * <code>RESPONSE_DATA_MIGRATION_STATUS_KEY_CREATE = 1717;</code>
     */
    public static final int RESPONSE_DATA_MIGRATION_STATUS_KEY_CREATE_VALUE = 1717;
    /**
     * <code>REQUEST_DATA_MIGRATION_STATUS_KEY_DELETE = 1718;</code>
     */
    public static final int REQUEST_DATA_MIGRATION_STATUS_KEY_DELETE_VALUE = 1718;
    /**
     * <code>RESPONSE_DATA_MIGRATION_STATUS_KEY_DELETE = 1719;</code>
     */
    public static final int RESPONSE_DATA_MIGRATION_STATUS_KEY_DELETE_VALUE = 1719;
    /**
     * <code>REQUEST_DATA_MIGRATION_STATUS_KEY_GET = 1720;</code>
     */
    public static final int REQUEST_DATA_MIGRATION_STATUS_KEY_GET_VALUE = 1720;
    /**
     * <code>RESPONSE_DATA_MIGRATION_STATUS_KEY_GET = 1721;</code>
     */
    public static final int RESPONSE_DATA_MIGRATION_STATUS_KEY_GET_VALUE = 1721;
    /**
     * <code>REQUEST_DATA_MIGRATION_UPDATE_CHUNK = 1722;</code>
     */
    public static final int REQUEST_DATA_MIGRATION_UPDATE_CHUNK_VALUE = 1722;
    /**
     * <code>RESPONSE_DATA_MIGRATION_UPDATE_CHUNK = 1723;</code>
     */
    public static final int RESPONSE_DATA_MIGRATION_UPDATE_CHUNK_VALUE = 1723;
    /**
     * <code>REQUEST_ALLOCATE_BLOCK_MIGRATION = 1724;</code>
     */
    public static final int REQUEST_ALLOCATE_BLOCK_MIGRATION_VALUE = 1724;
    /**
     * <code>RESPONSE_ALLOCATE_BLOCK_MIGRATION = 1725;</code>
     */
    public static final int RESPONSE_ALLOCATE_BLOCK_MIGRATION_VALUE = 1725;
    /**
     * <code>REQUEST_SEAL_LOCAL_CHUNK_MIGRATION = 1726;</code>
     */
    public static final int REQUEST_SEAL_LOCAL_CHUNK_MIGRATION_VALUE = 1726;
    /**
     * <code>RESPONSE_SEAL_LOCAL_CHUNK_MIGRATION = 1727;</code>
     */
    public static final int RESPONSE_SEAL_LOCAL_CHUNK_MIGRATION_VALUE = 1727;
    /**
     * <code>REQUEST_GET_MIGRATE_SEQUENCE = 1728;</code>
     */
    public static final int REQUEST_GET_MIGRATE_SEQUENCE_VALUE = 1728;
    /**
     * <code>RESPONSE_GET_MIGRATE_SEQUENCE = 1729;</code>
     */
    public static final int RESPONSE_GET_MIGRATE_SEQUENCE_VALUE = 1729;
    /**
     * <code>REQUEST_SET_MIGRATION_STATUS = 1730;</code>
     */
    public static final int REQUEST_SET_MIGRATION_STATUS_VALUE = 1730;
    /**
     * <code>RESPONSE_SET_MIGRATION_STATUS = 1731;</code>
     */
    public static final int RESPONSE_SET_MIGRATION_STATUS_VALUE = 1731;
    /**
     * <code>REQUEST_IAMUSER_GET = 1732;</code>
     *
     * <pre>
     *===== IAMUSER commands===
     * </pre>
     */
    public static final int REQUEST_IAMUSER_GET_VALUE = 1732;
    /**
     * <code>RESPONSE_IAMUSER_GET = 1733;</code>
     */
    public static final int RESPONSE_IAMUSER_GET_VALUE = 1733;
    /**
     * <code>REQUEST_IAMUSER_LIST = 1734;</code>
     */
    public static final int REQUEST_IAMUSER_LIST_VALUE = 1734;
    /**
     * <code>RESPONSE_IAMUSER_LIST = 1735;</code>
     */
    public static final int RESPONSE_IAMUSER_LIST_VALUE = 1735;
    /**
     * <code>REQUEST_IAMUSER_DELETE = 1736;</code>
     */
    public static final int REQUEST_IAMUSER_DELETE_VALUE = 1736;
    /**
     * <code>RESPONSE_IAMUSER_DELETE = 1737;</code>
     */
    public static final int RESPONSE_IAMUSER_DELETE_VALUE = 1737;
    /**
     * <code>REQUEST_IAMUSER_UPDATE = 1738;</code>
     */
    public static final int REQUEST_IAMUSER_UPDATE_VALUE = 1738;
    /**
     * <code>RESPONSE_IAMUSER_UPDATE = 1739;</code>
     */
    public static final int RESPONSE_IAMUSER_UPDATE_VALUE = 1739;
    /**
     * <code>REQUEST_IAMUSER_CREATE = 1740;</code>
     */
    public static final int REQUEST_IAMUSER_CREATE_VALUE = 1740;
    /**
     * <code>RESPONSE_IAMUSER_CREATE = 1741;</code>
     *
     * <pre>
     *===== end IAMUSER commands====
     * </pre>
     */
    public static final int RESPONSE_IAMUSER_CREATE_VALUE = 1741;
    /**
     * <code>REQUEST_IAMGROUP_GET = 1742;</code>
     *
     * <pre>
     *===== IAMGROUP commands===
     * </pre>
     */
    public static final int REQUEST_IAMGROUP_GET_VALUE = 1742;
    /**
     * <code>RESPONSE_IAMGROUP_GET = 1743;</code>
     */
    public static final int RESPONSE_IAMGROUP_GET_VALUE = 1743;
    /**
     * <code>REQUEST_IAMGROUP_LIST = 1744;</code>
     */
    public static final int REQUEST_IAMGROUP_LIST_VALUE = 1744;
    /**
     * <code>RESPONSE_IAMGROUP_LIST = 1745;</code>
     */
    public static final int RESPONSE_IAMGROUP_LIST_VALUE = 1745;
    /**
     * <code>REQUEST_IAMGROUP_DELETE = 1746;</code>
     */
    public static final int REQUEST_IAMGROUP_DELETE_VALUE = 1746;
    /**
     * <code>RESPONSE_IAMGROUP_DELETE = 1747;</code>
     */
    public static final int RESPONSE_IAMGROUP_DELETE_VALUE = 1747;
    /**
     * <code>REQUEST_IAMGROUP_UPDATE = 1748;</code>
     */
    public static final int REQUEST_IAMGROUP_UPDATE_VALUE = 1748;
    /**
     * <code>RESPONSE_IAMGROUP_UPDATE = 1749;</code>
     */
    public static final int RESPONSE_IAMGROUP_UPDATE_VALUE = 1749;
    /**
     * <code>REQUEST_IAMGROUP_CREATE = 1750;</code>
     */
    public static final int REQUEST_IAMGROUP_CREATE_VALUE = 1750;
    /**
     * <code>RESPONSE_IAMGROUP_CREATE = 1751;</code>
     *
     * <pre>
     *===== end IAMGROUP commands====
     * </pre>
     */
    public static final int RESPONSE_IAMGROUP_CREATE_VALUE = 1751;
    /**
     * <code>REQUEST_IAMROLE_GET = 1752;</code>
     *
     * <pre>
     *===== IAMROLE commands===
     * </pre>
     */
    public static final int REQUEST_IAMROLE_GET_VALUE = 1752;
    /**
     * <code>RESPONSE_IAMROLE_GET = 1753;</code>
     */
    public static final int RESPONSE_IAMROLE_GET_VALUE = 1753;
    /**
     * <code>REQUEST_IAMROLE_LIST = 1754;</code>
     */
    public static final int REQUEST_IAMROLE_LIST_VALUE = 1754;
    /**
     * <code>RESPONSE_IAMROLE_LIST = 1755;</code>
     */
    public static final int RESPONSE_IAMROLE_LIST_VALUE = 1755;
    /**
     * <code>REQUEST_IAMROLE_DELETE = 1756;</code>
     */
    public static final int REQUEST_IAMROLE_DELETE_VALUE = 1756;
    /**
     * <code>RESPONSE_IAMROLE_DELETE = 1757;</code>
     */
    public static final int RESPONSE_IAMROLE_DELETE_VALUE = 1757;
    /**
     * <code>REQUEST_IAMROLE_UPDATE = 1758;</code>
     */
    public static final int REQUEST_IAMROLE_UPDATE_VALUE = 1758;
    /**
     * <code>RESPONSE_IAMROLE_UPDATE = 1759;</code>
     */
    public static final int RESPONSE_IAMROLE_UPDATE_VALUE = 1759;
    /**
     * <code>REQUEST_IAMROLE_CREATE = 1760;</code>
     */
    public static final int REQUEST_IAMROLE_CREATE_VALUE = 1760;
    /**
     * <code>RESPONSE_IAMROLE_CREATE = 1761;</code>
     *
     * <pre>
     *===== end IAMROLE commands====
     * </pre>
     */
    public static final int RESPONSE_IAMROLE_CREATE_VALUE = 1761;
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_LIST = 1762;</code>
     *
     * <pre>
     *===== IAMUSER commands===
     * </pre>
     */
    public static final int REQUEST_IAMUSER_ACCESS_KEY_LIST_VALUE = 1762;
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_LIST = 1763;</code>
     */
    public static final int RESPONSE_IAMUSER_ACCESS_KEY_LIST_VALUE = 1763;
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_DELETE = 1764;</code>
     */
    public static final int REQUEST_IAMUSER_ACCESS_KEY_DELETE_VALUE = 1764;
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_DELETE = 1765;</code>
     */
    public static final int RESPONSE_IAMUSER_ACCESS_KEY_DELETE_VALUE = 1765;
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_UPDATE = 1766;</code>
     */
    public static final int REQUEST_IAMUSER_ACCESS_KEY_UPDATE_VALUE = 1766;
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_UPDATE = 1767;</code>
     */
    public static final int RESPONSE_IAMUSER_ACCESS_KEY_UPDATE_VALUE = 1767;
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_GET = 1768;</code>
     */
    public static final int REQUEST_IAMUSER_ACCESS_KEY_GET_VALUE = 1768;
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_GET = 1769;</code>
     */
    public static final int RESPONSE_IAMUSER_ACCESS_KEY_GET_VALUE = 1769;
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_CREATE = 1770;</code>
     */
    public static final int REQUEST_IAMUSER_ACCESS_KEY_CREATE_VALUE = 1770;
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_CREATE = 1771;</code>
     *
     * <pre>
     *===== end IAMUSER commands====
     * </pre>
     */
    public static final int RESPONSE_IAMUSER_ACCESS_KEY_CREATE_VALUE = 1771;
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_GET = 1772;</code>
     *
     * <pre>
     *===== IAMMANAGEDPOLICY commands===
     * </pre>
     */
    public static final int REQUEST_IAMMANAGEDPOLICY_GET_VALUE = 1772;
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_GET = 1773;</code>
     */
    public static final int RESPONSE_IAMMANAGEDPOLICY_GET_VALUE = 1773;
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_LIST = 1774;</code>
     */
    public static final int REQUEST_IAMMANAGEDPOLICY_LIST_VALUE = 1774;
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_LIST = 1775;</code>
     */
    public static final int RESPONSE_IAMMANAGEDPOLICY_LIST_VALUE = 1775;
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_DELETE = 1776;</code>
     */
    public static final int REQUEST_IAMMANAGEDPOLICY_DELETE_VALUE = 1776;
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_DELETE = 1777;</code>
     */
    public static final int RESPONSE_IAMMANAGEDPOLICY_DELETE_VALUE = 1777;
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_UPDATE = 1778;</code>
     */
    public static final int REQUEST_IAMMANAGEDPOLICY_UPDATE_VALUE = 1778;
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_UPDATE = 1779;</code>
     */
    public static final int RESPONSE_IAMMANAGEDPOLICY_UPDATE_VALUE = 1779;
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_VERSION_DELETE = 1780;</code>
     */
    public static final int REQUEST_IAMMANAGEDPOLICY_VERSION_DELETE_VALUE = 1780;
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_VERSION_DELETE = 1781;</code>
     */
    public static final int RESPONSE_IAMMANAGEDPOLICY_VERSION_DELETE_VALUE = 1781;
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_SET_DEFAULT_VERSION = 1782;</code>
     */
    public static final int REQUEST_IAMMANAGEDPOLICY_SET_DEFAULT_VERSION_VALUE = 1782;
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_SET_DEFAULT_VERSION = 1783;</code>
     */
    public static final int RESPONSE_IAMMANAGEDPOLICY_SET_DEFAULT_VERSION_VALUE = 1783;
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_VERSION_GET = 1784;</code>
     */
    public static final int REQUEST_IAMMANAGEDPOLICY_VERSION_GET_VALUE = 1784;
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_VERSION_GET = 1785;</code>
     */
    public static final int RESPONSE_IAMMANAGEDPOLICY_VERSION_GET_VALUE = 1785;
    /**
     * <code>REQUEST_IAM_MANAGED_ENTRY_LIST = 1786;</code>
     */
    public static final int REQUEST_IAM_MANAGED_ENTRY_LIST_VALUE = 1786;
    /**
     * <code>RESPONSE_IAM_MANAGED_ENTRY_LIST = 1787;</code>
     */
    public static final int RESPONSE_IAM_MANAGED_ENTRY_LIST_VALUE = 1787;
    /**
     * <code>REQUEST_IAMMANAGEDPOLICY_CREATE = 1788;</code>
     */
    public static final int REQUEST_IAMMANAGEDPOLICY_CREATE_VALUE = 1788;
    /**
     * <code>RESPONSE_IAMMANAGEDPOLICY_CREATE = 1789;</code>
     *
     * <pre>
     *===== end IAMMANAGEDPOLICY commands====
     * </pre>
     */
    public static final int RESPONSE_IAMMANAGEDPOLICY_CREATE_VALUE = 1789;
    /**
     * <code>REQUEST_IAMPROVIDER_CREATE = 1790;</code>
     *
     * <pre>
     *===== IAMPROVIDER commands===
     * </pre>
     */
    public static final int REQUEST_IAMPROVIDER_CREATE_VALUE = 1790;
    /**
     * <code>RESPONSE_IAMPROVIDER_CREATE = 1791;</code>
     */
    public static final int RESPONSE_IAMPROVIDER_CREATE_VALUE = 1791;
    /**
     * <code>REQUEST_IAMPROVIDER_GET = 1792;</code>
     */
    public static final int REQUEST_IAMPROVIDER_GET_VALUE = 1792;
    /**
     * <code>RESPONSE_IAMPROVIDER_GET = 1793;</code>
     */
    public static final int RESPONSE_IAMPROVIDER_GET_VALUE = 1793;
    /**
     * <code>REQUEST_IAMPROVIDER_LIST = 1794;</code>
     */
    public static final int REQUEST_IAMPROVIDER_LIST_VALUE = 1794;
    /**
     * <code>RESPONSE_IAMPROVIDER_LIST = 1795;</code>
     */
    public static final int RESPONSE_IAMPROVIDER_LIST_VALUE = 1795;
    /**
     * <code>REQUEST_IAMPROVIDER_DELETE = 1796;</code>
     */
    public static final int REQUEST_IAMPROVIDER_DELETE_VALUE = 1796;
    /**
     * <code>RESPONSE_IAMPROVIDER_DELETE = 1797;</code>
     */
    public static final int RESPONSE_IAMPROVIDER_DELETE_VALUE = 1797;
    /**
     * <code>REQUEST_IAMPROVIDER_UPDATE = 1798;</code>
     */
    public static final int REQUEST_IAMPROVIDER_UPDATE_VALUE = 1798;
    /**
     * <code>RESPONSE_IAMPROVIDER_UPDATE = 1799;</code>
     *
     * <pre>
     *===== end IAMPROVIDER commands====
     * </pre>
     */
    public static final int RESPONSE_IAMPROVIDER_UPDATE_VALUE = 1799;
    /**
     * <code>REQUEST_IAMSERVICEPROVIDER_CREATE = 1800;</code>
     *
     * <pre>
     *===== IAMSERVICEPROVIDER commands===
     * </pre>
     */
    public static final int REQUEST_IAMSERVICEPROVIDER_CREATE_VALUE = 1800;
    /**
     * <code>RESPONSE_IAMSERVICEPROVIDER_CREATE = 1801;</code>
     */
    public static final int RESPONSE_IAMSERVICEPROVIDER_CREATE_VALUE = 1801;
    /**
     * <code>REQUEST_IAMSERVICEPROVIDER_GET = 1802;</code>
     */
    public static final int REQUEST_IAMSERVICEPROVIDER_GET_VALUE = 1802;
    /**
     * <code>RESPONSE_IAMSERVICEPROVIDER_GET = 1803;</code>
     */
    public static final int RESPONSE_IAMSERVICEPROVIDER_GET_VALUE = 1803;
    /**
     * <code>REQUEST_IAMSERVICEPROVIDER_DELETE = 1804;</code>
     */
    public static final int REQUEST_IAMSERVICEPROVIDER_DELETE_VALUE = 1804;
    /**
     * <code>RESPONSE_IAMSERVICEPROVIDER_DELETE = 1805;</code>
     */
    public static final int RESPONSE_IAMSERVICEPROVIDER_DELETE_VALUE = 1805;
    /**
     * <code>REQUEST_IAMSERVICEPROVIDER_UPDATE = 1806;</code>
     */
    public static final int REQUEST_IAMSERVICEPROVIDER_UPDATE_VALUE = 1806;
    /**
     * <code>RESPONSE_IAMSERVICEPROVIDER_UPDATE = 1807;</code>
     *
     * <pre>
     *===== end IAMSERVICEPROVIDER commands====
     * </pre>
     */
    public static final int RESPONSE_IAMSERVICEPROVIDER_UPDATE_VALUE = 1807;
    /**
     * <code>REQUEST_IAMNAMESPACE_LIMIT_UPDATE = 1808;</code>
     */
    public static final int REQUEST_IAMNAMESPACE_LIMIT_UPDATE_VALUE = 1808;
    /**
     * <code>RESPONSE_IAMNAMESPACE_LIMIT_UPDATE = 1809;</code>
     */
    public static final int RESPONSE_IAMNAMESPACE_LIMIT_UPDATE_VALUE = 1809;
    /**
     * <code>REQUEST_IAMNAMESPACE_LIMIT_GET = 1810;</code>
     */
    public static final int REQUEST_IAMNAMESPACE_LIMIT_GET_VALUE = 1810;
    /**
     * <code>RESPONSE_IAMNAMESPACE_LIMIT_GET = 1811;</code>
     */
    public static final int RESPONSE_IAMNAMESPACE_LIMIT_GET_VALUE = 1811;
    /**
     * <code>REQUEST_CLEAN_SSD_READ_CACHE = 1812;</code>
     *
     * <pre>
     *===== SSD Read Cache commands===
     * </pre>
     */
    public static final int REQUEST_CLEAN_SSD_READ_CACHE_VALUE = 1812;
    /**
     * <code>RESPONSE_CLEAN_SSD_READ_CACHE = 1813;</code>
     */
    public static final int RESPONSE_CLEAN_SSD_READ_CACHE_VALUE = 1813;
    /**
     * <code>REQUEST_GET_SSD_READ_CACHE_PREFETCH_STATUS = 1814;</code>
     */
    public static final int REQUEST_GET_SSD_READ_CACHE_PREFETCH_STATUS_VALUE = 1814;
    /**
     * <code>RESPONSE_GET_SSD_READ_CACHE_PREFETCH_STATUS = 1815;</code>
     */
    public static final int RESPONSE_GET_SSD_READ_CACHE_PREFETCH_STATUS_VALUE = 1815;
    /**
     * <code>REQUEST_QUERY_SSD_READ_CACHE_STATUS = 1816;</code>
     */
    public static final int REQUEST_QUERY_SSD_READ_CACHE_STATUS_VALUE = 1816;
    /**
     * <code>RESPONSE_QUERY_SSD_READ_CACHE_STATUS = 1817;</code>
     *
     * <pre>
     *===== end SSD Read Cache  commands===
     * </pre>
     */
    public static final int RESPONSE_QUERY_SSD_READ_CACHE_STATUS_VALUE = 1817;
    /**
     * <code>REQUEST_GET_VNEST_NODE_MIGRATION = 1818;</code>
     *
     * <pre>
     * vnest migration
     * </pre>
     */
    public static final int REQUEST_GET_VNEST_NODE_MIGRATION_VALUE = 1818;
    /**
     * <code>RESPONSE_GET_VNEST_NODE_MIGRATION = 1819;</code>
     */
    public static final int RESPONSE_GET_VNEST_NODE_MIGRATION_VALUE = 1819;
    /**
     * <code>REQUEST_RESET_TIME_BEFORE_SUSPECT = 1820;</code>
     */
    public static final int REQUEST_RESET_TIME_BEFORE_SUSPECT_VALUE = 1820;
    /**
     * <code>RESPONSE_RESET_TIME_BEFORE_SUSPECT = 1821;</code>
     */
    public static final int RESPONSE_RESET_TIME_BEFORE_SUSPECT_VALUE = 1821;
    /**
     * <code>REQUEST_UPDATE_CHUNK_CUSTOM_STATE = 1822;</code>
     */
    public static final int REQUEST_UPDATE_CHUNK_CUSTOM_STATE_VALUE = 1822;
    /**
     * <code>RESPONSE_UPDATE_CHUNK_CUSTOM_STATE = 1823;</code>
     */
    public static final int RESPONSE_UPDATE_CHUNK_CUSTOM_STATE_VALUE = 1823;
    /**
     * <code>REQUEST_GET_DT_STATUS = 1824;</code>
     *
     * <pre>
     * Added for advanced DT status check
     * </pre>
     */
    public static final int REQUEST_GET_DT_STATUS_VALUE = 1824;
    /**
     * <code>RESPONSE_GET_DT_STATUS = 1825;</code>
     */
    public static final int RESPONSE_GET_DT_STATUS_VALUE = 1825;
    /**
     * <code>REQUEST_IAMUSER_ACCESS_KEY_USE_UPDATE = 1826;</code>
     *
     * <pre>
     *Added for AccessKey LastUpdate
     * </pre>
     */
    public static final int REQUEST_IAMUSER_ACCESS_KEY_USE_UPDATE_VALUE = 1826;
    /**
     * <code>RESPONSE_IAMUSER_ACCESS_KEY_USE_UPDATE = 1827;</code>
     */
    public static final int RESPONSE_IAMUSER_ACCESS_KEY_USE_UPDATE_VALUE = 1827;
    /**
     * <code>REQUEST_DT_OWNERSHIP_XFER = 1828;</code>
     */
    public static final int REQUEST_DT_OWNERSHIP_XFER_VALUE = 1828;
    /**
     * <code>RESPONSE_DT_OWNERSHIP_XFER = 1829;</code>
     */
    public static final int RESPONSE_DT_OWNERSHIP_XFER_VALUE = 1829;
    /**
     * <code>REQUEST_GET_DT_GIVEOUT_STATS = 1830;</code>
     */
    public static final int REQUEST_GET_DT_GIVEOUT_STATS_VALUE = 1830;
    /**
     * <code>RESPONSE_GET_DT_GIVEOUT_STATS = 1831;</code>
     */
    public static final int RESPONSE_GET_DT_GIVEOUT_STATS_VALUE = 1831;
    /**
     * <code>REQUEST_MODIFY_BOOTSTRAP_TASKS = 1832;</code>
     */
    public static final int REQUEST_MODIFY_BOOTSTRAP_TASKS_VALUE = 1832;
    /**
     * <code>RESPONSE_MODIFY_BOOTSTRAP_TASKS = 1833;</code>
     */
    public static final int RESPONSE_MODIFY_BOOTSTRAP_TASKS_VALUE = 1833;
    /**
     * <code>REQUEST_INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MINOR = 1834;</code>
     */
    public static final int REQUEST_INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MINOR_VALUE = 1834;
    /**
     * <code>RESPONSE_INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MINOR = 1835;</code>
     */
    public static final int RESPONSE_INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MINOR_VALUE = 1835;
    /**
     * <code>REQUEST_DTSM_CAPABILITIES = 1836;</code>
     *
     * <pre>
     *===== Directory Table Service Manager Commands ======
     * </pre>
     */
    public static final int REQUEST_DTSM_CAPABILITIES_VALUE = 1836;
    /**
     * <code>RESPOSE_DTSM_CAPABILITIES = 1837;</code>
     */
    public static final int RESPOSE_DTSM_CAPABILITIES_VALUE = 1837;
    /**
     * <code>REQUEST_DTSM_BPLUSTREEDUMP = 1838;</code>
     */
    public static final int REQUEST_DTSM_BPLUSTREEDUMP_VALUE = 1838;
    /**
     * <code>RESPOSE_DTSM_BPLUSTREEDUMP = 1839;</code>
     */
    public static final int RESPOSE_DTSM_BPLUSTREEDUMP_VALUE = 1839;
    /**
     * <code>REQUEST_DTSM_BPLUSTREEDUMP_STATUS = 1840;</code>
     */
    public static final int REQUEST_DTSM_BPLUSTREEDUMP_STATUS_VALUE = 1840;
    /**
     * <code>RESPOSE_DTSM_BPLUSTREEDUMP_STATUS = 1841;</code>
     */
    public static final int RESPOSE_DTSM_BPLUSTREEDUMP_STATUS_VALUE = 1841;
    /**
     * <code>REQUEST_DTSM_BPLUSTREEDUMP_GETLASTDUMPRESULT = 1842;</code>
     */
    public static final int REQUEST_DTSM_BPLUSTREEDUMP_GETLASTDUMPRESULT_VALUE = 1842;
    /**
     * <code>RESPOSE_DTSM_BPLUSTREEDUMP_GETLASTDUMPRESULT = 1843;</code>
     */
    public static final int RESPOSE_DTSM_BPLUSTREEDUMP_GETLASTDUMPRESULT_VALUE = 1843;
    /**
     * <code>REQUEST_DTSM_BPLUSTREEDUMP_ABORT = 1844;</code>
     */
    public static final int REQUEST_DTSM_BPLUSTREEDUMP_ABORT_VALUE = 1844;
    /**
     * <code>RESPOSE_DTSM_BPLUSTREEDUMP_ABORT = 1845;</code>
     *
     * <pre>
     *===== end Directory Table Service Manager Commands ===
     * </pre>
     */
    public static final int RESPOSE_DTSM_BPLUSTREEDUMP_ABORT_VALUE = 1845;
    /**
     * <code>REQUEST_FANOUT_CLIENT_EC_COMPLETE = 1846;</code>
     */
    public static final int REQUEST_FANOUT_CLIENT_EC_COMPLETE_VALUE = 1846;
    /**
     * <code>RESPONSE_FANOUT_CLIENT_EC_COMPLETE = 1847;</code>
     */
    public static final int RESPONSE_FANOUT_CLIENT_EC_COMPLETE_VALUE = 1847;
    /**
     * <code>REQUEST_ROTATION_KEY_REWRAP_TASK_CREATE = 1848;</code>
     *
     * <pre>
     *==== ROTATION_KEY REWRAP TASK KEY COMMANDS ====
     * </pre>
     */
    public static final int REQUEST_ROTATION_KEY_REWRAP_TASK_CREATE_VALUE = 1848;
    /**
     * <code>RESPONSE_ROTATION_KEY_REWRAP_TASK_CREATE = 1849;</code>
     */
    public static final int RESPONSE_ROTATION_KEY_REWRAP_TASK_CREATE_VALUE = 1849;
    /**
     * <code>REQUEST_ROTATION_KEY_REWRAP_TASK_GET = 1850;</code>
     */
    public static final int REQUEST_ROTATION_KEY_REWRAP_TASK_GET_VALUE = 1850;
    /**
     * <code>RESPONSE_ROTATION_KEY_REWRAP_TASK_GET = 1851;</code>
     */
    public static final int RESPONSE_ROTATION_KEY_REWRAP_TASK_GET_VALUE = 1851;
    /**
     * <code>REQUEST_ROTATION_KEY_REWRAP_TASK_UPDATE = 1852;</code>
     */
    public static final int REQUEST_ROTATION_KEY_REWRAP_TASK_UPDATE_VALUE = 1852;
    /**
     * <code>RESPONSE_ROTATION_KEY_REWRAP_TASK_UPDATE = 1853;</code>
     */
    public static final int RESPONSE_ROTATION_KEY_REWRAP_TASK_UPDATE_VALUE = 1853;
    /**
     * <code>REQUEST_ROTATION_KEY_REWRAP_TASK_DELETE = 1854;</code>
     */
    public static final int REQUEST_ROTATION_KEY_REWRAP_TASK_DELETE_VALUE = 1854;
    /**
     * <code>RESPONSE_ROTATION_KEY_REWRAP_TASK_DELETE = 1855;</code>
     */
    public static final int RESPONSE_ROTATION_KEY_REWRAP_TASK_DELETE_VALUE = 1855;
    /**
     * <code>REQUEST_ROTATION_KEY_REWRAP_TASK_LIST = 1856;</code>
     */
    public static final int REQUEST_ROTATION_KEY_REWRAP_TASK_LIST_VALUE = 1856;
    /**
     * <code>RESPONSE_ROTATION_KEY_REWRAP_TASK_LIST = 1857;</code>
     *
     * <pre>
     *==== END ROTATION_KEY REWRAP TASK KEY COMMANDS ====
     * </pre>
     */
    public static final int RESPONSE_ROTATION_KEY_REWRAP_TASK_LIST_VALUE = 1857;
    /**
     * <code>REQUEST_FEDERATION_CONFIG_LIST_ADD = 1860;</code>
     *
     * <pre>
     *==== FederationConfigurationList commands ====
     * </pre>
     */
    public static final int REQUEST_FEDERATION_CONFIG_LIST_ADD_VALUE = 1860;
    /**
     * <code>RESPONSE_FEDERATION_CONFIG_LIST_ADD = 1861;</code>
     */
    public static final int RESPONSE_FEDERATION_CONFIG_LIST_ADD_VALUE = 1861;
    /**
     * <code>REQUEST_FEDERATION_CONFIG_LIST_REMOVE = 1862;</code>
     */
    public static final int REQUEST_FEDERATION_CONFIG_LIST_REMOVE_VALUE = 1862;
    /**
     * <code>RESPONSE_FEDERATION_CONFIG_LIST_REMOVE = 1863;</code>
     */
    public static final int RESPONSE_FEDERATION_CONFIG_LIST_REMOVE_VALUE = 1863;
    /**
     * <code>REQUEST_FEDERATION_CONFIG_LIST_GET = 1864;</code>
     */
    public static final int REQUEST_FEDERATION_CONFIG_LIST_GET_VALUE = 1864;
    /**
     * <code>RESPONSE_FEDERATION_CONFIG_LIST_GET = 1865;</code>
     */
    public static final int RESPONSE_FEDERATION_CONFIG_LIST_GET_VALUE = 1865;
    /**
     * <code>REQUEST_FEDERATION_CONFIG_LIST_LIST = 1866;</code>
     */
    public static final int REQUEST_FEDERATION_CONFIG_LIST_LIST_VALUE = 1866;
    /**
     * <code>RESPONSE_FEDERATION_CONFIG_LIST_LIST = 1867;</code>
     *
     * <pre>
     *==== END FederationConfigurationList commands ====
     * </pre>
     */
    public static final int RESPONSE_FEDERATION_CONFIG_LIST_LIST_VALUE = 1867;
    /**
     * <code>REQUEST_OBJECT_IN_USE_CHUNKS = 1984;</code>
     */
    public static final int REQUEST_OBJECT_IN_USE_CHUNKS_VALUE = 1984;
    /**
     * <code>RESPONSE_OBJECT_IN_USE_CHUNKS = 1985;</code>
     */
    public static final int RESPONSE_OBJECT_IN_USE_CHUNKS_VALUE = 1985;
    /**
     * <code>REQUEST_IS_MPU_ACTIVE = 1986;</code>
     */
    public static final int REQUEST_IS_MPU_ACTIVE_VALUE = 1986;
    /**
     * <code>RESPONSE_IS_MPU_ACTIVE = 1987;</code>
     */
    public static final int RESPONSE_IS_MPU_ACTIVE_VALUE = 1987;
    /**
     * <code>REQUEST_OBJECT_QUERY_LIST_VERSIONS = 2018;</code>
     */
    public static final int REQUEST_OBJECT_QUERY_LIST_VERSIONS_VALUE = 2018;
    /**
     * <code>RESPONSE_OBJECT_QUERY_LIST_VERSIONS = 2019;</code>
     */
    public static final int RESPONSE_OBJECT_QUERY_LIST_VERSIONS_VALUE = 2019;
    /**
     * <code>REQUEST_DELETE_CHUNK_OBJECT = 2098;</code>
     */
    public static final int REQUEST_DELETE_CHUNK_OBJECT_VALUE = 2098;
    /**
     * <code>RESPONSE_DELETE_CHUNK_OBJECT = 2099;</code>
     */
    public static final int RESPONSE_DELETE_CHUNK_OBJECT_VALUE = 2099;


    public final int getNumber() { return value; }

    public static CommandType valueOf(int value) {
      switch (value) {
        case -1: return RESPONSE_FAILURE;
        case 0: return REQUEST_CREATE_OBJECT;
        case 1: return RESPONSE_CREATE_OBJECT;
        case 2: return REQUEST_COMPLETEMPU_OBJECT;
        case 3: return RESPONSE_COMPLETEMPU_OBJECT;
        case 4: return REQUEST_UPDATE_OBJECT;
        case 5: return RESPONSE_UPDATE_OBJECT;
        case 6: return REQUEST_MARKERUPDATE_OBJECT;
        case 7: return RESPONSE_MARKERUPDATE_OBJECT;
        case 8: return REQUEST_REMOVEVERSION_OBJECT;
        case 9: return RESPONSE_REMOVEVERSION_OBJECT;
        case 10: return REQUEST_INSERT_ENTRY;
        case 11: return RESPONSE_INSERT_ENTRY;
        case 12: return REQUEST_GET_ENTRY;
        case 13: return RESPONSE_GET_ENTRY;
        case 14: return REQUEST_REMOVE_ENTRY;
        case 15: return RESPONSE_REMOVE_ENTRY;
        case 16: return REQUEST_LIST_ENTRY;
        case 17: return RESPONSE_LIST_ENTRY;
        case 18: return REQUEST_UPLOAD_PART;
        case 19: return RESPONSE_UPLOAD_PART;
        case 20: return REQUEST_ABORT_UPLOAD;
        case 21: return RESPONSE_ABORT_UPLOAD;
        case 22: return REQUEST_CREATE_OBJECT_LIST_ENTRY;
        case 23: return RESPONSE_CREATE_OBJECT_LIST_ENTRY;
        case 24: return REQUEST_REMOVE_OBJECT_LIST_ENTRY;
        case 25: return RESPONSE_REMOVE_OBJECT_LIST_ENTRY;
        case 26: return REQUEST_PING;
        case 27: return RESPONSE_PING;
        case 28: return REQUEST_OBJECT_QUERY;
        case 29: return RESPONSE_OBJECT_QUERY;
        case 30: return REQUEST_CREATE_CHUNK;
        case 31: return RESPONSE_CREATE_CHUNK;
        case 32: return REQUEST_DELETE_CHUNK;
        case 33: return RESPONSE_DELETE_CHUNK;
        case 34: return REQUEST_SEAL_CHUNK;
        case 35: return RESPONSE_SEAL_CHUNK;
        case 36: return REQUEST_QUERY_CHUNK;
        case 37: return RESPONSE_QUERY_CHUNK;
        case 38: return REQUEST_REPORT_BLOCK_ERROR;
        case 39: return RESPONSE_REPORT_BLOCK_ERROR;
        case 40: return REQUEST_FREE_BLOCK;
        case 41: return RESPONSE_FREE_BLOCK;
        case 42: return REQUEST_CONFIRM_BLOCK_REFERENCE;
        case 43: return RESPONSE_CONFIRM_BLOCK_REFERENCE;
        case 44: return REQUEST_ALLOCATE_BLOCK;
        case 45: return RESPONSE_ALLOCATE_BLOCK;
        case 46: return REQUEST_JOB_SUBMIT;
        case 47: return RESPONSE_JOB_SUBMIT;
        case 48: return REQUEST_JOB_DONE;
        case 49: return RESPONSE_JOB_DONE;
        case 50: return REQUEST_INSERT_REGION;
        case 51: return RESPONSE_INSERT_REGION;
        case 52: return REQUEST_LIST_REGION;
        case 53: return RESPONSE_LIST_REGION;
        case 54: return REQUEST_GET_BPLUSTREE;
        case 55: return RESPONSE_GET_BPLUSTREE;
        case 56: return REQUEST_DT_SYNC;
        case 57: return RESPONSE_DT_SYNC;
        case 58: return REQUEST_UPDATE_REGIONS;
        case 59: return RESPONSE_UPDATE_REGIONS;
        case 60: return REQUEST_GET_BPLUSTREE_PARSER_MARKER;
        case 61: return RESPONSE_GET_BPLUSTREE_PARSER_MARKER;
        case 62: return REQUEST_SET_BPLUSTREE_PARSER_MARKER;
        case 63: return RESPONSE_SET_BPLUSTREE_PARSER_MARKER;
        case 64: return REQUEST_GET_JOURNAL_PARSER_MARKER;
        case 65: return RESPONSE_GET_JOURNAL_PARSER_MARKER;
        case 66: return REQUEST_SET_JOURNAL_PARSER_MARKER;
        case 67: return RESPONSE_SET_JOURNAL_PARSER_MARKER;
        case 68: return REQUEST_CONFIRM_ALLOCATE_BLOCK;
        case 69: return RESPONSE_CONFIRM_ALLOCATE_BLOCK;
        case 70: return REQUEST_EXTEND_CHUNK_TIMEOUT_LEASE;
        case 71: return RESPONSE_EXTEND_CHUNK_TIMEOUT_LEASE;
        case 72: return REQUEST_INSERT_REMOTE_CHUNK;
        case 73: return RESPONSE_INSERT_REMOTE_CHUNK;
        case 74: return REQUEST_UPDATE_REMOTE_CHUNK;
        case 75: return RESPONSE_UPDATE_REMOTE_CHUNK;
        case 76: return REQUEST_DELETE_REMOTE_CHUNK;
        case 77: return RESPONSE_DELETE_REMOTE_CHUNK;
        case 78: return REQUEST_GEO_START_COPY;
        case 79: return RESPONSE_GEO_START_COPY;
        case 80: return REQUEST_GEO_COMMIT_COPY;
        case 81: return RESPONSE_GEO_COMMIT_COPY;
        case 82: return REQUEST_GEO_REMOVE_COPY_ENTRY;
        case 83: return RESPONSE_GEO_REMOVE_COPY_ENTRY;
        case 84: return REQUEST_GET_REFERENCE_COLLECTION_PROGRESS;
        case 85: return RESPONSE_GET_REFERENCE_COLLECTION_PROGRESS;
        case 86: return REQUEST_SET_FAILPOINT;
        case 87: return RESPONSE_SET_FAILPOINT;
        case 88: return REQUEST_INSERT_OWNERSHIP_INFO;
        case 89: return RESPONSE_INSERT_OWNERSHIP_INFO;
        case 90: return REQUEST_REMOVE_OWNERSHIP_INFO;
        case 91: return RESPONSE_REMOVE_OWNERSHIP_INFO;
        case 92: return REQUEST_GET_OWNERSHIP_INFO;
        case 93: return RESPONSE_GET_OWNERSHIP_INFO;
        case 94: return REQUEST_GET_OWNERSHIP_INFO_FOR_TYPES;
        case 95: return RESPONSE_GET_OWNERSHIP_INFO_FOR_TYPES;
        case 96: return REQUEST_UPDATE_OWNERSHIP_INFO;
        case 97: return RESPONSE_UPDATE_OWNERSHIP_INFO;
        case 98: return REQUEST_GEO_DELETE_CHUNK;
        case 99: return RESPONSE_GEO_DELETE_CHUNK;
        case 100: return REQUEST_DT_QUERY;
        case 101: return RESPONSE_DT_QUERY;
        case 102: return REQUEST_LIST_BPLUSTREE;
        case 103: return RESPONSE_LIST_BPLUSTREE;
        case 104: return REQUEST_BLOCK_STATUS_UPDATE;
        case 105: return RESPONSE_BLOCK_STATUS_UPDATE;
        case 106: return REQUEST_MAINTENANCE_QUERY;
        case 107: return RESPONSE_MAINTENANCE_QUERY;
        case 108: return REQUEST_GET_INDEX_FORMAT_VERSION;
        case 109: return RESPONSE_GET_INDEX_FORMAT_VERSION;
        case 110: return REQUEST_SET_INDEX_FORMAT_VERSION;
        case 111: return RESPONSE_SET_INDEX_FORMAT_VERSION;
        case 112: return REQUEST_INSERT_REMOTE_REGION;
        case 113: return RESPONSE_INSERT_REMOTE_REGION;
        case 114: return REQUEST_INSERT_REMOTE_BTREE_MARKER;
        case 115: return RESPONSE_INSERT_REMOTE_BTREE_MARKER;
        case 116: return REQUEST_GEO_REPLICATE_CHUNK;
        case 117: return RESPONSE_GEO_REPLICATE_CHUNK;
        case 118: return REQUEST_CHUNK_REPLICATION_CHECK;
        case 119: return RESPONSE_CHUNK_REPLICATION_CHECK;
        case 120: return REQUEST_GET_NEXT_CHECKER_MARKER_POSITION;
        case 121: return RESPONSE_GET_NEXT_CHECKER_MARKER_POSITION;
        case 122: return REQUEST_INDEX_RECOVERY_STATE_TRANSITION;
        case 123: return RESPONSE_INDEX_RECOVERY_STATE_TRANSITION;
        case 124: return REQUEST_REPGROUP_RECONFIG;
        case 125: return RESPONSE_REPGROUP_RECONFIG;
        case 126: return REQUEST_GET_INDEX_RECOVERY_TRACKER;
        case 127: return RESPONSE_GET_INDEX_RECOVERY_TRACKER;
        case 128: return REQUEST_INSERT_RECOVERY_POINT;
        case 129: return RESPONSE_INSERT_RECOVERY_POINT;
        case 130: return REQUEST_CLEAN_UP_BPLUS_TREES;
        case 131: return RESPONSE_CLEAN_UP_BPLUS_TREES;
        case 132: return REQUEST_DT_MEMORY_TABLE_FORCE_SEAL;
        case 133: return RESPONSE_DT_MEMORY_TABLE_FORCE_SEAL;
        case 134: return REQUEST_CREATE_COMMODITY_DEVICE;
        case 135: return RESPONSE_CREATE_COMMODITY_DEVICE;
        case 136: return REQUEST_CREATE_FS_DEVICE;
        case 137: return RESPONSE_CREATE_FS_DEVICE;
        case 138: return REQUEST_CREATE_COMMODITY_DEVICE_TO_OWNER;
        case 139: return RESPONSE_CREATE_COMMODITY_DEVICE_FROM_OWNER;
        case 140: return REQUEST_CREATE_FS_DEVICE_TO_OWNER;
        case 141: return RESPONSE_CREATE_FS_DEVICE_FROM_OWNER;
        case 142: return REQUEST_LIST_HOSTING_DEVICES;
        case 143: return RESPONSE_LIST_HOSTING_DEVICES;
        case 144: return REQUEST_DEVICE_CREATE_COMPLETE;
        case 145: return RESPONSE_DEVICE_CREATE_COMPLETE;
        case 146: return REQUEST_START_DT_CREATION;
        case 147: return RESPONSE_START_DT_CREATION;
        case 148: return REQUEST_HOSTING_DEVICE_INFO;
        case 149: return RESPONSE_HOSTING_DEVICE_INFO;
        case 151: return RESPONSE_HOSTING_DEVICE_INFO_NULL;
        case 152: return REQUEST_RESET_FAILPOINT;
        case 153: return RESPONSE_RESET_FAILPOINT;
        case 154: return REQUEST_DT_BOOTSTRAP_QUERY;
        case 155: return RESPONSE_DT_BOOTSTRAP_QUERY;
        case 156: return REQUEST_GC_TEST_GET_OBJ_INFO;
        case 157: return RESPONSE_GC_TEST_GET_OBJ_INFO;
        case 158: return REQUEST_NAMESPACE_CREATE;
        case 159: return RESPONSE_NAMESPACE_CREATE;
        case 160: return REQUEST_NAMESPACE_GET;
        case 161: return RESPONSE_NAMESPACE_GET;
        case 162: return REQUEST_NAMESPACE_DELETE;
        case 163: return RESPONSE_NAMESPACE_DELETE;
        case 164: return REQUEST_NAMESPACE_UPDATE;
        case 165: return RESPONSE_NAMESPACE_UPDATE;
        case 166: return REQUEST_NAMESPACE_LIST;
        case 167: return RESPONSE_NAMESPACE_LIST;
        case 168: return REQUEST_PAXOS_QUERY;
        case 169: return RESPONSE_PAXOS_QUERY;
        case 170: return REQUEST_PAXOS_ACCEPT;
        case 171: return RESPONSE_PAXOS_ACCEPT;
        case 172: return REQUEST_PAXOS_COMMIT;
        case 173: return RESPONSE_PAXOS_COMMIT;
        case 174: return REQUEST_PAXOS_READ;
        case 175: return RESPONSE_PAXOS_READ;
        case 176: return REQUEST_PAXOS_ABORT;
        case 177: return RESPONSE_PAXOS_ABORT;
        case 178: return REQUEST_GET_JOURNAL_CONSUMPTION_PROGRESS;
        case 179: return RESPONSE_GET_JOURNAL_CONSUMPTION_PROGRESS;
        case 180: return REQUEST_GET_BPLUSTREE_REFERENCE_COLLECTION_PROGRESS;
        case 181: return RESPONSE_GET_BPLUSTREE_REFERENCE_COLLECTION_PROGRESS;
        case 182: return REQUEST_SET_JOURNAL_CONSUMPTION_PROGRESS;
        case 183: return RESPONSE_SET_JOURNAL_CONSUMPTION_PROGRESS;
        case 184: return REQUEST_GET_CAPACITY_DETAILS;
        case 185: return RESPONSE_GET_CAPACITY_DETAILS;
        case 186: return REQUEST_BATCH_EXEC_ENTRY;
        case 187: return RESPONSE_BATCH_EXEC_ENTRY;
        case 188: return REQUEST_PREPARE_COPY_OBJECT;
        case 189: return RESPONSE_PREPARE_COPY_OBJECT;
        case 190: return REQUEST_GET_LAST_JOURNAL_REGION;
        case 191: return RESPONSE_GET_LAST_JOURNAL_REGION;
        case 192: return REQUEST_RESOURCE_TABLE_INSERT_COMPLETE;
        case 193: return RESPONSE_RESOURCE_TABLE_INSERT_COMPLETE;
        case 194: return REQUEST_REFRESH_OWNERSHIP_INFO;
        case 195: return RESPONSE_REFRESH_OWNERSHIP_INFO;
        case 196: return REQUEST_GEO_LIST_OBJ;
        case 197: return RESPONSE_GEO_LIST_OBJ;
        case 198: return REQUEST_GEO_LIST_OBJ_UPDATES;
        case 199: return RESPONSE_GEO_LIST_OBJ_UPDATES;
        case 200: return REQUEST_GEO_LIST_OBJ_INDEX;
        case 201: return RESPONSE_GEO_LIST_OBJ_INDEX;
        case 202: return REQUEST_GET_OBJECT_LIST_ENTRY;
        case 203: return RESPONSE_GET_OBJECT_LIST_ENTRY;
        case 204: return REQUEST_BLOCK_REALLOCATION;
        case 205: return RESPONSE_BLOCK_REALLOCATION;
        case 206: return BLOCK_REALLOCATION_CONFIRMATION;
        case 208: return REQUEST_BLOCK_REALLOCATION_CONFIRMATION;
        case 209: return RESPONSE_BLOCK_REALLOCATION_CONFIRMATION;
        case 210: return REQUEST_USER_CREATE;
        case 211: return RESPONSE_USER_CREATE;
        case 212: return REQUEST_USER_GET;
        case 213: return RESPONSE_USER_GET;
        case 214: return REQUEST_USER_DELETE;
        case 215: return RESPONSE_USER_DELETE;
        case 216: return REQUEST_USER_LIST;
        case 217: return RESPONSE_USER_LIST;
        case 218: return REQUEST_USER_PASSWD_SET;
        case 219: return RESPONSE_USER_PASSWD_SET;
        case 220: return REQUEST_USER_PASSWD_DELETE;
        case 221: return RESPONSE_USER_PASSWD_DELETE;
        case 222: return REQUEST_USER_METADATA_SET;
        case 223: return RESPONSE_USER_METADATA_SET;
        case 224: return REQUEST_USER_METADATA_GET;
        case 225: return RESPONSE_USER_METADATA_GET;
        case 226: return REQUEST_BUCKET_CREATE;
        case 227: return RESPONSE_BUCKET_CREATE;
        case 228: return REQUEST_BUCKET_GET;
        case 229: return RESPONSE_BUCKET_GET;
        case 230: return REQUEST_BUCKET_DELETE;
        case 231: return RESPONSE_BUCKET_DELETE;
        case 232: return REQUEST_BUCKET_UPDATE;
        case 233: return RESPONSE_BUCKET_UPDATE;
        case 234: return REQUEST_BUCKET_LIST;
        case 235: return RESPONSE_BUCKET_LIST;
        case 236: return REQUEST_BUCKET_SET_ACL;
        case 237: return RESPONSE_BUCKET_SET_ACL;
        case 238: return REQUEST_BUCKET_GET_ACL;
        case 239: return RESPONSE_BUCKET_GET_ACL;
        case 240: return REQUEST_BUCKET_CHANGE_OWNER;
        case 241: return RESPONSE_BUCKET_CHANGE_OWNER;
        case 242: return REQUEST_BUCKET_SET_CORS_CONF;
        case 243: return RESPONSE_BUCKET_SET_CORS_CONF;
        case 244: return REQUEST_BUCKET_SET_EXPIRATION_POLICY;
        case 245: return RESPONSE_BUCKET_SET_EXPIRATION_POLICY;
        case 246: return REQUEST_BUCKET_SET_VERSIONING;
        case 247: return RESPONSE_BUCKET_SET_VERSIONING;
        case 248: return REQUEST_BUCKET_DELETE_CORS_CONF;
        case 249: return RESPONSE_BUCKET_DELETE_CORS_CONF;
        case 250: return REQUEST_BUCKET_DELETE_EXPIRATION_POLICY;
        case 251: return RESPONSE_BUCKET_DELETE_EXPIRATION_POLICY;
        case 252: return REQUEST_BUCKET_SET_VERSIONING_SOURCE;
        case 253: return RESPONSE_BUCKET_SET_VERSIONING_SOURCE;
        case 254: return REQUEST_BUCKET_SET_METADATA;
        case 255: return RESPONSE_BUCKET_SET_METADATA;
        case 256: return REQUEST_BUCKET_GET_METADATA;
        case 257: return RESPONSE_BUCKET_GET_METADATA;
        case 258: return REQUEST_BUCKET_SET_HEAD_METADATA;
        case 259: return RESPONSE_BUCKET_SET_HEAD_METADATA;
        case 260: return REQUEST_BUCKET_GET_HEAD_METADATA;
        case 261: return RESPONSE_BUCKET_GET_HEAD_METADATA;
        case 262: return REQUEST_DEVICE_INFO_UPDATE;
        case 263: return RESPONSE_DEVICE_INFO_UPDATE;
        case 264: return REQUEST_RG_CREATE;
        case 265: return RESPONSE_RG_CREATE;
        case 266: return REQUEST_RG_UPDATE;
        case 267: return RESPONSE_RG_UPDATE;
        case 268: return REQUEST_RG_DELETE;
        case 269: return RESPONSE_RG_DELETE;
        case 270: return REQUEST_RG_LIST;
        case 271: return RESPONSE_RG_LIST;
        case 272: return REQUEST_RG_GET;
        case 273: return RESPONSE_RG_GET;
        case 274: return REQUEST_RG_GET_UPDATE;
        case 275: return RESPONSE_RG_GET_UPDATE;
        case 276: return REQUEST_RG_UPD_UPDATE;
        case 277: return RESPONSE_RG_UPD_UPDATE;
        case 278: return REQUEST_RG_DEL_UPDATE;
        case 279: return RESPONSE_RG_DEL_UPDATE;
        case 280: return REQUEST_RG_LIST_UPDATE;
        case 281: return RESPONSE_RG_LIST_UPDATE;
        case 282: return REQUEST_RG_KEY_LIST_UPDATE;
        case 283: return RESPONSE_RG_KEY_LIST_UPDATE;
        case 284: return REQUEST_RG_ZONE_ADD;
        case 285: return RESPONSE_RG_ZONE_ADD;
        case 286: return REQUEST_RG_ZONE_DEL;
        case 287: return RESPONSE_RG_ZONE_DEL;
        case 288: return REQUEST_START_DT_DELETION;
        case 289: return RESPONSE_START_DT_DELETION;
        case 290: return REQUEST_DATASTORE_DELETION;
        case 291: return RESPONSE_DATASTORE_DELETION;
        case 292: return REQUEST_GET_GC_PROGRESS;
        case 293: return RESPONSE_GET_GC_PROGRESS;
        case 294: return REQUEST_GET_OB_CC_MARKER;
        case 295: return RESPONSE_GET_OB_CC_MARKER;
        case 296: return REQUEST_CONFIG_USER_SCOPE_GET;
        case 297: return RESPONSE_CONFIG_USER_SCOPE_GET;
        case 298: return REQUEST_CONFIG_USER_SCOPE_SET;
        case 299: return RESPONSE_CONFIG_USER_SCOPE_SET;
        case 300: return REQUEST_CONFIG_HAS_USER_SET;
        case 301: return RESPONSE_CONFIG_HAS_USER_SET;
        case 302: return REQUEST_GET_FLOOR_ENTRY;
        case 303: return RESPONSE_GET_FLOOR_ENTRY;
        case 304: return REQUEST_SET_CHUNK_STATUS;
        case 305: return RESPONSE_SET_CHUNK_STATUS;
        case 306: return REQUEST_GET_CT_PROGRESS_COUNTER;
        case 307: return RESPONSE_GET_CT_PROGRESS_COUNTER;
        case 308: return REQUEST_PAXOS_ELECT;
        case 309: return RESPONSE_PAXOS_ELECT;
        case 310: return REQUEST_PAXOS_INITIATE_ABORT;
        case 311: return RESPONSE_PAXOS_INITIATE_ABORT;
        case 312: return REQUEST_UPDATE_OBJECT_ACL;
        case 313: return RESPONSE_UPDATE_OBJECT_ACL;
        case 314: return REQUEST_NODE_MODE;
        case 315: return RESPONSE_NODE_MODE;
        case 316: return REQUEST_PREPARE_FOR_MAINTENANCE;
        case 317: return RESPONSE_PREPARE_FOR_MAINTENANCE;
        case 318: return REQUEST_BTREE_PRINT;
        case 319: return RESPONSE_BTREE_PRINT;
        case 320: return REQUEST_RESOURCE_EXPANDABLE;
        case 321: return RESPONSE_RESOURCE_EXPANDABLE;
        case 326: return REQUEST_UPDATE_PARENT_DIR;
        case 327: return RESPONSE_UPDATE_PARENT_DIR;
        case 328: return REQUEST_BUCKET_BILLING_INFO;
        case 329: return RESPONSE_BUCKET_BILLING_INFO;
        case 330: return REQUEST_BUCKET_BILLING_SAMPLE;
        case 331: return RESPONSE_BUCKET_BILLING_SAMPLE;
        case 332: return REQUEST_NAMESPACE_BILLING_INFO;
        case 333: return RESPONSE_NAMESPACE_BILLING_INFO;
        case 334: return REQUEST_NAMESPACE_BILLING_SAMPLE;
        case 335: return RESPONSE_NAMESPACE_BILLING_SAMPLE;
        case 336: return REQUEST_INSERT_POSIVITIVE_ON_DISK_DELTA;
        case 337: return RESPONSE_INSERT_POSIVITIVE_ON_DISK_DELTA;
        case 338: return REQUEST_INSERT_NEGATIIVE_ON_DISK_DELTA;
        case 339: return RESPONSE_INSERT_NEGATIIVE_ON_DISK_DELTA;
        case 340: return REQUEST_INSERT_BANDWIDTH_DATA;
        case 341: return RESPONSE_INSERT_BANDWIDTH_DATA;
        case 342: return REQUEST_BUCKET_SET_LOCK;
        case 343: return RESPONSE_BUCKET_SET_LOCK;
        case 344: return REQUEST_SET_USER_LOCK;
        case 345: return RESPONSE_SET_USER_LOCK;
        case 346: return REQUEST_INSERT_OBMETERCOLLECTOR_BTREE_MARKER;
        case 347: return RESPONSE_INSERT_OBMETERCOLLECTOR_BTREE_MARKER;
        case 348: return REQUEST_REMOVE_OBMETERCOLLECTOR_BTREE_MARKER;
        case 349: return RESPONSE_REMOVE_OBMETERCOLLECTOR_BTREE_MARKER;
        case 350: return REQUEST_SET_BUCKET_QUOTA;
        case 351: return RESPONSE_SET_BUCKET_QUOTA;
        case 352: return REQUEST_SET_NAMESPACE_SOFT_QUOTA;
        case 353: return RESPONSE_SET_NAMESPACE_SOFT_QUOTA;
        case 354: return REQUEST_LIST_CHUNK_GC_SCAN_TASKS;
        case 355: return RESPONSE_LIST_CHUNK_GC_SCAN_TASKS;
        case 356: return REQUEST_BLOCK_ASSIGNMENT_CONFIRM;
        case 357: return RESPONSE_BLOCK_ASSIGNMENT_CONFIRM;
        case 358: return REQUEST_GET_DT_STATS;
        case 359: return RESPONSE_GET_DT_STATS;
        case 360: return REQUEST_GET_DT_CHUNK_CREATION_STATS;
        case 361: return RESPONSE_GET_DT_CHUNK_CREATION_STATS;
        case 362: return REQUEST_UPDATE_VNEST_CONFIG;
        case 363: return RESPONSE_UPDATE_VNEST_CONFIG;
        case 364: return REQUEST_GET_DATANODES;
        case 365: return RESPONSE_GET_DATANODES;
        case 366: return REQUEST_GET_GROUPMEMBERSHIP;
        case 367: return RESPONSE_GET_GROUPMEMBERSHIP;
        case 368: return REQUEST_GROUPMEMBER_BOOTSTRAP;
        case 369: return RESPONSE_GROUPMEMBER_BOOTSTRAP;
        case 370: return REQUEST_GROUPMEMBER_PRE_BOOTSTRAP;
        case 371: return RESPONSE_GROUPMEMBER_PRE_BOOTSTRAP;
        case 372: return REQUEST_UNSEALED_GEO_START_COPY;
        case 373: return RESPONSE_UNSEALED_GEO_START_COPY;
        case 374: return REQUEST_UNSEALED_GEO_COMMIT_COPY;
        case 375: return RESPONSE_UNSEALED_GEO_COMMIT_COPY;
        case 376: return REQUEST_UNSEALED_GEO_HEARTBEAT;
        case 377: return RESPONSE_UNSEALED_GEO_HEARTBEAT;
        case 378: return REQUEST_UNSEALED_GEO_COMMIT_COPY_RANGE;
        case 379: return RESPONSE_UNSEALED_GEO_COMMIT_COPY_RANGE;
        case 380: return REQUEST_UPDATE_CHUNK_SECONDARY;
        case 381: return RESPONSE_UPDATE_CHUNK_SECONDARY;
        case 382: return REQUEST_GET_OBJECT_OWNER_HISTORY;
        case 383: return RESPONSE_GET_OBJECT_OWNER_HISTORY;
        case 384: return REQUEST_CREATE_OBJECT_OWNER_HISTORY;
        case 385: return RESPONSE_CREATE_OBJECT_OWNER_HISTORY;
        case 386: return REQUEST_APPEND_TO_OBJECT_OWNER_HISTORY;
        case 387: return RESPONSE_APPEND_TO_OBJECT_OWNER_HISTORY;
        case 388: return REQUEST_GRAB_OBJECT_OWNERSHIP;
        case 389: return RESPONSE_GRAB_OBJECT_OWNERSHIP;
        case 390: return REQUEST_UPDATE_DATANODES;
        case 391: return RESPONSE_UPDATE_DATANODES;
        case 392: return REQUEST_GET_DATANODE_INFO;
        case 393: return RESPONSE_GET_DATANODE_INFO;
        case 394: return REQUEST_BUCKET_QUERY;
        case 395: return RESPONSE_BUCKET_QUERY;
        case 396: return REQUEST_TEMP_FAILED_ZONE_GET;
        case 397: return RESPONSE_TEMP_FAILED_ZONE_GET;
        case 398: return REQUEST_TEMP_FAILED_ZONE_SET;
        case 399: return RESPONSE_TEMP_FAILED_ZONE_SET;
        case 400: return REQUEST_TEMP_FAILED_ZONE_UNSET;
        case 401: return RESPONSE_TEMP_FAILED_ZONE_UNSET;
        case 402: return REQUEST_TEMP_FAILED_ZONE_CHANGE_STATUS;
        case 403: return RESPONSE_TEMP_FAILED_ZONE_CHANGE_STATUS;
        case 404: return REQUEST_GET_BTREE_INIT_STATS;
        case 405: return RESPONSE_GET_BTREE_INIT_STATS;
        case 406: return REQUEST_UPDATE_ZK_ENSEMBLE;
        case 407: return RESPONSE_UPDATE_ZK_ENSEMBLE;
        case 408: return REQUEST_REMOTE_VARRAY_LIST;
        case 409: return RESPONSE_REMOTE_VARRAY_LIST;
        case 410: return REQUEST_GET_REFERENCED_REPO_FROM_BTREE;
        case 411: return RESPONSE_GET_REFERENCED_REPO_FROM_BTREE;
        case 412: return REQUEST_DELETE_OBJECT;
        case 413: return RESPONSE_DELETE_OBJECT;
        case 414: return REQUEST_LIST_UPLOADS;
        case 415: return RESPONSE_LIST_UPLOADS;
        case 416: return REQUEST_LIST_PARTS;
        case 417: return RESPONSE_LIST_PARTS;
        case 418: return REQUEST_INSERT_MPULIST;
        case 419: return RESPONSE_INSERT_MPULIST;
        case 420: return REQUEST_GET_REMOTE_ZONES;
        case 421: return RESPONSE_GET_REMOTE_ZONES;
        case 422: return REQUEST_REJOIN_TASK_BATCH;
        case 423: return RESPONSE_REJOIN_TASK_BATCH;
        case 424: return REQUEST_BUCKET_CHANGE_ISSTALEALLOWED;
        case 425: return RESPONSE_BUCKET_CHANGE_ISSTALEALLOWED;
        case 426: return REQUEST_PUT_REBUILD_REFTABLE_TASK_MARKER;
        case 427: return RESPONSE_PUT_REBUILD_REFTABLE_TASK_MARKER;
        case 428: return REQUEST_REBUILD_OBJECT_REFERENCES;
        case 429: return RESPONSE_REBUILD_OBJECT_REFERENCES;
        case 430: return REQUEST_INSERT_ZONE_LEVEL_METERING_INFO;
        case 431: return RESPONSE_INSERT_ZONE_LEVEL_METERING_INFO;
        case 432: return REQUEST_INSERT_ZONE_LEVEL_METERING_INFO_BULK;
        case 433: return RESPONSE_INSERT_ZONE_LEVEL_METERING_INFO_BULK;
        case 434: return REQUEST_ZONE_LEVEL_METERING_INFO;
        case 435: return RESPONSE_ZONE_LEVEL_METERING_INFO;
        case 436: return REQUEST_INSERT_BUCKET_INTERMEDIATE;
        case 437: return RESPONSE_INSERT_BUCKET_INTERMEDIATE;
        case 438: return REQUEST_INSERT_NAMESPACE_INTERMEDIATE;
        case 439: return RESPONSE_INSERT_NAMESPACE_INTERMEDIATE;
        case 440: return REQUEST_INSERT_NODE_LEVEL_METERING_INFO;
        case 441: return RESPONSE_INSERT_NODE_LEVEL_METERING_INFO;
        case 442: return REQUEST_NODE_LEVEL_METERING_INFO;
        case 443: return RESPONSE_NODE_LEVEL_METERING_INFO;
        case 444: return REQUEST_ALERT_CREATE;
        case 445: return RESPONSE_ALERT_CREATE;
        case 446: return REQUEST_ALERT_GET;
        case 447: return RESPONSE_ALERT_GET;
        case 448: return REQUEST_ALERT_LIST;
        case 449: return RESPONSE_ALERT_LIST;
        case 450: return REQUEST_AUDIT_CREATE;
        case 451: return RESPONSE_AUDIT_CREATE;
        case 452: return REQUEST_AUDIT_GET;
        case 453: return RESPONSE_AUDIT_GET;
        case 454: return REQUEST_AUDIT_LIST;
        case 455: return RESPONSE_AUDIT_LIST;
        case 456: return REQUEST_PAXOS_LIST;
        case 457: return RESPONSE_PAXOS_LIST;
        case 458: return REQUEST_GET_COMPACTION_STATE;
        case 459: return RESPONSE_GET_COMPACTION_STATE;
        case 460: return REQUEST_INSERT_ENTRY_IF_ABSENT;
        case 461: return RESPONSE_INSERT_ENTRY_IF_ABSENT;
        case 462: return REQUEST_SET_BUCKET_HARD_QUOTA;
        case 463: return RESPONSE_SET_BUCKET_HARD_QUOTA;
        case 464: return REQUEST_ERCA_HEARTBEAT;
        case 465: return RESPONSE_ERCA_HEARTBEAT;
        case 466: return REQUEST_CLIENT_EC_COMPLETE;
        case 467: return RESPONSE_CLIENT_EC_COMPLETE;
        case 470: return REQUEST_GET_REMOTE_FILE_VERSION;
        case 471: return RESPONSE_GET_REMOTE_FILE_VERSION;
        case 472: return REQUEST_GET_REMOTE_FILE_VOLATILE_IMAGE;
        case 473: return RESPONSE_GET_REMOTE_FILE_VOLATILE_IMAGE;
        case 474: return REQUEST_PAXOS_BULK_QUERY;
        case 475: return RESPONSE_PAXOS_BULK_QUERY;
        case 476: return REQUEST_PAXOS_DELETE;
        case 477: return RESPONSE_PAXOS_DELETE;
        case 478: return REQUEST_PAXOS_DELETE_COMPLETE;
        case 479: return RESPONSE_PAXOS_DELETE_COMPLETE;
        case 480: return REQUEST_CREATE_NFS_EXPORT_DEVICE;
        case 481: return RESPONSE_CREATE_NFS_EXPORT_DEVICE;
        case 482: return REQUEST_CREATE_NFS_EXPORT_DEVICE_TO_OWNER;
        case 483: return RESPONSE_CREATE_NFS_EXPORT_DEVICE_FROM_OWNER;
        case 484: return REQUEST_NAMESPACE_FOR_USER;
        case 485: return RESPONSE_NAMESPACE_FOR_USER;
        case 486: return REQUEST_WRITE_CURRENT_OBJECT_OWNER_FLAG;
        case 487: return RESPONSE_WRITE_CURRENT_OBJECT_OWNER_FLAG;
        case 488: return REQUEST_OBJECT_ACL_QUERY;
        case 489: return RESPONSE_OBJECT_ACL_QUERY;
        case 490: return REQUEST_CHECK_NODE;
        case 491: return RESPONSE_CHECK_NODE;
        case 492: return REQUEST_DT_MEMORY_USAGE;
        case 493: return RESPONSE_DT_MEMORY_USAGE;
        case 494: return REQUEST_CONFIG_ENCKEY_GET;
        case 495: return RESPONSE_CONFIG_ENCKEY_GET;
        case 496: return REQUEST_AUTHPROVIDER_CREATE;
        case 497: return RESPONSE_AUTHPROVIDER_CREATE;
        case 498: return REQUEST_AUTHPROVIDER_GET;
        case 499: return RESPONSE_AUTHPROVIDER_GET;
        case 500: return REQUEST_AUTHPROVIDER_UPDATE;
        case 501: return RESPONSE_AUTHPROVIDER_UPDATE;
        case 502: return REQUEST_AUTHPROVIDER_DELETE;
        case 503: return RESPONSE_AUTHPROVIDER_DELETE;
        case 504: return REQUEST_AUTHPROVIDER_LIST;
        case 505: return RESPONSE_AUTHPROVIDER_LIST;
        case 506: return REQUEST_CHANGE_LOG_LEVEL;
        case 507: return RESPONSE_CHANGE_LOG_LEVEL;
        case 508: return REQUEST_LATEST_ZONE_LEVEL_METERING_INFO;
        case 509: return RESPONSE_LATEST_ZONE_LEVEL_METERING_INFO;
        case 510: return REQUEST_ZONE_LEVEL_METERING_INFOS;
        case 511: return RESPONSE_ZONE_LEVEL_METERING_INFOS;
        case 512: return REQUEST_LATEST_NODE_LEVEL_METERING_INFO;
        case 513: return RESPONSE_LATEST_NODE_LEVEL_METERING_INFO;
        case 514: return REQUEST_NODE_LEVEL_METERING_INFOS;
        case 515: return RESPONSE_NODE_LEVEL_METERING_INFOS;
        case 516: return REQUEST_PAXOS_INSERT_TASK;
        case 517: return RESPONSE_PAXOS_INSERT_TASK;
        case 518: return REQUEST_REBUILD_OBJECT_OWNER_HISTORY;
        case 519: return RESPONSE_REBUILD_OBJECT_OWNER_HISTORY;
        case 520: return REQUEST_ENABLE_NEST_DIAGNOSTIC;
        case 521: return RESPONSE_ENABLE_NEST_DIAGNOSTIC;
        case 522: return REQUEST_XOR_DECODE_FOR_READ_CHUNK;
        case 523: return RESPONSE_XOR_DECODE_FOR_READ_CHUNK;
        case 524: return REQUEST_LIST_OBJECTS;
        case 525: return RESPONSE_LIST_OBJECTS;
        case 526: return REQUEST_LIST_OBJECT_VERSIONS;
        case 527: return RESPONSE_LIST_OBJECT_VERSIONS;
        case 528: return REQUEST_CACHE_INVALIDATE;
        case 529: return RESPONSE_CACHE_INVALIDATE;
        case 576: return REQUEST_FIND_MPU;
        case 577: return RESPONSE_FIND_MPU;
        case 578: return REQUEST_GET_MPU_OWNERSHIP;
        case 579: return RESPONSE_GET_MPU_OWNERSHIP;
        case 580: return REQUEST_RECYCLE_MPU_T_ENTRY;
        case 581: return RESPONSE_RECYCLE_MPU_T_ENTRY;
        case 582: return REQUEST_DELETE_MPUSCANNER_MARKER_PROGRESS;
        case 583: return RESPONSE_DELETE_MPUSCANNER_MARKER_PROGRESS;
        case 584: return REQUEST_LIST_ALL_UPLOADS;
        case 585: return RESPONSE_LIST_ALL_UPLOADS;
        case 586: return REQUEST_UPDATE_REPO_USAGE;
        case 587: return RESPONSE_UPDATE_REPO_USAGE;
        case 588: return REQUEST_INSERT_REMOTE_PARTIALGC_TASK;
        case 589: return RESPONSE_INSERT_REMOTE_PARTIALGC_TASK;
        case 590: return REQUEST_INSERT_REMOTE_PARTIALGC_CONTEXT;
        case 591: return RESPONSE_INSERT_REMOTE_PARTIALGC_CONTEXT;
        case 592: return REQUEST_UPDATE_OBJECT_FOR_PARTIALGC;
        case 593: return RESPONSE_UPDATE_OBJECT_FOR_PARTIALGC;
        case 594: return REQUEST_ALERT_SET_ACK;
        case 595: return RESPONSE_ALERT_SET_ACK;
        case 596: return REQUEST_GET_KEK;
        case 597: return RESPONSE_GET_KEK;
        case 598: return REQUEST_SET_KEK;
        case 599: return RESPONSE_SET_KEK;
        case 600: return REQUEST_GET_STAT;
        case 601: return RESPONSE_GET_STAT;
        case 602: return REQUEST_PUSH_STAT;
        case 603: return RESPONSE_PUSH_STAT;
        case 604: return REQUEST_GET_HISTORY;
        case 605: return RESPONSE_GET_HISTORY;
        case 606: return REQUEST_STAT_UPDATE;
        case 607: return RESPONSE_STAT_UPDATE;
        case 608: return REQUEST_BACKUP_STAT;
        case 609: return RESPONSE_BACKUP_STAT;
        case 610: return REQUEST_STAT_REMOVE;
        case 611: return RESPONSE_STAT_REMOVE;
        case 612: return REQUEST_STAT_RESERVED_5;
        case 613: return REQUEST_STAT_RESERVED_6;
        case 614: return REQUEST_OVERTAKE_OWNER_FOR_FAILED_NODE;
        case 615: return RESPONSE_OVERTAKE_OWNER_FOR_FAILED_NODE;
        case 616: return REQUEST_SET_ACTIVEMASTERKEY_RECORD;
        case 617: return RESPONSE_SET_ACTIVEMASTERKEY_RECORD;
        case 618: return REQUEST_SET_MASTERKEY_RECORD;
        case 619: return RESPONSE_SET_MASTERKEY_RECORD;
        case 620: return REQUEST_GET_MASTERKEY_RECORD;
        case 621: return RESPONSE_GET_MASTERKEY_RECORD;
        case 622: return REQUEST_CREATE_MASTERKEY_RECORD;
        case 623: return RESPONSE_CREATE_MASTERKEY_RECORD;
        case 624: return REQUEST_PARTIALGC_CHECK_DELETING;
        case 625: return RESPONSE_PARTIALGC_CHECK_DELETING;
        case 626: return REQUEST_SET_BUCKET_ACTIVE_KEY;
        case 627: return RESPONSE_SET_BUCKET_ACTIVE_KEY;
        case 628: return REQUEST_SET_NAMESPACE_ACTIVE_KEY;
        case 629: return RESPONSE_SET_NAMESPACE_ACTIVE_KEY;
        case 630: return REQUEST_GET_ACTIVEMASTERKEY_RECORD;
        case 631: return RESPONSE_GET_ACTIVEMASTERKEY_RECORD;
        case 632: return REQUEST_ADD_GENERIC_METADATA;
        case 633: return RESPONSE_ADD_GENERIC_METADATA;
        case 634: return REQUEST_UPDATE_GENERIC_METADATA;
        case 635: return RESPONSE_UPDATE_GENERIC_METADATA;
        case 636: return REQUEST_DELETE_GENERIC_METADATA;
        case 637: return RESPONSE_DELETE_GENERIC_METADATA;
        case 638: return REQUEST_CLEAR_BUCKET_LOCK;
        case 639: return RESPONSE_CLEAR_BUCKET_LOCK;
        case 644: return REQUEST_FILEKEYVAL_CREATE;
        case 645: return RESPONSE_FILEKEYVAL_CREATE;
        case 646: return REQUEST_FILEKEYVAL_GET;
        case 647: return RESPONSE_FILEKEYVAL_GET;
        case 648: return REQUEST_FILEKEYVAL_DELETE;
        case 649: return RESPONSE_FILEKEYVAL_DELETE;
        case 650: return REQUEST_FILEKEYVAL_UPDATE;
        case 651: return RESPONSE_FILEKEYVAL_UPDATE;
        case 652: return REQUEST_FILEKEYVAL_LIST;
        case 653: return RESPONSE_FILEKEYVAL_LIST;
        case 654: return REQUEST_START_PARTIALGC;
        case 655: return RESPONSE_START_PARTIALGC;
        case 656: return REQUEST_FINISH_PARTIALGC;
        case 657: return RESPONSE_FINISH_PARTIALGC;
        case 658: return REQUEST_PARTIALGC_CHUNK_REFRESH;
        case 659: return RESPONSE_PARTIALGC_CHUNK_REFRESH;
        case 660: return REQUEST_CHUNK_SET_SECONDARY_REPLICATED;
        case 661: return RESPONSE_CHUNK_SET_SECONDARY_REPLICATED;
        case 662: return REQUEST_BUCKET_SET_ISMETADATASEARCHENABLED;
        case 663: return RESPONSE_BUCKET_SET_ISMETADATASEARCHENABLED;
        case 664: return REQUEST_INGEST_SYSTEM_UNDER_TRANSFORMATION_REPO_CHUNK;
        case 665: return RESPONSE_INGEST_SYSTEM_UNDER_TRANSFORMATION_REPO_CHUNK;
        case 666: return REQUEST_NFS_LIST_FILE_LOCKS;
        case 667: return RESPONSE_NFS_LIST_FILE_LOCKS;
        case 668: return REQUEST_NFS_CREATE_FILE_LOCK;
        case 669: return RESPONSE_NFS_CREATE_FILE_LOCK;
        case 670: return REQUEST_NFS_LOOKUP_PATH_BY_OID;
        case 671: return RESPONSE_NFS_LOOKUP_PATH_BY_OID;
        case 684: return REQUEST_DELETE_OBJECT_OWNER_HISTORY;
        case 685: return RESPONSE_DELETE_OBJECT_OWNER_HISTORY;
        case 686: return REQUEST_TEMP_FAILED_ZONE_HISTORY_LIST;
        case 687: return RESPONSE_TEMP_FAILED_ZONE_HISTORY_LIST;
        case 688: return REQUEST_BUCKET_LIST_LOCALLY;
        case 689: return RESPONSE_BUCKET_LIST_LOCALLY;
        case 690: return REQUEST_GET_BTREE_ONHEAPCACHE_STATS;
        case 691: return RESPONSE_GET_BTREE_ONHEAPCACHE_STATS;
        case 706: return REQUEST_CHUNK_EC_RESET;
        case 707: return RESPONSE_CHUNK_EC_RESET;
        case 708: return REQUEST_CREATE_OBJECT_MI_ENTRY_BATCH;
        case 709: return RESPONSE_CREATE_OBJECT_MI_ENTRY_BATCH;
        case 710: return REQUEST_CREATE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH;
        case 711: return RESPONSE_CREATE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH;
        case 712: return REQUEST_REMOVE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH;
        case 713: return RESPONSE_REMOVE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH;
        case 720: return REQUEST_SKIP_CHUNKS_FOR_PARTIALGC;
        case 721: return RESPONSE_SKIP_CHUNKS_FOR_PARTIALGC;
        case 722: return REQUEST_CHUNK_FIND_VALID_DATA_LENGTH;
        case 723: return RESPONSE_CHUNK_FIND_VALID_DATA_LENGTH;
        case 724: return REQUEST_UPDATE_BTREE_REFERENCE;
        case 725: return RESPONSE_UPDATE_BTREE_REFERENCE;
        case 820: return REQUEST_SSM_PARTITION_COMMAND;
        case 821: return RESPONSE_SSM_PARTITION_COMMAND;
        case 822: return REQUEST_SSM_PROGRESS_COMMAND;
        case 823: return RESPONSE_SSM_PROGRESS_COMMAND;
        case 824: return REQUEST_SSM_SPACECALCULATOR_COMMAND;
        case 825: return RERPONSE_SSM_SPACECALCULATOR_COMMAND;
        case 826: return REQUEST_SSM_RECORD_COMMAND;
        case 827: return RERPONSE_SSM_RECORD_COMMAND;
        case 828: return REQUEST_SSM_FULL_MERGE_COMMAND;
        case 829: return RERPONSE_SSM_FULL_MERGE_COMMAND;
        case 830: return REQUEST_SSM_NOTIFICATION;
        case 831: return RERPONSE_SSM_NOTIFICATION;
        case 898: return REQUEST_SSM_RESERVED;
        case 899: return RESPONSE_SSM_RESERVED;
        case 900: return REQUEST_TRANSFORMATION;
        case 901: return RESPONSE_TRANSFORMATION;
        case 910: return REQUEST_GIVE_OUT_OWNERSHIP;
        case 911: return RESPONSE_GIVE_OUT_OWNERSHIP;
        case 914: return REQUEST_CHECK_RECLAIMABLE;
        case 915: return RESPONSE_CHECK_RECLAIMABLE;
        case 916: return REQUEST_RR_OPERATIONS;
        case 917: return RESPONSE_RR_OPERATIONS;
        case 950: return REQUEST_INSERT_REMOTE_REGION_IN_BATCH;
        case 951: return RESPONSE_INSERT_REMOTE_REGION_IN_BATCH;
        case 970: return REQUEST_GET_CHUNK_GC_SCAN_TASK_VALUES;
        case 971: return RESPONSE_GET_CHUNK_GC_SCAN_TASK_VALUES;
        case 1000: return REQUEST_NFSDIR_CREATE;
        case 1001: return RESPONSE_NFSDIR_CREATE;
        case 1002: return REQUEST_NFSSYMLINK_CREATE;
        case 1003: return RESPONSE_NFSSYMLINK_CREATE;
        case 1004: return REQUEST_NFSDIR_DELETE;
        case 1005: return RESPONSE_NFSDIR_DELETE;
        case 1006: return REQUEST_NFSFILE_DELETE;
        case 1007: return RESPONSE_NFSFILE_DELETE;
        case 1008: return REQUEST_NFSSYMLINK_DELETE;
        case 1009: return RESPONSE_NFSSYMLINK_DELETE;
        case 1010: return REQUEST_NFS_GET_OID_AND_OWNERZONE;
        case 1011: return RESPONSE_NFS_GET_OID_AND_OWNERZONE;
        case 1012: return REQUEST_NFS_LOOKUP;
        case 1013: return RESPONSE_NFS_LOOKUP;
        case 1014: return REQUEST_NFSOBJECT_COPY;
        case 1015: return RESPONSE_NFSOBJECT_COPY;
        case 1016: return REQUEST_NFSFILE_TRUNCATE;
        case 1017: return RESPONSE_NFSFILE_TRUNCATE;
        case 1018: return REQUEST_NFS_ABORT_MULTIPART_UPLOAD;
        case 1019: return RESPONSE_NFS_ABORT_MULTIPART_UPLOAD;
        case 1020: return REQUEST_NFS_LIST_PARTS;
        case 1021: return RESPONSE_NFS_LIST_PARTS;
        case 1022: return REQUEST_NFS_GET_RETENTION;
        case 1023: return RESPONSE_NFS_GET_RETENTION;
        case 1024: return REQUEST_NFS_SET_RETENTION;
        case 1025: return RESPONSE_NFS_SET_RETENTION;
        case 1026: return REQUEST_NFS_GET_ACL;
        case 1027: return RESPONSE_NFS_GET_ACL;
        case 1028: return REQUEST_NFS_SET_ACL;
        case 1029: return RESPONSE_NFS_SET_ACL;
        case 1030: return REQUEST_NFS_DELETE_UMD;
        case 1031: return RESPONSE_NFS_DELETE_UMD;
        case 1032: return REQUEST_NFS_DELETE_HEAD_SMD;
        case 1033: return RESPONSE_NFS_DELETE_HEAD_SMD;
        case 1034: return REQUEST_NFS_SET_UMD;
        case 1035: return RESPONSE_NFS_SET_UMD;
        case 1036: return REQUEST_NFS_SET_SMD;
        case 1037: return RESPONSE_NFS_SET_SMD;
        case 1038: return REQUEST_NFS_GET_SMD;
        case 1039: return RESPONSE_NFS_GET_SMD;
        case 1040: return REQUEST_NFS_GET_ALL_SMD;
        case 1041: return RESPONSE_NFS_GET_ALL_SMD;
        case 1042: return REQUEST_NFS_GET_UMD;
        case 1043: return RESPONSE_NFS_GET_UMD;
        case 1044: return REQUEST_NFS_GET_ALL_UMD;
        case 1045: return RESPONSE_NFS_GET_ALL_UMD;
        case 1046: return REQUEST_NFSDIR_LIST;
        case 1047: return RESPONSE_NFSDIR_LIST;
        case 1048: return REQUEST_NFSOBJECT_RENAME;
        case 1049: return RESPONSE_NFSOBJECT_RENAME;
        case 1050: return REQUEST_NFSSYMLINK_GET_SMD;
        case 1051: return RESPONSE_NFSSYMLINK_GET_SMD;
        case 1052: return REQUEST_NFSFILE_CREATE;
        case 1053: return RESPONSE_NFSFILE_CREATE;
        case 1054: return REQUEST_FILEKEYVAL_GETANDINC;
        case 1055: return RESPONSE_FILEKEYVAL_GETANDINC;
        case 1056: return REQUEST_NFS_GET_ALL_SMD_AND_UMD;
        case 1057: return RESPONSE_NFS_GET_ALL_SMD_AND_UMD;
        case 1058: return REQUEST_NFS_REPLICATION_INFO;
        case 1059: return RESPONSE_NFS_REPLICATION_INFO;
        case 1060: return REQUEST_MI_QUERY;
        case 1061: return RESPONSE_MI_QUERY;
        case 1062: return REQUEST_GET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY;
        case 1063: return RESPONSE_GET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY;
        case 1064: return REQUEST_LIST_OBJECT_LIST_ENTRIES;
        case 1065: return RESPONSE_LIST_OBJECT_LIST_ENTRIES;
        case 1070: return REQUEST_GET_OR_CREATE_BUCKET_ACTIVE_KEY;
        case 1071: return RESPONSE_GET_OR_CREATE_BUCKET_ACTIVE_KEY;
        case 1072: return REQUEST_GET_OR_CREATE_NAMESPACE_ACTIVE_KEY;
        case 1073: return RESPONSE_GET_OR_CREATE_NAMESPACE_ACTIVE_KEY;
        case 1074: return REQUEST_TAKE_BUCKET_SNAPSHOT;
        case 1075: return RESPONSE_TAKE_BUCKET_SNAPSHOT;
        case 1076: return REQUEST_REVERT_BUCKET_SNAPSHOT;
        case 1077: return RESPONSE_REVERT_BUCKET_SNAPSHOT;
        case 1078: return REQUEST_DELETE_BUCKET_SNAPSHOT;
        case 1079: return RESPONSE_DELETE_BUCKET_SNAPSHOT;
        case 1080: return REQUEST_LIST_BUCKET_SNAPSHOT;
        case 1081: return RESPONSE_LIST_BUCKET_SNAPSHOT;
        case 1082: return REQUEST_REVERT_OBJECT_SNAPSHOT;
        case 1083: return RESPONSE_REVERT_OBJECT_SNAPSHOT;
        case 1084: return REQUEST_DELETE_BUCKET_STATE_SNAPSHOT;
        case 1085: return RESPONSE_DELETE_BUCKET_STATE_SNAPSHOT;
        case 1086: return REQUEST_REVERT_OBJECT_LIST_ENTRY_SNAPSHOT;
        case 1087: return RESPONSE_REVERT_OBJECT_LIST_ENTRY_SNAPSHOT;
        case 1100: return REQUEST_LIST_OBJECTS_BY_TAG;
        case 1101: return RESPONSE_LIST_OBJECTS_BY_TAG;
        case 1102: return REQUEST_QUERY_LISTABLE_TAG_HIERARCHY;
        case 1103: return RESPONSE_QUERY_LISTABLE_TAG_HIERARCHY;
        case 1104: return REQUEST_UPGRADE_LISTABLE_TAG;
        case 1105: return RESPONSE_UPGRADE_LISTABLE_TAG;
        case 1106: return REQUEST_GET_REJOIN_PROGRESS;
        case 1107: return RESPONSE_GET_REJOIN_PROGRESS;
        case 1108: return REQUEST_DELETE_REJOIN_PROGRESS;
        case 1109: return RESPONSE_DELETE_REJOIN_PROGRESS;
        case 1200: return REQUEST_OWNERSHIP_PING;
        case 1201: return RESPONSE_OWNERSHIP_PING;
        case 1202: return REQUEST_CHUNK_TABLE_DT_QUERY;
        case 1203: return RESPONSE_CHUNK_TABLE_DT_QUERY;
        case 1216: return REQUEST_CHUNK_GC_READY;
        case 1217: return RESPONSE_CHUNK_GC_READY;
        case 1218: return REQUEST_VNEST_DIAGNOSTIC;
        case 1219: return RESPONSE_VNEST_DIAGNOSTIC;
        case 1220: return REQUEST_INSERT_BANDWIDTH_DATA_GROUP;
        case 1221: return RESPONSE_INSERT_BANDWIDTH_DATA_GROUP;
        case 1222: return REQUEST_POSITIVE_REF_MARKER;
        case 1223: return RESPONSE_POSITIVE_REF_MARKER;
        case 1224: return REQUEST_UPDATE_METERING_PROGRESS_MARKER;
        case 1225: return RESPONSE_UPDATE_METERING_PROGRESS_MARKER;
        case 1226: return REQUEST_GET_METERING_JOURNAL_PARSER_MARKER;
        case 1227: return RESPONSE_GET_METERING_JOURNAL_PARSER_MARKER;
        case 1228: return REQUEST_SET_METERING_JOURNAL_PARSER_MARKER;
        case 1229: return RESPONSE_SET_METERING_JOURNAL_PARSER_MARKER;
        case 1230: return REQUEST_NFS_LIST_FILES_BY_PATHS;
        case 1231: return RESPONSE_NFS_LIST_FILES_BY_PATHS;
        case 1232: return REQUEST_REPLACE_BLOCKS;
        case 1233: return RESPONSE_REPLACE_BLOCKS;
        case 1234: return REQUEST_NFS_SET_SMD_UMD;
        case 1235: return RESPONSE_NFS_SET_SMD_UMD;
        case 1236: return REQUEST_GET_CLUSTER_ID;
        case 1237: return RESPONSE_GET_CLUSTER_ID;
        case 1238: return REQUEST_UPDATE_CLUSTER_ID;
        case 1239: return RESPONSE_UPDATE_CLUSTER_ID;
        case 1240: return REQUEST_CHECK_RG_CONTAINS_ZONE;
        case 1241: return RESPONSE_CHECK_RG_CONTAINS_ZONE;
        case 1242: return REQUEST_CREATE_HDFS_DELEGATION_TOKEN;
        case 1243: return RESPONSE_CREATE_HDFS_DELEGATION_TOKEN;
        case 1244: return REQUEST_GET_HDFS_DELEGATION_TOKEN;
        case 1245: return RESPONSE_GET_HDFS_DELEGATION_TOKEN;
        case 1246: return REQUEST_LIST_HDFS_DELEGATION_TOKEN;
        case 1247: return RESPONSE_LIST_HDFS_DELEGATION_TOKEN;
        case 1248: return REQUEST_DELETE_HDFS_DELEGATION_TOKEN;
        case 1249: return RESPONSE_DELETE_HDFS_DELEGATION_TOKEN;
        case 1250: return REQUEST_UPDATE_HDFS_DELEGATION_TOKEN;
        case 1251: return RESPONSE_UPDATE_HDFS_DELEGATION_TOKEN;
        case 1252: return REQUEST_WRITE_HDFS_SALT_DATA;
        case 1253: return RESPONSE_WRITE_HDFS_SALT_DATA;
        case 1254: return REQUEST_READ_HDFS_SALT_DATA;
        case 1255: return RESPONSE_READ_HDFS_SALT_DATA;
        case 1256: return REQUEST_DELETE_HDFS_SALT_DATA;
        case 1257: return RESPONSE_DELETE_HDFS_SALT_DATA;
        case 1258: return REQUEST_UPDATE_HDFS_SALT_DATA;
        case 1259: return RESPONSE_UPDATE_HDFS_SALT_DATA;
        case 1260: return REQUEST_INSERT_BLOB_POS_START_MAJOR;
        case 1261: return RESPONSE_INSERT_BLOB_POS_START_MAJOR;
        case 1262: return REQUEST_GET_BLOB_POS_START_MAJOR;
        case 1263: return RESPONSE_GET_BLOB_POS_START_MAJOR;
        case 1264: return REQUEST_ENABLE_GEO_REPLAYER;
        case 1265: return RESPONSE_ENABLE_GEO_REPLAYER;
        case 1266: return REQUEST_DISABLE_GEO_REPLAYER;
        case 1267: return RESPONSE_DISABLE_GEO_REPLAYER;
        case 1270: return REQUEST_INSERT_TSO_TRANSITION_KEY;
        case 1271: return RESPONSE_INSERT_TSO_TRANSITION_KEY;
        case 1272: return REQUEST_REMOVE_TSO_TRANSITION_KEY;
        case 1273: return RESPONSE_REMOVE_TSO_TRANSITION_KEY;
        case 1274: return REQUEST_VNEST_CONTROL_MSG;
        case 1275: return RESPONSE_VNEST_CONTROL_MSG;
        case 1276: return REQUEST_GET_CLUSTER_KEY;
        case 1277: return RESPONSE_GET_CLUSTER_KEY;
        case 1300: return REQUEST_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET;
        case 1301: return RESPONSE_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET;
        case 1302: return REQUEST_GEO_LIST_OBJ_INDEX_RANGE;
        case 1303: return RESPONSE_GEO_LIST_OBJ_INDEX_RANGE;
        case 1304: return REQUEST_BUCKET_SET_POLICY;
        case 1305: return RESPONSE_BUCKET_SET_POLICY;
        case 1306: return REQUEST_BUCKET_GET_POLICY;
        case 1307: return RESPONSE_BUCKET_GET_POLICY;
        case 1308: return REQUEST_BUCKET_DELETE_BUCKET_POLICY;
        case 1309: return RESPONSE_BUCKET_DELETE_BUCKET_POLICY;
        case 1310: return REQUEST_UPDATE_USER_TAG;
        case 1311: return RESPONSE_UPDATE_USER_TAG;
        case 1312: return REQUEST_DELETE_USER_TAG;
        case 1313: return RESPONSE_DELETE_USER_TAG;
        case 1314: return REQUEST_USER_TAGS_QUERY;
        case 1315: return RESPONSE_USER_TAGS_QUERY;
        case 1316: return REQUEST_REMOVE_REBUILD_REFTABLE_TASK_MARKER;
        case 1317: return RESPONSE_REMOVE_REBUILD_REFTABLE_TASK_MARKER;
        case 1350: return REQUEST_RESET_BOOTSTRAP_TASKS;
        case 1351: return RESPONSE_RESET_BOOTSTRAP_TASKS;
        case 1352: return REQUEST_INSERT_BOOTSTRAP_MARKER;
        case 1353: return RESPONSE_INSERT_BOOTSTRAP_MARKER;
        case 1354: return REQUEST_REMOVE_BOOTSTRAP_MARKER;
        case 1355: return RESPONSE_REMOVE_BOOTSTRAP_MARKER;
        case 1356: return REQUEST_INSERT_BOOTSTRAP_TASKS;
        case 1357: return RESPONSE_INSERT_BOOTSTRAP_TASKS;
        case 1358: return REQUEST_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_TREE;
        case 1359: return RESPONSE_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_TREE;
        case 1376: return REQUEST_ALERT_FABRIC_SEQ_NUM;
        case 1377: return RESPONSE_ALERT_FABRIC_SEQ_NUM;
        case 1378: return REQUEST_AUDIT_FABRIC_SEQ_NUM;
        case 1379: return RESPONSE_AUDIT_FABRIC_SEQ_NUM;
        case 1380: return REQUEST_GET_ORIGINAL_IP_LIST;
        case 1381: return RESPONSE_GET_ORIGINAL_IP_LIST;
        case 1382: return REQUEST_GET_ORIGINALIP_KEY;
        case 1383: return RESPONSE_GET_ORIGINALIP_KEY;
        case 1384: return REQUEST_PUT_ORIGINALIP_KEY;
        case 1385: return RESPONSE_PUT_ORIGINALIP_KEY;
        case 1360: return REQUEST_INSERT_GEO_NODE_LEVEL_METERING_INFO;
        case 1361: return RESPONSE_INSERT_GEO_NODE_LEVEL_METERING_INFO;
        case 1362: return REQUEST_GEO_RG_LEVEL_METERING_LATEST_INFO;
        case 1363: return RESPONSE_GEO_RG_LEVEL_METERING_LATEST_INFO;
        case 1364: return REQUEST_GEO_ZONE_LEVEL_LATEST_METERING_INFO;
        case 1365: return RESPONSE_GEO_ZONE_LEVEL_LATEST_METERING_INFO;
        case 1366: return REQUEST_GEO_RG_LEVEL_METERING_SAMPLE_INFO;
        case 1367: return RESPONSE_GEO_RG_LEVEL_METERING_SAMPLE_INFO;
        case 1368: return REQUEST_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO;
        case 1369: return RESPONSE_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO;
        case 1370: return REQUEST_INSERT_JOURNAL_REPLICATE_TASK_RANGE;
        case 1371: return RESPONSE_INSERT_JOURNAL_REPLICATE_TASK_RANGE;
        case 1400: return REQUEST_SET_NOTIFIED_FOR_REMOTE_ZONE;
        case 1401: return RESPONSE_SET_NOTIFIED_FOR_REMOTE_ZONE;
        case 1402: return REQUEST_REDO_FAILURE_MODE_REPLAY_FOR_REMOTE_ZONE;
        case 1403: return RESPONSE_REDO_FAILURE_MODE_REPLAY_FOR_REMOTE_ZONE;
        case 1404: return REQUEST_REMOVE_REGION;
        case 1405: return RESPONSE_REMOVE_REGION;
        case 1406: return REQUEST_TRIGGER_IC;
        case 1407: return RESPONSE_TRIGGER_IC;
        case 1408: return REQUEST_INSERT_RECONSTRUCTION_KEY;
        case 1409: return RESPONSE_INSERT_RECONSTRUCTION_KEY;
        case 1410: return REQUEST_SENSOR_CREATE;
        case 1411: return RESPONSE_SENSOR_CREATE;
        case 1412: return REQUEST_SENSOR_GET;
        case 1413: return RESPONSE_SENSOR_GET;
        case 1414: return REQUEST_SENSOR_LIST;
        case 1415: return RESPONSE_SENSOR_LIST;
        case 1416: return REQUEST_SENSOR_DELETE;
        case 1417: return RESPONSE_SENSOR_DELETE;
        case 1418: return REQUEST_SENSOR_UPDATE;
        case 1419: return RESPONSE_SENSOR_UPDATE;
        case 1420: return REQUEST_SENSOR_STATUS_GET;
        case 1421: return RESPONSE_SENSOR_STATUS_GET;
        case 1422: return REQUEST_SENSOR_STATUS_SET;
        case 1423: return RESPONSE_SENSOR_STATUS_SET;
        case 1430: return REQUEST_OBJECTGC_LOCAL_REFERENCE_PROGRESS;
        case 1431: return RESPONSE_OBJECTGC_LOCAL_REFERENCE_PROGRESS;
        case 1432: return REQUEST_OBJECTGC_STATS;
        case 1433: return RESPONSE_OBJECTGC_STATS;
        case 1434: return REQUEST_OBJECTGC_NODE_TIME;
        case 1435: return RESPONSE_OBJECTGC_NODE_TIME;
        case 1494: return REQUEST_CHUNK_RANGE_REPLICATION_CHECK;
        case 1495: return RESPONSE_CHUNK_RANGE_REPLICATION_CHECK;
        case 1496: return REQUEST_OBJECT_REPLICATION_INFO;
        case 1497: return RESPONSE_OBJECT_REPLICATION_INFO;
        case 1498: return REQUEST_GEO_CHECK_OBJECT_INDEX_REPLICATION;
        case 1499: return RESPONSE_GEO_CHECK_OBJECT_INDEX_REPLICATION;
        case 1500: return REQUEST_POLL_SERVICE_READINESS;
        case 1501: return RESPONSE_POLL_SERVICE_READINESS;
        case 1502: return REQUEST_INSERT_BUCKET_STAT_BATCH;
        case 1503: return RESPONSE_INSERT_BUCKET_STAT_BATCH;
        case 1504: return REQUEST_RECYCLE_MPU_PARTS;
        case 1505: return RESPONSE_RECYCLE_MPU_PARTS;
        case 1506: return REQUEST_DT_PING;
        case 1507: return RESPONSE_DT_PING;
        case 1510: return REQUEST_NFSOBJECT_MULTI_COPY;
        case 1511: return RESPONSE_NFSOBJECT_MULTI_COPY;
        case 1512: return REQUEST_GET_METERING_PROGRESS_MARKER;
        case 1513: return RESPONSE_GET_METERING_PROGRESS_MARKER;
        case 1514: return REQUEST_LIST_BACKGROUND_OPERATORS;
        case 1515: return RESPONSE_LIST_BACKGROUND_OPERATORS;
        case 1516: return REQUEST_GET_CAPACITY_STATISTICS;
        case 1517: return RESPONSE_GET_CAPACITY_STATISTICS;
        case 1518: return REQUEST_UPDATE_CHUNK_VERIFICATION_SEQ;
        case 1519: return RESPONSE_UPDATE_CHUNK_VERIFICATION_SEQ;
        case 1520: return REQUEST_GET_CROSS_REFERENCE_CHECK_STATUS;
        case 1521: return RESPONSE_GET_CROSS_REFERENCE_CHECK_STATUS;
        case 1522: return REQUEST_CHECK_POSITIVE_REFERNCE_FOR_REMOTE_CHUNK;
        case 1523: return RESPONSE_CHECK_POSITIVE_REFERNCE_FOR_REMOTE_CHUNK;
        case 1524: return REQUEST_VERIFY_REFERENCE_FROM_REMOTE_RR;
        case 1525: return RESPONSE_VERIFY_REFERENCE_FROM_REMOTE_RR;
        case 1528: return REQUEST_GET_RR_SEQUENCE_KEY;
        case 1529: return REPONSE_GET_RR_SEQUENCE_KEY;
        case 1530: return REQUEST_UPDATE_COPY_JOB_PROGRESS;
        case 1531: return RESPONSE_UPDATE_COPY_JOB_PROGRESS;
        case 1532: return REQUEST_FORCE_CHUNK_GC_VERFICATION;
        case 1533: return RESPONSE_FORCE_CHUNK_GC_VERFICATION;
        case 1534: return REQUEST_ALERT_POLICY_CREATE;
        case 1535: return RESPONSE_ALERT_POLICY_CREATE;
        case 1536: return REQUEST_ALERT_POLICY_GET;
        case 1537: return RESPONSE_ALERT_POLICY_GET;
        case 1538: return REQUEST_ALERT_POLICY_DELETE;
        case 1539: return RESPONSE_ALERT_POLICY_DELETE;
        case 1540: return REQUEST_ALERT_POLICY_LIST;
        case 1541: return RESPONSE_ALERT_POLICY_LIST;
        case 1542: return REQUEST_UPDATE_PARTIAL_GC_COPIED_DATA;
        case 1543: return RESPONSE_UPDATE_PARTIAL_GC_COPIED_DATA;
        case 1544: return REQUEST_EKMSERVER_CREATE;
        case 1545: return RESPONSE_EKMSERVER_CREATE;
        case 1546: return REQUEST_EKMSERVER_GET;
        case 1547: return RESPONSE_EKMSERVER_GET;
        case 1548: return REQUEST_EKMSERVER_LIST;
        case 1549: return RESPONSE_EKMSERVER_LIST;
        case 1550: return REQUEST_EKMSERVER_DELETE;
        case 1551: return RESPONSE_EKMSERVER_DELETE;
        case 1552: return REQUEST_EKMSERVER_UPDATE;
        case 1553: return RESPONSE_EKMSERVER_UPDATE;
        case 1554: return REQUEST_EKMCLUSTER_CREATE;
        case 1555: return RESPONSE_EKMCLUSTER_CREATE;
        case 1556: return REQUEST_EKMCLUSTER_GET;
        case 1557: return RESPONSE_EKMCLUSTER_GET;
        case 1558: return REQUEST_EKMCLUSTER_LIST;
        case 1559: return RESPONSE_EKMCLUSTER_LIST;
        case 1560: return REQUEST_EKMCLUSTER_DELETE;
        case 1561: return RESPONSE_EKMCLUSTER_DELETE;
        case 1562: return REQUEST_EKMCLUSTER_UPDATE;
        case 1563: return RESPONSE_EKMCLUSTER_UPDATE;
        case 1564: return REQUEST_EKMCLUSTER_STATUS_GET;
        case 1565: return RESPONSE_EKMCLUSTER_STATUS_GET;
        case 1566: return REQUEST_EKMCLUSTER_STATUS_SET;
        case 1567: return RESPONSE_EKMCLUSTER_STATUS_SET;
        case 1568: return REQUEST_ROTATIONTASK_CREATE;
        case 1569: return RESPONSE_ROTATIONTASK_CREATE;
        case 1570: return REQUEST_ROTATIONTASK_GET;
        case 1571: return RESPONSE_ROTATIONTASK_GET;
        case 1572: return REQUEST_ROTATIONTASK_LIST;
        case 1573: return RESPONSE_ROTATIONTASK_LIST;
        case 1574: return REQUEST_ROTATIONTASK_DELETE;
        case 1575: return RESPONSE_ROTATIONTASK_DELETE;
        case 1576: return REQUEST_ROTATIONTASK_UPDATE;
        case 1577: return RESPONSE_ROTATIONTASK_UPDATE;
        case 1578: return REQUEST_ROTATIONTASK_STATUS_GET;
        case 1579: return RESPONSE_ROTATIONTASK_STATUS_GET;
        case 1580: return REQUEST_ROTATIONTASK_STATUS_SET;
        case 1581: return RESPONSE_ROTATIONTASK_STATUS_SET;
        case 1582: return REQUEST_GET_OR_CREATE_ROTATIONTASK_ACTIVE_KEY;
        case 1583: return RESPONSE_GET_OR_CREATE_ROTATIONTASK_ACTIVE_KEY;
        case 1584: return REQUEST_SET_ROTATIONTASK_ACTIVE_KEY;
        case 1585: return RESPONSE_SET_ROTATIONTASK_ACTIVE_KEY;
        case 1606: return REQUEST_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD;
        case 1607: return RESPONSE_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD;
        case 1608: return REQUEST_GET_ACTIVE_ROTATION_MASTER_KEY_RECORD;
        case 1609: return RESPONSE_GET_ACTIVE_ROTATION_MASTER_KEY_RECORD;
        case 1612: return REQUEST_CREATE_KEY_ROTATION_EVENT;
        case 1613: return RESPONSE_CREATE_KEY_ROTATION_EVENT;
        case 1614: return REQUEST_GET_KEY_ROTATION_EVENT;
        case 1615: return RESPONSE_GET_KEY_ROTATION_EVENT;
        case 1616: return REQUEST_UPDATE_KEY_ROTATION_EVENT;
        case 1617: return RESPONSE_UPDATE_KEY_ROTATION_EVENT;
        case 1618: return REQUEST_LIST_KEY_ROTATION_EVENT;
        case 1619: return RESPONSE_LIST_KEY_ROTATION_EVENT;
        case 1624: return REQUEST_NAMESPACE_REWRAP_TASK_CREATE;
        case 1625: return RESPONSE_NAMESPACE_REWRAP_TASK_CREATE;
        case 1626: return REQUEST_NAMESPACE_REWRAP_TASK_GET;
        case 1627: return RESPONSE_NAMESPACE_REWRAP_TASK_GET;
        case 1628: return REQUEST_NAMESPACE_REWRAP_TASK_UPDATE;
        case 1629: return RESPONSE_NAMESPACE_REWRAP_TASK_UPDATE;
        case 1630: return REQUEST_NAMESPACE_REWRAP_TASK_DELETE;
        case 1631: return RESPONSE_NAMESPACE_REWRAP_TASK_DELETE;
        case 1632: return REQUEST_NAMESPACE_REWRAP_TASK_LIST;
        case 1633: return RESPONSE_NAMESPACE_REWRAP_TASK_LIST;
        case 1634: return REQUEST_EKMCLUSTER_STATUS_ACTIVATE;
        case 1635: return RESPONSE_EKMCLUSTER_STATUS_ACTIVATE;
        case 1636: return REQUEST_EKMCLUSTER_STATUS_DEACTIVATE;
        case 1637: return RESPONSE_EKMCLUSTER_STATUS_DEACTIVATE;
        case 1638: return REQUEST_SET_ACTIVE_ROTATION_KEY_RECORD;
        case 1639: return RESPONSE_SET_ACTIVE_ROTATION_KEY_RECORD;
        case 1640: return REQUEST_GET_ACTIVE_ROTATION_KEY_RECORD;
        case 1641: return RESPONSE_GET_ACTIVE_ROTATION_KEY_RECORD;
        case 1642: return REQUEST_ROTATE_ACTIVE_ROTATION_KEY_RECORD;
        case 1643: return RESPONSE_ROTATE_ACTIVE_ROTATION_KEY_RECORD;
        case 1644: return REQUEST_PROCESS_BULK_ALERT_ACK;
        case 1645: return RESPONSE_PROCESS_BULK_ALERT_ACK;
        case 1646: return REQUEST_GET_ALERT_STATS;
        case 1647: return RESPONSE_GET_ALERT_STATS;
        case 1648: return REQUEST_GET_BPLUSTREE_FOR_BTREE_GC;
        case 1649: return RESPONSE_GET_BPLUSTREE_FOR_BTREE_GC;
        case 1656: return REQUEST_DT_SYNC_ADOPTED_TREE_ATTACH;
        case 1658: return REQUEST_LIST_CLEAN_UP_JOB;
        case 1659: return RESPONSE_LIST_CLEAN_UP_JOB;
        case 1660: return REQUEST_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME;
        case 1661: return RESPONSE_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME;
        case 1662: return REQUEST_CREATE_BULK_ALERT_ACK_KEY;
        case 1663: return RESPONSE_CREATE_BULK_ALERT_ACK_KEY;
        case 1664: return REQUEST_GET_BULK_ALERT_ACK_KEY;
        case 1665: return RESPONSE_GET_BULK_ALERT_ACK_KEY;
        case 1666: return REQUEST_CLEAR_BULK_ALERT_ACK_KEY;
        case 1667: return RESPONSE_CLEAR_BULK_ALERT_ACK_KEY;
        case 1668: return REQUEST_PROCESS_BULK_ALERT_ACK_KEY;
        case 1669: return RESPONSE_PROCESS_BULK_ALERT_ACK_KEY;
        case 1670: return REQUEST_UPDATE_BULK_ALERT_ACK_KEY;
        case 1671: return RESPONSE_UPDATE_BULK_ALERT_ACK_KEY;
        case 1672: return REQUEST_INSERT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS;
        case 1673: return RESPONSE_INSERT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS;
        case 1674: return REQUEST_LISTING_REPLICATION_INFO;
        case 1675: return RESPONSE_LISTING_REPLICATION_INFO;
        case 1676: return REQUEST_GEO_CHECK_LISTING_INDEX_REPLICATION;
        case 1677: return RESPONSE_GEO_CHECK_LISTING_INDEX_REPLICATION;
        case 1678: return REQUEST_GET_LAST_PAGE_TABLE_JOURNAL_REGION;
        case 1679: return RESPONSE_GET_LAST_PAGE_TABLE_JOURNAL_REGION;
        case 1680: return REQUEST_LIST_PAGE_TABLE_BASE_RECORD;
        case 1681: return RESPONSE_LIST_PAGE_TABLE_BASE_RECORD;
        case 1682: return REQUEST_LIST_PAGE_TABLE_JOURNAL_REGION;
        case 1683: return RESPONSE_LIST_PAGE_TABLE_JOURNAL_REGION;
        case 1684: return REQUEST_DELETE_PAGE_TABLE_JOURNAL_AND_BASE;
        case 1685: return RESPONSE_DELETE_PAGE_TABLE_JOURNAL_AND_BASE;
        case 1686: return REQUEST_LIST_PAGE_TABLE_BASE_INDEX_RECORD;
        case 1687: return RESPONSE_LIST_PAGE_TABLE_BASE_INDEX_RECORD;
        case 1688: return REQUEST_GET_LAST_PAGE_TABLE_BASE_INDEX_RECORD;
        case 1689: return RESPONSE_GET_LAST_PAGE_TABLE_BASE_INDEX_RECORD;
        case 1690: return REQUEST_INSERT_REMOTE_PAGE_TABLE_REGION_IN_BATCH;
        case 1691: return RESPONSE_INSERT_REMOTE_PAGE_TABLE_REGION_IN_BATCH;
        case 1692: return REQUEST_INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_BATCH;
        case 1693: return RESPONSE_INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_BATCH;
        case 1694: return REQUEST_SET_BULK_ALERT_ACK;
        case 1695: return RESPONSE_SET_BULK_ALERT_ACK;
        case 1696: return REQUEST_PAGE_TABLE_BASE_SYNC;
        case 1697: return RESPONSE_PAGE_TABLE_BASE_SYNC;
        case 1698: return REQUEST_DT_RESET_PAGE_TABLE_MODE;
        case 1699: return RESPONSE_DT_RESET_PAGE_TABLE_MODE;
        case 1700: return REQUEST_LISTING_SWITCH_TASKS_PROGRESS;
        case 1701: return RESPONSE_LISTING_SWITCH_TASKS_PROGRESS;
        case 1702: return REQUEST_REMOTE_DT_BOOTSTRAP_STATUS;
        case 1703: return RESPONSE_REMOTE_DT_BOOTSTRAP_STATUS;
        case 1704: return REQUEST_GET_ADDRESS_FOR_PAGE_TABLE_ID;
        case 1705: return RESPONSE_GET_ADDRESS_FOR_PAGE_TABLE_ID;
        case 1706: return REQUEST_CREATE_SAN_DEVICE;
        case 1707: return RESPONSE_CREATE_SAN_DEVICE;
        case 1708: return REQUEST_CREATE_SAN_DEVICE_TO_OWNER;
        case 1709: return RESPONSE_CREATE_SAN_DEVICE_FROM_OWNER;
        case 1710: return REQUEST_AGGREGATION_PUBLISH_TOP_N;
        case 1711: return RESPONSE_AGGREGATION_PUBLISH_TOP_N;
        case 1712: return REQUEST_UPDATE_PARTITION_TOTALSPACE;
        case 1713: return RESPONSE_UPDATE_PARTITION_TOTALSPACE;
        case 1714: return REQUEST_XOR_DECODE_FOR_DTQUERY;
        case 1715: return RESPONSE_XOR_DECODE_FOR_DTQUERY;
        case 1716: return REQUEST_DATA_MIGRATION_STATUS_KEY_CREATE;
        case 1717: return RESPONSE_DATA_MIGRATION_STATUS_KEY_CREATE;
        case 1718: return REQUEST_DATA_MIGRATION_STATUS_KEY_DELETE;
        case 1719: return RESPONSE_DATA_MIGRATION_STATUS_KEY_DELETE;
        case 1720: return REQUEST_DATA_MIGRATION_STATUS_KEY_GET;
        case 1721: return RESPONSE_DATA_MIGRATION_STATUS_KEY_GET;
        case 1722: return REQUEST_DATA_MIGRATION_UPDATE_CHUNK;
        case 1723: return RESPONSE_DATA_MIGRATION_UPDATE_CHUNK;
        case 1724: return REQUEST_ALLOCATE_BLOCK_MIGRATION;
        case 1725: return RESPONSE_ALLOCATE_BLOCK_MIGRATION;
        case 1726: return REQUEST_SEAL_LOCAL_CHUNK_MIGRATION;
        case 1727: return RESPONSE_SEAL_LOCAL_CHUNK_MIGRATION;
        case 1728: return REQUEST_GET_MIGRATE_SEQUENCE;
        case 1729: return RESPONSE_GET_MIGRATE_SEQUENCE;
        case 1730: return REQUEST_SET_MIGRATION_STATUS;
        case 1731: return RESPONSE_SET_MIGRATION_STATUS;
        case 1732: return REQUEST_IAMUSER_GET;
        case 1733: return RESPONSE_IAMUSER_GET;
        case 1734: return REQUEST_IAMUSER_LIST;
        case 1735: return RESPONSE_IAMUSER_LIST;
        case 1736: return REQUEST_IAMUSER_DELETE;
        case 1737: return RESPONSE_IAMUSER_DELETE;
        case 1738: return REQUEST_IAMUSER_UPDATE;
        case 1739: return RESPONSE_IAMUSER_UPDATE;
        case 1740: return REQUEST_IAMUSER_CREATE;
        case 1741: return RESPONSE_IAMUSER_CREATE;
        case 1742: return REQUEST_IAMGROUP_GET;
        case 1743: return RESPONSE_IAMGROUP_GET;
        case 1744: return REQUEST_IAMGROUP_LIST;
        case 1745: return RESPONSE_IAMGROUP_LIST;
        case 1746: return REQUEST_IAMGROUP_DELETE;
        case 1747: return RESPONSE_IAMGROUP_DELETE;
        case 1748: return REQUEST_IAMGROUP_UPDATE;
        case 1749: return RESPONSE_IAMGROUP_UPDATE;
        case 1750: return REQUEST_IAMGROUP_CREATE;
        case 1751: return RESPONSE_IAMGROUP_CREATE;
        case 1752: return REQUEST_IAMROLE_GET;
        case 1753: return RESPONSE_IAMROLE_GET;
        case 1754: return REQUEST_IAMROLE_LIST;
        case 1755: return RESPONSE_IAMROLE_LIST;
        case 1756: return REQUEST_IAMROLE_DELETE;
        case 1757: return RESPONSE_IAMROLE_DELETE;
        case 1758: return REQUEST_IAMROLE_UPDATE;
        case 1759: return RESPONSE_IAMROLE_UPDATE;
        case 1760: return REQUEST_IAMROLE_CREATE;
        case 1761: return RESPONSE_IAMROLE_CREATE;
        case 1762: return REQUEST_IAMUSER_ACCESS_KEY_LIST;
        case 1763: return RESPONSE_IAMUSER_ACCESS_KEY_LIST;
        case 1764: return REQUEST_IAMUSER_ACCESS_KEY_DELETE;
        case 1765: return RESPONSE_IAMUSER_ACCESS_KEY_DELETE;
        case 1766: return REQUEST_IAMUSER_ACCESS_KEY_UPDATE;
        case 1767: return RESPONSE_IAMUSER_ACCESS_KEY_UPDATE;
        case 1768: return REQUEST_IAMUSER_ACCESS_KEY_GET;
        case 1769: return RESPONSE_IAMUSER_ACCESS_KEY_GET;
        case 1770: return REQUEST_IAMUSER_ACCESS_KEY_CREATE;
        case 1771: return RESPONSE_IAMUSER_ACCESS_KEY_CREATE;
        case 1772: return REQUEST_IAMMANAGEDPOLICY_GET;
        case 1773: return RESPONSE_IAMMANAGEDPOLICY_GET;
        case 1774: return REQUEST_IAMMANAGEDPOLICY_LIST;
        case 1775: return RESPONSE_IAMMANAGEDPOLICY_LIST;
        case 1776: return REQUEST_IAMMANAGEDPOLICY_DELETE;
        case 1777: return RESPONSE_IAMMANAGEDPOLICY_DELETE;
        case 1778: return REQUEST_IAMMANAGEDPOLICY_UPDATE;
        case 1779: return RESPONSE_IAMMANAGEDPOLICY_UPDATE;
        case 1780: return REQUEST_IAMMANAGEDPOLICY_VERSION_DELETE;
        case 1781: return RESPONSE_IAMMANAGEDPOLICY_VERSION_DELETE;
        case 1782: return REQUEST_IAMMANAGEDPOLICY_SET_DEFAULT_VERSION;
        case 1783: return RESPONSE_IAMMANAGEDPOLICY_SET_DEFAULT_VERSION;
        case 1784: return REQUEST_IAMMANAGEDPOLICY_VERSION_GET;
        case 1785: return RESPONSE_IAMMANAGEDPOLICY_VERSION_GET;
        case 1786: return REQUEST_IAM_MANAGED_ENTRY_LIST;
        case 1787: return RESPONSE_IAM_MANAGED_ENTRY_LIST;
        case 1788: return REQUEST_IAMMANAGEDPOLICY_CREATE;
        case 1789: return RESPONSE_IAMMANAGEDPOLICY_CREATE;
        case 1790: return REQUEST_IAMPROVIDER_CREATE;
        case 1791: return RESPONSE_IAMPROVIDER_CREATE;
        case 1792: return REQUEST_IAMPROVIDER_GET;
        case 1793: return RESPONSE_IAMPROVIDER_GET;
        case 1794: return REQUEST_IAMPROVIDER_LIST;
        case 1795: return RESPONSE_IAMPROVIDER_LIST;
        case 1796: return REQUEST_IAMPROVIDER_DELETE;
        case 1797: return RESPONSE_IAMPROVIDER_DELETE;
        case 1798: return REQUEST_IAMPROVIDER_UPDATE;
        case 1799: return RESPONSE_IAMPROVIDER_UPDATE;
        case 1800: return REQUEST_IAMSERVICEPROVIDER_CREATE;
        case 1801: return RESPONSE_IAMSERVICEPROVIDER_CREATE;
        case 1802: return REQUEST_IAMSERVICEPROVIDER_GET;
        case 1803: return RESPONSE_IAMSERVICEPROVIDER_GET;
        case 1804: return REQUEST_IAMSERVICEPROVIDER_DELETE;
        case 1805: return RESPONSE_IAMSERVICEPROVIDER_DELETE;
        case 1806: return REQUEST_IAMSERVICEPROVIDER_UPDATE;
        case 1807: return RESPONSE_IAMSERVICEPROVIDER_UPDATE;
        case 1808: return REQUEST_IAMNAMESPACE_LIMIT_UPDATE;
        case 1809: return RESPONSE_IAMNAMESPACE_LIMIT_UPDATE;
        case 1810: return REQUEST_IAMNAMESPACE_LIMIT_GET;
        case 1811: return RESPONSE_IAMNAMESPACE_LIMIT_GET;
        case 1812: return REQUEST_CLEAN_SSD_READ_CACHE;
        case 1813: return RESPONSE_CLEAN_SSD_READ_CACHE;
        case 1814: return REQUEST_GET_SSD_READ_CACHE_PREFETCH_STATUS;
        case 1815: return RESPONSE_GET_SSD_READ_CACHE_PREFETCH_STATUS;
        case 1816: return REQUEST_QUERY_SSD_READ_CACHE_STATUS;
        case 1817: return RESPONSE_QUERY_SSD_READ_CACHE_STATUS;
        case 1818: return REQUEST_GET_VNEST_NODE_MIGRATION;
        case 1819: return RESPONSE_GET_VNEST_NODE_MIGRATION;
        case 1820: return REQUEST_RESET_TIME_BEFORE_SUSPECT;
        case 1821: return RESPONSE_RESET_TIME_BEFORE_SUSPECT;
        case 1822: return REQUEST_UPDATE_CHUNK_CUSTOM_STATE;
        case 1823: return RESPONSE_UPDATE_CHUNK_CUSTOM_STATE;
        case 1824: return REQUEST_GET_DT_STATUS;
        case 1825: return RESPONSE_GET_DT_STATUS;
        case 1826: return REQUEST_IAMUSER_ACCESS_KEY_USE_UPDATE;
        case 1827: return RESPONSE_IAMUSER_ACCESS_KEY_USE_UPDATE;
        case 1828: return REQUEST_DT_OWNERSHIP_XFER;
        case 1829: return RESPONSE_DT_OWNERSHIP_XFER;
        case 1830: return REQUEST_GET_DT_GIVEOUT_STATS;
        case 1831: return RESPONSE_GET_DT_GIVEOUT_STATS;
        case 1832: return REQUEST_MODIFY_BOOTSTRAP_TASKS;
        case 1833: return RESPONSE_MODIFY_BOOTSTRAP_TASKS;
        case 1834: return REQUEST_INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MINOR;
        case 1835: return RESPONSE_INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MINOR;
        case 1836: return REQUEST_DTSM_CAPABILITIES;
        case 1837: return RESPOSE_DTSM_CAPABILITIES;
        case 1838: return REQUEST_DTSM_BPLUSTREEDUMP;
        case 1839: return RESPOSE_DTSM_BPLUSTREEDUMP;
        case 1840: return REQUEST_DTSM_BPLUSTREEDUMP_STATUS;
        case 1841: return RESPOSE_DTSM_BPLUSTREEDUMP_STATUS;
        case 1842: return REQUEST_DTSM_BPLUSTREEDUMP_GETLASTDUMPRESULT;
        case 1843: return RESPOSE_DTSM_BPLUSTREEDUMP_GETLASTDUMPRESULT;
        case 1844: return REQUEST_DTSM_BPLUSTREEDUMP_ABORT;
        case 1845: return RESPOSE_DTSM_BPLUSTREEDUMP_ABORT;
        case 1846: return REQUEST_FANOUT_CLIENT_EC_COMPLETE;
        case 1847: return RESPONSE_FANOUT_CLIENT_EC_COMPLETE;
        case 1848: return REQUEST_ROTATION_KEY_REWRAP_TASK_CREATE;
        case 1849: return RESPONSE_ROTATION_KEY_REWRAP_TASK_CREATE;
        case 1850: return REQUEST_ROTATION_KEY_REWRAP_TASK_GET;
        case 1851: return RESPONSE_ROTATION_KEY_REWRAP_TASK_GET;
        case 1852: return REQUEST_ROTATION_KEY_REWRAP_TASK_UPDATE;
        case 1853: return RESPONSE_ROTATION_KEY_REWRAP_TASK_UPDATE;
        case 1854: return REQUEST_ROTATION_KEY_REWRAP_TASK_DELETE;
        case 1855: return RESPONSE_ROTATION_KEY_REWRAP_TASK_DELETE;
        case 1856: return REQUEST_ROTATION_KEY_REWRAP_TASK_LIST;
        case 1857: return RESPONSE_ROTATION_KEY_REWRAP_TASK_LIST;
        case 1860: return REQUEST_FEDERATION_CONFIG_LIST_ADD;
        case 1861: return RESPONSE_FEDERATION_CONFIG_LIST_ADD;
        case 1862: return REQUEST_FEDERATION_CONFIG_LIST_REMOVE;
        case 1863: return RESPONSE_FEDERATION_CONFIG_LIST_REMOVE;
        case 1864: return REQUEST_FEDERATION_CONFIG_LIST_GET;
        case 1865: return RESPONSE_FEDERATION_CONFIG_LIST_GET;
        case 1866: return REQUEST_FEDERATION_CONFIG_LIST_LIST;
        case 1867: return RESPONSE_FEDERATION_CONFIG_LIST_LIST;
        case 1984: return REQUEST_OBJECT_IN_USE_CHUNKS;
        case 1985: return RESPONSE_OBJECT_IN_USE_CHUNKS;
        case 1986: return REQUEST_IS_MPU_ACTIVE;
        case 1987: return RESPONSE_IS_MPU_ACTIVE;
        case 2018: return REQUEST_OBJECT_QUERY_LIST_VERSIONS;
        case 2019: return RESPONSE_OBJECT_QUERY_LIST_VERSIONS;
        case 2098: return REQUEST_DELETE_CHUNK_OBJECT;
        case 2099: return RESPONSE_DELETE_CHUNK_OBJECT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CommandType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CommandType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CommandType>() {
            public CommandType findValueByNumber(int number) {
              return CommandType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.getDescriptor().getEnumTypes().get(0);
    }

    private static final CommandType[] VALUES = values();

    public static CommandType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CommandType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.CommandType)
  }

  /**
   * Protobuf enum {@code io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.RemoteProcessStatus}
   */
  public enum RemoteProcessStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>READY = 0;</code>
     */
    READY(0, 0),
    /**
     * <code>NOT_INITIALIZED = 1;</code>
     *
     * <pre>
     * DirectoryTable is not initialized yet
     * </pre>
     */
    NOT_INITIALIZED(1, 1),
    /**
     * <code>INITIALIZE_FAILED = 2;</code>
     *
     * <pre>
     * DT init failure
     * </pre>
     */
    INITIALIZE_FAILED(2, 2),
    /**
     * <code>STOP_SERVING_FOR_FAILOVER = 3;</code>
     *
     * <pre>
     * DT set stop serving flag
     * </pre>
     */
    STOP_SERVING_FOR_FAILOVER(3, 3),
    /**
     * <code>NOT_SERVED = 4;</code>
     *
     * <pre>
     * DirectoryTable is not served by server
     * </pre>
     */
    NOT_SERVED(4, 4),
    /**
     * <code>SERVED_BUT_NOT_EFFECTIVE = 5;</code>
     *
     * <pre>
     * DirectoryTable is served but not effective
     * </pre>
     */
    SERVED_BUT_NOT_EFFECTIVE(5, 5),
    /**
     * <code>SERVED_BUT_LEASE_EXPIRED = 6;</code>
     *
     * <pre>
     * DirectoryTable is served but lease has expired
     * </pre>
     */
    SERVED_BUT_LEASE_EXPIRED(6, 6),
    /**
     * <code>SERVED_BUT_WRONG_VERSION = 7;</code>
     *
     * <pre>
     * DirectoryTable is served but with wrong version
     * </pre>
     */
    SERVED_BUT_WRONG_VERSION(7, 7),
    /**
     * <code>SERVICE_BUSY = 8;</code>
     *
     * <pre>
     * DirectoryTable is busy to process request
     * </pre>
     */
    SERVICE_BUSY(8, 8),
    /**
     * <code>UNKNOWN_REQUEST = 9;</code>
     *
     * <pre>
     * DirectoryTable doesn't know this request.
     * During upgrade, the old server may receive the new request, reject it.
     * </pre>
     */
    UNKNOWN_REQUEST(9, 9),
    /**
     * <code>INTERNAL_ERROR = 10;</code>
     *
     * <pre>
     * unknown internal error.
     * </pre>
     */
    INTERNAL_ERROR(10, 10),
    /**
     * <code>DT_PAUSE_SERVING = 11;</code>
     *
     * <pre>
     * DirectoryTable is paused
     * </pre>
     */
    DT_PAUSE_SERVING(11, 11),
    /**
     * <code>TIMEOUT = 12;</code>
     *
     * <pre>
     * request timedout
     * </pre>
     */
    TIMEOUT(12, 12),
    /**
     * <code>NOT_LICENSED = 13;</code>
     *
     * <pre>
     * not licensed
     * </pre>
     */
    NOT_LICENSED(13, 13),
    /**
     * <code>OPERATION_NOT_ALLOWED = 14;</code>
     *
     * <pre>
     * operation not allowed
     * </pre>
     */
    OPERATION_NOT_ALLOWED(14, 14),
    /**
     * <code>OPERATION_NOT_SUPPORTED = 15;</code>
     *
     * <pre>
     * operation not supported
     * </pre>
     */
    OPERATION_NOT_SUPPORTED(15, 15),
    /**
     * <code>DT_TYPE_IS_NOT_SERVED = 16;</code>
     *
     * <pre>
     * node does not serve expected DT type
     * </pre>
     */
    DT_TYPE_IS_NOT_SERVED(16, 16),
    /**
     * <code>REQUEST_PROCESSOR_NOT_INITIALIZED = 17;</code>
     *
     * <pre>
     * request processor not initialized
     * </pre>
     */
    REQUEST_PROCESSOR_NOT_INITIALIZED(17, 17),
    /**
     * <code>CACHE_INVALIDATION_FAILED = 18;</code>
     *
     * <pre>
     * cache invalidation failed
     * </pre>
     */
    CACHE_INVALIDATION_FAILED(18, 18),
    /**
     * <code>CACHE_STATE_INCONSISTENT = 19;</code>
     *
     * <pre>
     *to signal the client that its cache is dirty
     * </pre>
     */
    CACHE_STATE_INCONSISTENT(19, 19),
    /**
     * <code>KEYPOOL_LOCKED = 20;</code>
     */
    KEYPOOL_LOCKED(20, 20),
    /**
     * <code>INVALID_CLUSTER_KEY = 21;</code>
     */
    INVALID_CLUSTER_KEY(21, 21),
    /**
     * <code>CONFIG_NOT_FOUND = 22;</code>
     */
    CONFIG_NOT_FOUND(22, 22),
    /**
     * <code>REJECTED_EXECUTION = 23;</code>
     */
    REJECTED_EXECUTION(23, 23),
    /**
     * <code>BTREE_DUMP_FAILURE = 24;</code>
     */
    BTREE_DUMP_FAILURE(24, 24),
    /**
     * <code>REMOTE_INDEXSTORE_FAILURE = 25;</code>
     */
    REMOTE_INDEXSTORE_FAILURE(25, 25),
    /**
     * <code>UNSEALED_GEO_PROCESS_FAILURE = 27;</code>
     */
    UNSEALED_GEO_PROCESS_FAILURE(26, 27),
    ;

    /**
     * <code>READY = 0;</code>
     */
    public static final int READY_VALUE = 0;
    /**
     * <code>NOT_INITIALIZED = 1;</code>
     *
     * <pre>
     * DirectoryTable is not initialized yet
     * </pre>
     */
    public static final int NOT_INITIALIZED_VALUE = 1;
    /**
     * <code>INITIALIZE_FAILED = 2;</code>
     *
     * <pre>
     * DT init failure
     * </pre>
     */
    public static final int INITIALIZE_FAILED_VALUE = 2;
    /**
     * <code>STOP_SERVING_FOR_FAILOVER = 3;</code>
     *
     * <pre>
     * DT set stop serving flag
     * </pre>
     */
    public static final int STOP_SERVING_FOR_FAILOVER_VALUE = 3;
    /**
     * <code>NOT_SERVED = 4;</code>
     *
     * <pre>
     * DirectoryTable is not served by server
     * </pre>
     */
    public static final int NOT_SERVED_VALUE = 4;
    /**
     * <code>SERVED_BUT_NOT_EFFECTIVE = 5;</code>
     *
     * <pre>
     * DirectoryTable is served but not effective
     * </pre>
     */
    public static final int SERVED_BUT_NOT_EFFECTIVE_VALUE = 5;
    /**
     * <code>SERVED_BUT_LEASE_EXPIRED = 6;</code>
     *
     * <pre>
     * DirectoryTable is served but lease has expired
     * </pre>
     */
    public static final int SERVED_BUT_LEASE_EXPIRED_VALUE = 6;
    /**
     * <code>SERVED_BUT_WRONG_VERSION = 7;</code>
     *
     * <pre>
     * DirectoryTable is served but with wrong version
     * </pre>
     */
    public static final int SERVED_BUT_WRONG_VERSION_VALUE = 7;
    /**
     * <code>SERVICE_BUSY = 8;</code>
     *
     * <pre>
     * DirectoryTable is busy to process request
     * </pre>
     */
    public static final int SERVICE_BUSY_VALUE = 8;
    /**
     * <code>UNKNOWN_REQUEST = 9;</code>
     *
     * <pre>
     * DirectoryTable doesn't know this request.
     * During upgrade, the old server may receive the new request, reject it.
     * </pre>
     */
    public static final int UNKNOWN_REQUEST_VALUE = 9;
    /**
     * <code>INTERNAL_ERROR = 10;</code>
     *
     * <pre>
     * unknown internal error.
     * </pre>
     */
    public static final int INTERNAL_ERROR_VALUE = 10;
    /**
     * <code>DT_PAUSE_SERVING = 11;</code>
     *
     * <pre>
     * DirectoryTable is paused
     * </pre>
     */
    public static final int DT_PAUSE_SERVING_VALUE = 11;
    /**
     * <code>TIMEOUT = 12;</code>
     *
     * <pre>
     * request timedout
     * </pre>
     */
    public static final int TIMEOUT_VALUE = 12;
    /**
     * <code>NOT_LICENSED = 13;</code>
     *
     * <pre>
     * not licensed
     * </pre>
     */
    public static final int NOT_LICENSED_VALUE = 13;
    /**
     * <code>OPERATION_NOT_ALLOWED = 14;</code>
     *
     * <pre>
     * operation not allowed
     * </pre>
     */
    public static final int OPERATION_NOT_ALLOWED_VALUE = 14;
    /**
     * <code>OPERATION_NOT_SUPPORTED = 15;</code>
     *
     * <pre>
     * operation not supported
     * </pre>
     */
    public static final int OPERATION_NOT_SUPPORTED_VALUE = 15;
    /**
     * <code>DT_TYPE_IS_NOT_SERVED = 16;</code>
     *
     * <pre>
     * node does not serve expected DT type
     * </pre>
     */
    public static final int DT_TYPE_IS_NOT_SERVED_VALUE = 16;
    /**
     * <code>REQUEST_PROCESSOR_NOT_INITIALIZED = 17;</code>
     *
     * <pre>
     * request processor not initialized
     * </pre>
     */
    public static final int REQUEST_PROCESSOR_NOT_INITIALIZED_VALUE = 17;
    /**
     * <code>CACHE_INVALIDATION_FAILED = 18;</code>
     *
     * <pre>
     * cache invalidation failed
     * </pre>
     */
    public static final int CACHE_INVALIDATION_FAILED_VALUE = 18;
    /**
     * <code>CACHE_STATE_INCONSISTENT = 19;</code>
     *
     * <pre>
     *to signal the client that its cache is dirty
     * </pre>
     */
    public static final int CACHE_STATE_INCONSISTENT_VALUE = 19;
    /**
     * <code>KEYPOOL_LOCKED = 20;</code>
     */
    public static final int KEYPOOL_LOCKED_VALUE = 20;
    /**
     * <code>INVALID_CLUSTER_KEY = 21;</code>
     */
    public static final int INVALID_CLUSTER_KEY_VALUE = 21;
    /**
     * <code>CONFIG_NOT_FOUND = 22;</code>
     */
    public static final int CONFIG_NOT_FOUND_VALUE = 22;
    /**
     * <code>REJECTED_EXECUTION = 23;</code>
     */
    public static final int REJECTED_EXECUTION_VALUE = 23;
    /**
     * <code>BTREE_DUMP_FAILURE = 24;</code>
     */
    public static final int BTREE_DUMP_FAILURE_VALUE = 24;
    /**
     * <code>REMOTE_INDEXSTORE_FAILURE = 25;</code>
     */
    public static final int REMOTE_INDEXSTORE_FAILURE_VALUE = 25;
    /**
     * <code>UNSEALED_GEO_PROCESS_FAILURE = 27;</code>
     */
    public static final int UNSEALED_GEO_PROCESS_FAILURE_VALUE = 27;


    public final int getNumber() { return value; }

    public static RemoteProcessStatus valueOf(int value) {
      switch (value) {
        case 0: return READY;
        case 1: return NOT_INITIALIZED;
        case 2: return INITIALIZE_FAILED;
        case 3: return STOP_SERVING_FOR_FAILOVER;
        case 4: return NOT_SERVED;
        case 5: return SERVED_BUT_NOT_EFFECTIVE;
        case 6: return SERVED_BUT_LEASE_EXPIRED;
        case 7: return SERVED_BUT_WRONG_VERSION;
        case 8: return SERVICE_BUSY;
        case 9: return UNKNOWN_REQUEST;
        case 10: return INTERNAL_ERROR;
        case 11: return DT_PAUSE_SERVING;
        case 12: return TIMEOUT;
        case 13: return NOT_LICENSED;
        case 14: return OPERATION_NOT_ALLOWED;
        case 15: return OPERATION_NOT_SUPPORTED;
        case 16: return DT_TYPE_IS_NOT_SERVED;
        case 17: return REQUEST_PROCESSOR_NOT_INITIALIZED;
        case 18: return CACHE_INVALIDATION_FAILED;
        case 19: return CACHE_STATE_INCONSISTENT;
        case 20: return KEYPOOL_LOCKED;
        case 21: return INVALID_CLUSTER_KEY;
        case 22: return CONFIG_NOT_FOUND;
        case 23: return REJECTED_EXECUTION;
        case 24: return BTREE_DUMP_FAILURE;
        case 25: return REMOTE_INDEXSTORE_FAILURE;
        case 27: return UNSEALED_GEO_PROCESS_FAILURE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RemoteProcessStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<RemoteProcessStatus>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RemoteProcessStatus>() {
            public RemoteProcessStatus findValueByNumber(int number) {
              return RemoteProcessStatus.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.getDescriptor().getEnumTypes().get(1);
    }

    private static final RemoteProcessStatus[] VALUES = values();

    public static RemoteProcessStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private RemoteProcessStatus(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.RemoteProcessStatus)
  }

  public interface FileOperationsPayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayload)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.CommandType commandType = 1;</code>
     */
    boolean hasCommandType();
    /**
     * <code>required .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.CommandType commandType = 1;</code>
     */
    io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType getCommandType();

    /**
     * <code>required string requestId = 2;</code>
     */
    boolean hasRequestId();
    /**
     * <code>required string requestId = 2;</code>
     */
    java.lang.String getRequestId();
    /**
     * <code>required string requestId = 2;</code>
     */
    com.google.protobuf.ByteString
        getRequestIdBytes();

    /**
     * <code>required string cos = 3;</code>
     *
     * <pre>
     * cos, type, keyHash and level are the fields in DirectoryKey class
     * </pre>
     */
    boolean hasCos();
    /**
     * <code>required string cos = 3;</code>
     *
     * <pre>
     * cos, type, keyHash and level are the fields in DirectoryKey class
     * </pre>
     */
    java.lang.String getCos();
    /**
     * <code>required string cos = 3;</code>
     *
     * <pre>
     * cos, type, keyHash and level are the fields in DirectoryKey class
     * </pre>
     */
    com.google.protobuf.ByteString
        getCosBytes();

    /**
     * <code>required string type = 4;</code>
     */
    boolean hasType();
    /**
     * <code>required string type = 4;</code>
     */
    java.lang.String getType();
    /**
     * <code>required string type = 4;</code>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <code>required int32 keyHash = 5;</code>
     */
    boolean hasKeyHash();
    /**
     * <code>required int32 keyHash = 5;</code>
     */
    int getKeyHash();

    /**
     * <code>required bytes payload = 6;</code>
     */
    boolean hasPayload();
    /**
     * <code>required bytes payload = 6;</code>
     */
    com.google.protobuf.ByteString getPayload();

    /**
     * <code>optional .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.RemoteProcessStatus remoteProcessStatus = 7;</code>
     */
    boolean hasRemoteProcessStatus();
    /**
     * <code>optional .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.RemoteProcessStatus remoteProcessStatus = 7;</code>
     */
    io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus getRemoteProcessStatus();

    /**
     * <code>optional int64 deprecated_for_now_sendTime = 8;</code>
     */
    boolean hasDeprecatedForNowSendTime();
    /**
     * <code>optional int64 deprecated_for_now_sendTime = 8;</code>
     */
    long getDeprecatedForNowSendTime();

    /**
     * <code>optional string failure = 9;</code>
     */
    boolean hasFailure();
    /**
     * <code>optional string failure = 9;</code>
     */
    java.lang.String getFailure();
    /**
     * <code>optional string failure = 9;</code>
     */
    com.google.protobuf.ByteString
        getFailureBytes();

    /**
     * <code>optional int32 level = 10 [default = 0];</code>
     */
    boolean hasLevel();
    /**
     * <code>optional int32 level = 10 [default = 0];</code>
     */
    int getLevel();

    /**
     * <code>optional int32 responsePort = 11 [default = 0];</code>
     */
    boolean hasResponsePort();
    /**
     * <code>optional int32 responsePort = 11 [default = 0];</code>
     */
    int getResponsePort();

    /**
     * <code>optional string serverIp = 12;</code>
     */
    boolean hasServerIp();
    /**
     * <code>optional string serverIp = 12;</code>
     */
    java.lang.String getServerIp();
    /**
     * <code>optional string serverIp = 12;</code>
     */
    com.google.protobuf.ByteString
        getServerIpBytes();

    /**
     * <code>optional string callerId = 13;</code>
     *
     * <pre>
     * caller id, default is client ip
     * </pre>
     */
    boolean hasCallerId();
    /**
     * <code>optional string callerId = 13;</code>
     *
     * <pre>
     * caller id, default is client ip
     * </pre>
     */
    java.lang.String getCallerId();
    /**
     * <code>optional string callerId = 13;</code>
     *
     * <pre>
     * caller id, default is client ip
     * </pre>
     */
    com.google.protobuf.ByteString
        getCallerIdBytes();

    /**
     * <code>optional bool noRetryOnFailure = 14 [default = false];</code>
     */
    boolean hasNoRetryOnFailure();
    /**
     * <code>optional bool noRetryOnFailure = 14 [default = false];</code>
     */
    boolean getNoRetryOnFailure();

    /**
     * <code>optional bool noRetryOnTimeout = 15 [default = false];</code>
     */
    boolean hasNoRetryOnTimeout();
    /**
     * <code>optional bool noRetryOnTimeout = 15 [default = false];</code>
     */
    boolean getNoRetryOnTimeout();

    /**
     * <code>optional bytes txcContext = 16;</code>
     */
    boolean hasTxcContext();
    /**
     * <code>optional bytes txcContext = 16;</code>
     */
    com.google.protobuf.ByteString getTxcContext();

    /**
     * <code>optional string clusterKey = 17;</code>
     */
    boolean hasClusterKey();
    /**
     * <code>optional string clusterKey = 17;</code>
     */
    java.lang.String getClusterKey();
    /**
     * <code>optional string clusterKey = 17;</code>
     */
    com.google.protobuf.ByteString
        getClusterKeyBytes();
  }
  /**
   * Protobuf type {@code io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayload}
   */
  public static final class FileOperationsPayload extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayload)
      FileOperationsPayloadOrBuilder {
    // Use FileOperationsPayload.newBuilder() to construct.
    private FileOperationsPayload(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FileOperationsPayload(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FileOperationsPayload defaultInstance;
    public static FileOperationsPayload getDefaultInstance() {
      return defaultInstance;
    }

    public FileOperationsPayload getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FileOperationsPayload(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType value = io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                commandType_ = value;
              }
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              requestId_ = bs;
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              cos_ = bs;
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              type_ = bs;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              keyHash_ = input.readInt32();
              break;
            }
            case 50: {
              bitField0_ |= 0x00000020;
              payload_ = input.readBytes();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus value = io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                remoteProcessStatus_ = value;
              }
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              deprecatedForNowSendTime_ = input.readInt64();
              break;
            }
            case 74: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000100;
              failure_ = bs;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              level_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              responsePort_ = input.readInt32();
              break;
            }
            case 98: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000800;
              serverIp_ = bs;
              break;
            }
            case 106: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00001000;
              callerId_ = bs;
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              noRetryOnFailure_ = input.readBool();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              noRetryOnTimeout_ = input.readBool();
              break;
            }
            case 130: {
              bitField0_ |= 0x00008000;
              txcContext_ = input.readBytes();
              break;
            }
            case 138: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00010000;
              clusterKey_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.internal_static_io_pravega_segmentstore_storage_impl_chunkstream_storageos_rpc_FileOperationsPayload_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.internal_static_io_pravega_segmentstore_storage_impl_chunkstream_storageos_rpc_FileOperationsPayload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload.class, io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload.Builder.class);
    }

    public static com.google.protobuf.Parser<FileOperationsPayload> PARSER =
        new com.google.protobuf.AbstractParser<FileOperationsPayload>() {
      public FileOperationsPayload parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FileOperationsPayload(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FileOperationsPayload> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int COMMANDTYPE_FIELD_NUMBER = 1;
    private io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType commandType_;
    /**
     * <code>required .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.CommandType commandType = 1;</code>
     */
    public boolean hasCommandType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.CommandType commandType = 1;</code>
     */
    public io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType getCommandType() {
      return commandType_;
    }

    public static final int REQUESTID_FIELD_NUMBER = 2;
    private java.lang.Object requestId_;
    /**
     * <code>required string requestId = 2;</code>
     */
    public boolean hasRequestId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string requestId = 2;</code>
     */
    public java.lang.String getRequestId() {
      java.lang.Object ref = requestId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          requestId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string requestId = 2;</code>
     */
    public com.google.protobuf.ByteString
        getRequestIdBytes() {
      java.lang.Object ref = requestId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        requestId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COS_FIELD_NUMBER = 3;
    private java.lang.Object cos_;
    /**
     * <code>required string cos = 3;</code>
     *
     * <pre>
     * cos, type, keyHash and level are the fields in DirectoryKey class
     * </pre>
     */
    public boolean hasCos() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required string cos = 3;</code>
     *
     * <pre>
     * cos, type, keyHash and level are the fields in DirectoryKey class
     * </pre>
     */
    public java.lang.String getCos() {
      java.lang.Object ref = cos_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          cos_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string cos = 3;</code>
     *
     * <pre>
     * cos, type, keyHash and level are the fields in DirectoryKey class
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCosBytes() {
      java.lang.Object ref = cos_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cos_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 4;
    private java.lang.Object type_;
    /**
     * <code>required string type = 4;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required string type = 4;</code>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string type = 4;</code>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int KEYHASH_FIELD_NUMBER = 5;
    private int keyHash_;
    /**
     * <code>required int32 keyHash = 5;</code>
     */
    public boolean hasKeyHash() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 keyHash = 5;</code>
     */
    public int getKeyHash() {
      return keyHash_;
    }

    public static final int PAYLOAD_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString payload_;
    /**
     * <code>required bytes payload = 6;</code>
     */
    public boolean hasPayload() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required bytes payload = 6;</code>
     */
    public com.google.protobuf.ByteString getPayload() {
      return payload_;
    }

    public static final int REMOTEPROCESSSTATUS_FIELD_NUMBER = 7;
    private io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus remoteProcessStatus_;
    /**
     * <code>optional .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.RemoteProcessStatus remoteProcessStatus = 7;</code>
     */
    public boolean hasRemoteProcessStatus() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.RemoteProcessStatus remoteProcessStatus = 7;</code>
     */
    public io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus getRemoteProcessStatus() {
      return remoteProcessStatus_;
    }

    public static final int DEPRECATED_FOR_NOW_SENDTIME_FIELD_NUMBER = 8;
    private long deprecatedForNowSendTime_;
    /**
     * <code>optional int64 deprecated_for_now_sendTime = 8;</code>
     */
    public boolean hasDeprecatedForNowSendTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int64 deprecated_for_now_sendTime = 8;</code>
     */
    public long getDeprecatedForNowSendTime() {
      return deprecatedForNowSendTime_;
    }

    public static final int FAILURE_FIELD_NUMBER = 9;
    private java.lang.Object failure_;
    /**
     * <code>optional string failure = 9;</code>
     */
    public boolean hasFailure() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional string failure = 9;</code>
     */
    public java.lang.String getFailure() {
      java.lang.Object ref = failure_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          failure_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string failure = 9;</code>
     */
    public com.google.protobuf.ByteString
        getFailureBytes() {
      java.lang.Object ref = failure_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        failure_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LEVEL_FIELD_NUMBER = 10;
    private int level_;
    /**
     * <code>optional int32 level = 10 [default = 0];</code>
     */
    public boolean hasLevel() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 level = 10 [default = 0];</code>
     */
    public int getLevel() {
      return level_;
    }

    public static final int RESPONSEPORT_FIELD_NUMBER = 11;
    private int responsePort_;
    /**
     * <code>optional int32 responsePort = 11 [default = 0];</code>
     */
    public boolean hasResponsePort() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 responsePort = 11 [default = 0];</code>
     */
    public int getResponsePort() {
      return responsePort_;
    }

    public static final int SERVERIP_FIELD_NUMBER = 12;
    private java.lang.Object serverIp_;
    /**
     * <code>optional string serverIp = 12;</code>
     */
    public boolean hasServerIp() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional string serverIp = 12;</code>
     */
    public java.lang.String getServerIp() {
      java.lang.Object ref = serverIp_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          serverIp_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string serverIp = 12;</code>
     */
    public com.google.protobuf.ByteString
        getServerIpBytes() {
      java.lang.Object ref = serverIp_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        serverIp_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CALLERID_FIELD_NUMBER = 13;
    private java.lang.Object callerId_;
    /**
     * <code>optional string callerId = 13;</code>
     *
     * <pre>
     * caller id, default is client ip
     * </pre>
     */
    public boolean hasCallerId() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional string callerId = 13;</code>
     *
     * <pre>
     * caller id, default is client ip
     * </pre>
     */
    public java.lang.String getCallerId() {
      java.lang.Object ref = callerId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          callerId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string callerId = 13;</code>
     *
     * <pre>
     * caller id, default is client ip
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCallerIdBytes() {
      java.lang.Object ref = callerId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        callerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NORETRYONFAILURE_FIELD_NUMBER = 14;
    private boolean noRetryOnFailure_;
    /**
     * <code>optional bool noRetryOnFailure = 14 [default = false];</code>
     */
    public boolean hasNoRetryOnFailure() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional bool noRetryOnFailure = 14 [default = false];</code>
     */
    public boolean getNoRetryOnFailure() {
      return noRetryOnFailure_;
    }

    public static final int NORETRYONTIMEOUT_FIELD_NUMBER = 15;
    private boolean noRetryOnTimeout_;
    /**
     * <code>optional bool noRetryOnTimeout = 15 [default = false];</code>
     */
    public boolean hasNoRetryOnTimeout() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional bool noRetryOnTimeout = 15 [default = false];</code>
     */
    public boolean getNoRetryOnTimeout() {
      return noRetryOnTimeout_;
    }

    public static final int TXCCONTEXT_FIELD_NUMBER = 16;
    private com.google.protobuf.ByteString txcContext_;
    /**
     * <code>optional bytes txcContext = 16;</code>
     */
    public boolean hasTxcContext() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional bytes txcContext = 16;</code>
     */
    public com.google.protobuf.ByteString getTxcContext() {
      return txcContext_;
    }

    public static final int CLUSTERKEY_FIELD_NUMBER = 17;
    private java.lang.Object clusterKey_;
    /**
     * <code>optional string clusterKey = 17;</code>
     */
    public boolean hasClusterKey() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional string clusterKey = 17;</code>
     */
    public java.lang.String getClusterKey() {
      java.lang.Object ref = clusterKey_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          clusterKey_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string clusterKey = 17;</code>
     */
    public com.google.protobuf.ByteString
        getClusterKeyBytes() {
      java.lang.Object ref = clusterKey_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clusterKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      commandType_ = io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType.RESPONSE_FAILURE;
      requestId_ = "";
      cos_ = "";
      type_ = "";
      keyHash_ = 0;
      payload_ = com.google.protobuf.ByteString.EMPTY;
      remoteProcessStatus_ = io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus.READY;
      deprecatedForNowSendTime_ = 0L;
      failure_ = "";
      level_ = 0;
      responsePort_ = 0;
      serverIp_ = "";
      callerId_ = "";
      noRetryOnFailure_ = false;
      noRetryOnTimeout_ = false;
      txcContext_ = com.google.protobuf.ByteString.EMPTY;
      clusterKey_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCommandType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRequestId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCos()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasKeyHash()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPayload()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, commandType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getRequestIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getCosBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getTypeBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, keyHash_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, payload_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, remoteProcessStatus_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt64(8, deprecatedForNowSendTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(9, getFailureBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, level_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, responsePort_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBytes(12, getServerIpBytes());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBytes(13, getCallerIdBytes());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBool(14, noRetryOnFailure_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBool(15, noRetryOnTimeout_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBytes(16, txcContext_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeBytes(17, getClusterKeyBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, commandType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getRequestIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getCosBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getTypeBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, keyHash_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, payload_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, remoteProcessStatus_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, deprecatedForNowSendTime_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, getFailureBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, level_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, responsePort_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(12, getServerIpBytes());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, getCallerIdBytes());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, noRetryOnFailure_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, noRetryOnTimeout_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(16, txcContext_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(17, getClusterKeyBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayload}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayload)
        io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayloadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.internal_static_io_pravega_segmentstore_storage_impl_chunkstream_storageos_rpc_FileOperationsPayload_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.internal_static_io_pravega_segmentstore_storage_impl_chunkstream_storageos_rpc_FileOperationsPayload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload.class, io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload.Builder.class);
      }

      // Construct using io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        commandType_ = io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType.RESPONSE_FAILURE;
        bitField0_ = (bitField0_ & ~0x00000001);
        requestId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        cos_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        keyHash_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        payload_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        remoteProcessStatus_ = io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus.READY;
        bitField0_ = (bitField0_ & ~0x00000040);
        deprecatedForNowSendTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        failure_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        level_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        responsePort_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        serverIp_ = "";
        bitField0_ = (bitField0_ & ~0x00000800);
        callerId_ = "";
        bitField0_ = (bitField0_ & ~0x00001000);
        noRetryOnFailure_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        noRetryOnTimeout_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        txcContext_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00008000);
        clusterKey_ = "";
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.internal_static_io_pravega_segmentstore_storage_impl_chunkstream_storageos_rpc_FileOperationsPayload_descriptor;
      }

      public io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload getDefaultInstanceForType() {
        return io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload.getDefaultInstance();
      }

      public io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload build() {
        io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload buildPartial() {
        io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload result = new io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.commandType_ = commandType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.requestId_ = requestId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cos_ = cos_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.keyHash_ = keyHash_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.payload_ = payload_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.remoteProcessStatus_ = remoteProcessStatus_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.deprecatedForNowSendTime_ = deprecatedForNowSendTime_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.failure_ = failure_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.level_ = level_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.responsePort_ = responsePort_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.serverIp_ = serverIp_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.callerId_ = callerId_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.noRetryOnFailure_ = noRetryOnFailure_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.noRetryOnTimeout_ = noRetryOnTimeout_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.txcContext_ = txcContext_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.clusterKey_ = clusterKey_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload) {
          return mergeFrom((io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload other) {
        if (other == io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload.getDefaultInstance()) return this;
        if (other.hasCommandType()) {
          setCommandType(other.getCommandType());
        }
        if (other.hasRequestId()) {
          bitField0_ |= 0x00000002;
          requestId_ = other.requestId_;
          onChanged();
        }
        if (other.hasCos()) {
          bitField0_ |= 0x00000004;
          cos_ = other.cos_;
          onChanged();
        }
        if (other.hasType()) {
          bitField0_ |= 0x00000008;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasKeyHash()) {
          setKeyHash(other.getKeyHash());
        }
        if (other.hasPayload()) {
          setPayload(other.getPayload());
        }
        if (other.hasRemoteProcessStatus()) {
          setRemoteProcessStatus(other.getRemoteProcessStatus());
        }
        if (other.hasDeprecatedForNowSendTime()) {
          setDeprecatedForNowSendTime(other.getDeprecatedForNowSendTime());
        }
        if (other.hasFailure()) {
          bitField0_ |= 0x00000100;
          failure_ = other.failure_;
          onChanged();
        }
        if (other.hasLevel()) {
          setLevel(other.getLevel());
        }
        if (other.hasResponsePort()) {
          setResponsePort(other.getResponsePort());
        }
        if (other.hasServerIp()) {
          bitField0_ |= 0x00000800;
          serverIp_ = other.serverIp_;
          onChanged();
        }
        if (other.hasCallerId()) {
          bitField0_ |= 0x00001000;
          callerId_ = other.callerId_;
          onChanged();
        }
        if (other.hasNoRetryOnFailure()) {
          setNoRetryOnFailure(other.getNoRetryOnFailure());
        }
        if (other.hasNoRetryOnTimeout()) {
          setNoRetryOnTimeout(other.getNoRetryOnTimeout());
        }
        if (other.hasTxcContext()) {
          setTxcContext(other.getTxcContext());
        }
        if (other.hasClusterKey()) {
          bitField0_ |= 0x00010000;
          clusterKey_ = other.clusterKey_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCommandType()) {
          
          return false;
        }
        if (!hasRequestId()) {
          
          return false;
        }
        if (!hasCos()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!hasKeyHash()) {
          
          return false;
        }
        if (!hasPayload()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.FileOperationsPayload) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType commandType_ = io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType.RESPONSE_FAILURE;
      /**
       * <code>required .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.CommandType commandType = 1;</code>
       */
      public boolean hasCommandType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.CommandType commandType = 1;</code>
       */
      public io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType getCommandType() {
        return commandType_;
      }
      /**
       * <code>required .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.CommandType commandType = 1;</code>
       */
      public Builder setCommandType(io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        commandType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.CommandType commandType = 1;</code>
       */
      public Builder clearCommandType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        commandType_ = io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.CommandType.RESPONSE_FAILURE;
        onChanged();
        return this;
      }

      private java.lang.Object requestId_ = "";
      /**
       * <code>required string requestId = 2;</code>
       */
      public boolean hasRequestId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string requestId = 2;</code>
       */
      public java.lang.String getRequestId() {
        java.lang.Object ref = requestId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            requestId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string requestId = 2;</code>
       */
      public com.google.protobuf.ByteString
          getRequestIdBytes() {
        java.lang.Object ref = requestId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          requestId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string requestId = 2;</code>
       */
      public Builder setRequestId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        requestId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string requestId = 2;</code>
       */
      public Builder clearRequestId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        requestId_ = getDefaultInstance().getRequestId();
        onChanged();
        return this;
      }
      /**
       * <code>required string requestId = 2;</code>
       */
      public Builder setRequestIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        requestId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object cos_ = "";
      /**
       * <code>required string cos = 3;</code>
       *
       * <pre>
       * cos, type, keyHash and level are the fields in DirectoryKey class
       * </pre>
       */
      public boolean hasCos() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string cos = 3;</code>
       *
       * <pre>
       * cos, type, keyHash and level are the fields in DirectoryKey class
       * </pre>
       */
      public java.lang.String getCos() {
        java.lang.Object ref = cos_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            cos_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string cos = 3;</code>
       *
       * <pre>
       * cos, type, keyHash and level are the fields in DirectoryKey class
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCosBytes() {
        java.lang.Object ref = cos_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cos_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string cos = 3;</code>
       *
       * <pre>
       * cos, type, keyHash and level are the fields in DirectoryKey class
       * </pre>
       */
      public Builder setCos(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        cos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string cos = 3;</code>
       *
       * <pre>
       * cos, type, keyHash and level are the fields in DirectoryKey class
       * </pre>
       */
      public Builder clearCos() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cos_ = getDefaultInstance().getCos();
        onChanged();
        return this;
      }
      /**
       * <code>required string cos = 3;</code>
       *
       * <pre>
       * cos, type, keyHash and level are the fields in DirectoryKey class
       * </pre>
       */
      public Builder setCosBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        cos_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object type_ = "";
      /**
       * <code>required string type = 4;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required string type = 4;</code>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            type_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string type = 4;</code>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string type = 4;</code>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string type = 4;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>required string type = 4;</code>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        type_ = value;
        onChanged();
        return this;
      }

      private int keyHash_ ;
      /**
       * <code>required int32 keyHash = 5;</code>
       */
      public boolean hasKeyHash() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 keyHash = 5;</code>
       */
      public int getKeyHash() {
        return keyHash_;
      }
      /**
       * <code>required int32 keyHash = 5;</code>
       */
      public Builder setKeyHash(int value) {
        bitField0_ |= 0x00000010;
        keyHash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 keyHash = 5;</code>
       */
      public Builder clearKeyHash() {
        bitField0_ = (bitField0_ & ~0x00000010);
        keyHash_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes payload = 6;</code>
       */
      public boolean hasPayload() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required bytes payload = 6;</code>
       */
      public com.google.protobuf.ByteString getPayload() {
        return payload_;
      }
      /**
       * <code>required bytes payload = 6;</code>
       */
      public Builder setPayload(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes payload = 6;</code>
       */
      public Builder clearPayload() {
        bitField0_ = (bitField0_ & ~0x00000020);
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }

      private io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus remoteProcessStatus_ = io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus.READY;
      /**
       * <code>optional .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.RemoteProcessStatus remoteProcessStatus = 7;</code>
       */
      public boolean hasRemoteProcessStatus() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.RemoteProcessStatus remoteProcessStatus = 7;</code>
       */
      public io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus getRemoteProcessStatus() {
        return remoteProcessStatus_;
      }
      /**
       * <code>optional .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.RemoteProcessStatus remoteProcessStatus = 7;</code>
       */
      public Builder setRemoteProcessStatus(io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        remoteProcessStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.RemoteProcessStatus remoteProcessStatus = 7;</code>
       */
      public Builder clearRemoteProcessStatus() {
        bitField0_ = (bitField0_ & ~0x00000040);
        remoteProcessStatus_ = io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayloads.RemoteProcessStatus.READY;
        onChanged();
        return this;
      }

      private long deprecatedForNowSendTime_ ;
      /**
       * <code>optional int64 deprecated_for_now_sendTime = 8;</code>
       */
      public boolean hasDeprecatedForNowSendTime() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int64 deprecated_for_now_sendTime = 8;</code>
       */
      public long getDeprecatedForNowSendTime() {
        return deprecatedForNowSendTime_;
      }
      /**
       * <code>optional int64 deprecated_for_now_sendTime = 8;</code>
       */
      public Builder setDeprecatedForNowSendTime(long value) {
        bitField0_ |= 0x00000080;
        deprecatedForNowSendTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 deprecated_for_now_sendTime = 8;</code>
       */
      public Builder clearDeprecatedForNowSendTime() {
        bitField0_ = (bitField0_ & ~0x00000080);
        deprecatedForNowSendTime_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object failure_ = "";
      /**
       * <code>optional string failure = 9;</code>
       */
      public boolean hasFailure() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional string failure = 9;</code>
       */
      public java.lang.String getFailure() {
        java.lang.Object ref = failure_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            failure_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string failure = 9;</code>
       */
      public com.google.protobuf.ByteString
          getFailureBytes() {
        java.lang.Object ref = failure_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          failure_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string failure = 9;</code>
       */
      public Builder setFailure(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        failure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string failure = 9;</code>
       */
      public Builder clearFailure() {
        bitField0_ = (bitField0_ & ~0x00000100);
        failure_ = getDefaultInstance().getFailure();
        onChanged();
        return this;
      }
      /**
       * <code>optional string failure = 9;</code>
       */
      public Builder setFailureBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        failure_ = value;
        onChanged();
        return this;
      }

      private int level_ ;
      /**
       * <code>optional int32 level = 10 [default = 0];</code>
       */
      public boolean hasLevel() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 level = 10 [default = 0];</code>
       */
      public int getLevel() {
        return level_;
      }
      /**
       * <code>optional int32 level = 10 [default = 0];</code>
       */
      public Builder setLevel(int value) {
        bitField0_ |= 0x00000200;
        level_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 level = 10 [default = 0];</code>
       */
      public Builder clearLevel() {
        bitField0_ = (bitField0_ & ~0x00000200);
        level_ = 0;
        onChanged();
        return this;
      }

      private int responsePort_ ;
      /**
       * <code>optional int32 responsePort = 11 [default = 0];</code>
       */
      public boolean hasResponsePort() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 responsePort = 11 [default = 0];</code>
       */
      public int getResponsePort() {
        return responsePort_;
      }
      /**
       * <code>optional int32 responsePort = 11 [default = 0];</code>
       */
      public Builder setResponsePort(int value) {
        bitField0_ |= 0x00000400;
        responsePort_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 responsePort = 11 [default = 0];</code>
       */
      public Builder clearResponsePort() {
        bitField0_ = (bitField0_ & ~0x00000400);
        responsePort_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object serverIp_ = "";
      /**
       * <code>optional string serverIp = 12;</code>
       */
      public boolean hasServerIp() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional string serverIp = 12;</code>
       */
      public java.lang.String getServerIp() {
        java.lang.Object ref = serverIp_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            serverIp_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string serverIp = 12;</code>
       */
      public com.google.protobuf.ByteString
          getServerIpBytes() {
        java.lang.Object ref = serverIp_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          serverIp_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string serverIp = 12;</code>
       */
      public Builder setServerIp(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        serverIp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string serverIp = 12;</code>
       */
      public Builder clearServerIp() {
        bitField0_ = (bitField0_ & ~0x00000800);
        serverIp_ = getDefaultInstance().getServerIp();
        onChanged();
        return this;
      }
      /**
       * <code>optional string serverIp = 12;</code>
       */
      public Builder setServerIpBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
        serverIp_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object callerId_ = "";
      /**
       * <code>optional string callerId = 13;</code>
       *
       * <pre>
       * caller id, default is client ip
       * </pre>
       */
      public boolean hasCallerId() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional string callerId = 13;</code>
       *
       * <pre>
       * caller id, default is client ip
       * </pre>
       */
      public java.lang.String getCallerId() {
        java.lang.Object ref = callerId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            callerId_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string callerId = 13;</code>
       *
       * <pre>
       * caller id, default is client ip
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCallerIdBytes() {
        java.lang.Object ref = callerId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          callerId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string callerId = 13;</code>
       *
       * <pre>
       * caller id, default is client ip
       * </pre>
       */
      public Builder setCallerId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        callerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string callerId = 13;</code>
       *
       * <pre>
       * caller id, default is client ip
       * </pre>
       */
      public Builder clearCallerId() {
        bitField0_ = (bitField0_ & ~0x00001000);
        callerId_ = getDefaultInstance().getCallerId();
        onChanged();
        return this;
      }
      /**
       * <code>optional string callerId = 13;</code>
       *
       * <pre>
       * caller id, default is client ip
       * </pre>
       */
      public Builder setCallerIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        callerId_ = value;
        onChanged();
        return this;
      }

      private boolean noRetryOnFailure_ ;
      /**
       * <code>optional bool noRetryOnFailure = 14 [default = false];</code>
       */
      public boolean hasNoRetryOnFailure() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bool noRetryOnFailure = 14 [default = false];</code>
       */
      public boolean getNoRetryOnFailure() {
        return noRetryOnFailure_;
      }
      /**
       * <code>optional bool noRetryOnFailure = 14 [default = false];</code>
       */
      public Builder setNoRetryOnFailure(boolean value) {
        bitField0_ |= 0x00002000;
        noRetryOnFailure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool noRetryOnFailure = 14 [default = false];</code>
       */
      public Builder clearNoRetryOnFailure() {
        bitField0_ = (bitField0_ & ~0x00002000);
        noRetryOnFailure_ = false;
        onChanged();
        return this;
      }

      private boolean noRetryOnTimeout_ ;
      /**
       * <code>optional bool noRetryOnTimeout = 15 [default = false];</code>
       */
      public boolean hasNoRetryOnTimeout() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional bool noRetryOnTimeout = 15 [default = false];</code>
       */
      public boolean getNoRetryOnTimeout() {
        return noRetryOnTimeout_;
      }
      /**
       * <code>optional bool noRetryOnTimeout = 15 [default = false];</code>
       */
      public Builder setNoRetryOnTimeout(boolean value) {
        bitField0_ |= 0x00004000;
        noRetryOnTimeout_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool noRetryOnTimeout = 15 [default = false];</code>
       */
      public Builder clearNoRetryOnTimeout() {
        bitField0_ = (bitField0_ & ~0x00004000);
        noRetryOnTimeout_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString txcContext_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes txcContext = 16;</code>
       */
      public boolean hasTxcContext() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional bytes txcContext = 16;</code>
       */
      public com.google.protobuf.ByteString getTxcContext() {
        return txcContext_;
      }
      /**
       * <code>optional bytes txcContext = 16;</code>
       */
      public Builder setTxcContext(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        txcContext_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes txcContext = 16;</code>
       */
      public Builder clearTxcContext() {
        bitField0_ = (bitField0_ & ~0x00008000);
        txcContext_ = getDefaultInstance().getTxcContext();
        onChanged();
        return this;
      }

      private java.lang.Object clusterKey_ = "";
      /**
       * <code>optional string clusterKey = 17;</code>
       */
      public boolean hasClusterKey() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional string clusterKey = 17;</code>
       */
      public java.lang.String getClusterKey() {
        java.lang.Object ref = clusterKey_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clusterKey_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string clusterKey = 17;</code>
       */
      public com.google.protobuf.ByteString
          getClusterKeyBytes() {
        java.lang.Object ref = clusterKey_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clusterKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string clusterKey = 17;</code>
       */
      public Builder setClusterKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00010000;
        clusterKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string clusterKey = 17;</code>
       */
      public Builder clearClusterKey() {
        bitField0_ = (bitField0_ & ~0x00010000);
        clusterKey_ = getDefaultInstance().getClusterKey();
        onChanged();
        return this;
      }
      /**
       * <code>optional string clusterKey = 17;</code>
       */
      public Builder setClusterKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00010000;
        clusterKey_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayload)
    }

    static {
      defaultInstance = new FileOperationsPayload(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.FileOperationsPayload)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_pravega_segmentstore_storage_impl_chunkstream_storageos_rpc_FileOperationsPayload_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_io_pravega_segmentstore_storage_impl_chunkstream_storageos_rpc_FileOperationsPayload_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034FileOperationsPayloads.proto\022>io.prave" +
      "ga.segmentstore.storage.impl.chunkstream" +
      ".storageos.rpc\"\252\004\n\025FileOperationsPayload" +
      "\022`\n\013commandType\030\001 \002(\0162K.io.pravega.segme" +
      "ntstore.storage.impl.chunkstream.storage" +
      "os.rpc.CommandType\022\021\n\trequestId\030\002 \002(\t\022\013\n" +
      "\003cos\030\003 \002(\t\022\014\n\004type\030\004 \002(\t\022\017\n\007keyHash\030\005 \002(" +
      "\005\022\017\n\007payload\030\006 \002(\014\022p\n\023remoteProcessStatu" +
      "s\030\007 \001(\0162S.io.pravega.segmentstore.storag" +
      "e.impl.chunkstream.storageos.rpc.RemoteP",
      "rocessStatus\022#\n\033deprecated_for_now_sendT" +
      "ime\030\010 \001(\003\022\017\n\007failure\030\t \001(\t\022\020\n\005level\030\n \001(" +
      "\005:\0010\022\027\n\014responsePort\030\013 \001(\005:\0010\022\020\n\010serverI" +
      "p\030\014 \001(\t\022\020\n\010callerId\030\r \001(\t\022\037\n\020noRetryOnFa" +
      "ilure\030\016 \001(\010:\005false\022\037\n\020noRetryOnTimeout\030\017" +
      " \001(\010:\005false\022\022\n\ntxcContext\030\020 \001(\014\022\022\n\nclust" +
      "erKey\030\021 \001(\t*\201\340\002\n\013CommandType\022\035\n\020RESPONSE" +
      "_FAILURE\020\377\377\377\377\377\377\377\377\377\001\022\031\n\025REQUEST_CREATE_OB" +
      "JECT\020\000\022\032\n\026RESPONSE_CREATE_OBJECT\020\001\022\036\n\032RE" +
      "QUEST_COMPLETEMPU_OBJECT\020\002\022\037\n\033RESPONSE_C",
      "OMPLETEMPU_OBJECT\020\003\022\031\n\025REQUEST_UPDATE_OB" +
      "JECT\020\004\022\032\n\026RESPONSE_UPDATE_OBJECT\020\005\022\037\n\033RE" +
      "QUEST_MARKERUPDATE_OBJECT\020\006\022 \n\034RESPONSE_" +
      "MARKERUPDATE_OBJECT\020\007\022 \n\034REQUEST_REMOVEV" +
      "ERSION_OBJECT\020\010\022!\n\035RESPONSE_REMOVEVERSIO" +
      "N_OBJECT\020\t\022\030\n\024REQUEST_INSERT_ENTRY\020\n\022\031\n\025" +
      "RESPONSE_INSERT_ENTRY\020\013\022\025\n\021REQUEST_GET_E" +
      "NTRY\020\014\022\026\n\022RESPONSE_GET_ENTRY\020\r\022\030\n\024REQUES" +
      "T_REMOVE_ENTRY\020\016\022\031\n\025RESPONSE_REMOVE_ENTR" +
      "Y\020\017\022\026\n\022REQUEST_LIST_ENTRY\020\020\022\027\n\023RESPONSE_",
      "LIST_ENTRY\020\021\022\027\n\023REQUEST_UPLOAD_PART\020\022\022\030\n" +
      "\024RESPONSE_UPLOAD_PART\020\023\022\030\n\024REQUEST_ABORT" +
      "_UPLOAD\020\024\022\031\n\025RESPONSE_ABORT_UPLOAD\020\025\022$\n " +
      "REQUEST_CREATE_OBJECT_LIST_ENTRY\020\026\022%\n!RE" +
      "SPONSE_CREATE_OBJECT_LIST_ENTRY\020\027\022$\n REQ" +
      "UEST_REMOVE_OBJECT_LIST_ENTRY\020\030\022%\n!RESPO" +
      "NSE_REMOVE_OBJECT_LIST_ENTRY\020\031\022\020\n\014REQUES" +
      "T_PING\020\032\022\021\n\rRESPONSE_PING\020\033\022\030\n\024REQUEST_O" +
      "BJECT_QUERY\020\034\022\031\n\025RESPONSE_OBJECT_QUERY\020\035" +
      "\022\030\n\024REQUEST_CREATE_CHUNK\020\036\022\031\n\025RESPONSE_C",
      "REATE_CHUNK\020\037\022\030\n\024REQUEST_DELETE_CHUNK\020 \022" +
      "\031\n\025RESPONSE_DELETE_CHUNK\020!\022\026\n\022REQUEST_SE" +
      "AL_CHUNK\020\"\022\027\n\023RESPONSE_SEAL_CHUNK\020#\022\027\n\023R" +
      "EQUEST_QUERY_CHUNK\020$\022\030\n\024RESPONSE_QUERY_C" +
      "HUNK\020%\022\036\n\032REQUEST_REPORT_BLOCK_ERROR\020&\022\037" +
      "\n\033RESPONSE_REPORT_BLOCK_ERROR\020\'\022\026\n\022REQUE" +
      "ST_FREE_BLOCK\020(\022\027\n\023RESPONSE_FREE_BLOCK\020)" +
      "\022#\n\037REQUEST_CONFIRM_BLOCK_REFERENCE\020*\022$\n" +
      " RESPONSE_CONFIRM_BLOCK_REFERENCE\020+\022\032\n\026R" +
      "EQUEST_ALLOCATE_BLOCK\020,\022\033\n\027RESPONSE_ALLO",
      "CATE_BLOCK\020-\022\026\n\022REQUEST_JOB_SUBMIT\020.\022\027\n\023" +
      "RESPONSE_JOB_SUBMIT\020/\022\024\n\020REQUEST_JOB_DON" +
      "E\0200\022\025\n\021RESPONSE_JOB_DONE\0201\022\031\n\025REQUEST_IN" +
      "SERT_REGION\0202\022\032\n\026RESPONSE_INSERT_REGION\020" +
      "3\022\027\n\023REQUEST_LIST_REGION\0204\022\030\n\024RESPONSE_L" +
      "IST_REGION\0205\022\031\n\025REQUEST_GET_BPLUSTREE\0206\022" +
      "\032\n\026RESPONSE_GET_BPLUSTREE\0207\022\023\n\017REQUEST_D" +
      "T_SYNC\0208\022\024\n\020RESPONSE_DT_SYNC\0209\022\032\n\026REQUES" +
      "T_UPDATE_REGIONS\020:\022\033\n\027RESPONSE_UPDATE_RE" +
      "GIONS\020;\022\'\n#REQUEST_GET_BPLUSTREE_PARSER_",
      "MARKER\020<\022(\n$RESPONSE_GET_BPLUSTREE_PARSE" +
      "R_MARKER\020=\022\'\n#REQUEST_SET_BPLUSTREE_PARS" +
      "ER_MARKER\020>\022(\n$RESPONSE_SET_BPLUSTREE_PA" +
      "RSER_MARKER\020?\022%\n!REQUEST_GET_JOURNAL_PAR" +
      "SER_MARKER\020@\022&\n\"RESPONSE_GET_JOURNAL_PAR" +
      "SER_MARKER\020A\022%\n!REQUEST_SET_JOURNAL_PARS" +
      "ER_MARKER\020B\022&\n\"RESPONSE_SET_JOURNAL_PARS" +
      "ER_MARKER\020C\022\"\n\036REQUEST_CONFIRM_ALLOCATE_" +
      "BLOCK\020D\022#\n\037RESPONSE_CONFIRM_ALLOCATE_BLO" +
      "CK\020E\022&\n\"REQUEST_EXTEND_CHUNK_TIMEOUT_LEA",
      "SE\020F\022\'\n#RESPONSE_EXTEND_CHUNK_TIMEOUT_LE" +
      "ASE\020G\022\037\n\033REQUEST_INSERT_REMOTE_CHUNK\020H\022 " +
      "\n\034RESPONSE_INSERT_REMOTE_CHUNK\020I\022\037\n\033REQU" +
      "EST_UPDATE_REMOTE_CHUNK\020J\022 \n\034RESPONSE_UP" +
      "DATE_REMOTE_CHUNK\020K\022\037\n\033REQUEST_DELETE_RE" +
      "MOTE_CHUNK\020L\022 \n\034RESPONSE_DELETE_REMOTE_C" +
      "HUNK\020M\022\032\n\026REQUEST_GEO_START_COPY\020N\022\033\n\027RE" +
      "SPONSE_GEO_START_COPY\020O\022\033\n\027REQUEST_GEO_C" +
      "OMMIT_COPY\020P\022\034\n\030RESPONSE_GEO_COMMIT_COPY" +
      "\020Q\022!\n\035REQUEST_GEO_REMOVE_COPY_ENTRY\020R\022\"\n",
      "\036RESPONSE_GEO_REMOVE_COPY_ENTRY\020S\022-\n)REQ" +
      "UEST_GET_REFERENCE_COLLECTION_PROGRESS\020T" +
      "\022.\n*RESPONSE_GET_REFERENCE_COLLECTION_PR" +
      "OGRESS\020U\022\031\n\025REQUEST_SET_FAILPOINT\020V\022\032\n\026R" +
      "ESPONSE_SET_FAILPOINT\020W\022!\n\035REQUEST_INSER" +
      "T_OWNERSHIP_INFO\020X\022\"\n\036RESPONSE_INSERT_OW" +
      "NERSHIP_INFO\020Y\022!\n\035REQUEST_REMOVE_OWNERSH" +
      "IP_INFO\020Z\022\"\n\036RESPONSE_REMOVE_OWNERSHIP_I" +
      "NFO\020[\022\036\n\032REQUEST_GET_OWNERSHIP_INFO\020\\\022\037\n" +
      "\033RESPONSE_GET_OWNERSHIP_INFO\020]\022(\n$REQUES",
      "T_GET_OWNERSHIP_INFO_FOR_TYPES\020^\022)\n%RESP" +
      "ONSE_GET_OWNERSHIP_INFO_FOR_TYPES\020_\022!\n\035R" +
      "EQUEST_UPDATE_OWNERSHIP_INFO\020`\022\"\n\036RESPON" +
      "SE_UPDATE_OWNERSHIP_INFO\020a\022\034\n\030REQUEST_GE" +
      "O_DELETE_CHUNK\020b\022\035\n\031RESPONSE_GEO_DELETE_" +
      "CHUNK\020c\022\024\n\020REQUEST_DT_QUERY\020d\022\025\n\021RESPONS" +
      "E_DT_QUERY\020e\022\032\n\026REQUEST_LIST_BPLUSTREE\020f" +
      "\022\033\n\027RESPONSE_LIST_BPLUSTREE\020g\022\037\n\033REQUEST" +
      "_BLOCK_STATUS_UPDATE\020h\022 \n\034RESPONSE_BLOCK" +
      "_STATUS_UPDATE\020i\022\035\n\031REQUEST_MAINTENANCE_",
      "QUERY\020j\022\036\n\032RESPONSE_MAINTENANCE_QUERY\020k\022" +
      "$\n REQUEST_GET_INDEX_FORMAT_VERSION\020l\022%\n" +
      "!RESPONSE_GET_INDEX_FORMAT_VERSION\020m\022$\n " +
      "REQUEST_SET_INDEX_FORMAT_VERSION\020n\022%\n!RE" +
      "SPONSE_SET_INDEX_FORMAT_VERSION\020o\022 \n\034REQ" +
      "UEST_INSERT_REMOTE_REGION\020p\022!\n\035RESPONSE_" +
      "INSERT_REMOTE_REGION\020q\022&\n\"REQUEST_INSERT" +
      "_REMOTE_BTREE_MARKER\020r\022\'\n#RESPONSE_INSER" +
      "T_REMOTE_BTREE_MARKER\020s\022\037\n\033REQUEST_GEO_R" +
      "EPLICATE_CHUNK\020t\022 \n\034RESPONSE_GEO_REPLICA",
      "TE_CHUNK\020u\022#\n\037REQUEST_CHUNK_REPLICATION_" +
      "CHECK\020v\022$\n RESPONSE_CHUNK_REPLICATION_CH" +
      "ECK\020w\022,\n(REQUEST_GET_NEXT_CHECKER_MARKER" +
      "_POSITION\020x\022-\n)RESPONSE_GET_NEXT_CHECKER" +
      "_MARKER_POSITION\020y\022+\n\'REQUEST_INDEX_RECO" +
      "VERY_STATE_TRANSITION\020z\022,\n(RESPONSE_INDE" +
      "X_RECOVERY_STATE_TRANSITION\020{\022\035\n\031REQUEST" +
      "_REPGROUP_RECONFIG\020|\022\036\n\032RESPONSE_REPGROU" +
      "P_RECONFIG\020}\022&\n\"REQUEST_GET_INDEX_RECOVE" +
      "RY_TRACKER\020~\022\'\n#RESPONSE_GET_INDEX_RECOV",
      "ERY_TRACKER\020\177\022\"\n\035REQUEST_INSERT_RECOVERY" +
      "_POINT\020\200\001\022#\n\036RESPONSE_INSERT_RECOVERY_PO" +
      "INT\020\201\001\022!\n\034REQUEST_CLEAN_UP_BPLUS_TREES\020\202" +
      "\001\022\"\n\035RESPONSE_CLEAN_UP_BPLUS_TREES\020\203\001\022\'\n" +
      "\"REQUEST_DT_MEMORY_TABLE_FORCE_SEAL\020\204\001\022(" +
      "\n#RESPONSE_DT_MEMORY_TABLE_FORCE_SEAL\020\205\001" +
      "\022$\n\037REQUEST_CREATE_COMMODITY_DEVICE\020\206\001\022%" +
      "\n RESPONSE_CREATE_COMMODITY_DEVICE\020\207\001\022\035\n" +
      "\030REQUEST_CREATE_FS_DEVICE\020\210\001\022\036\n\031RESPONSE" +
      "_CREATE_FS_DEVICE\020\211\001\022-\n(REQUEST_CREATE_C",
      "OMMODITY_DEVICE_TO_OWNER\020\212\001\0220\n+RESPONSE_" +
      "CREATE_COMMODITY_DEVICE_FROM_OWNER\020\213\001\022&\n" +
      "!REQUEST_CREATE_FS_DEVICE_TO_OWNER\020\214\001\022)\n" +
      "$RESPONSE_CREATE_FS_DEVICE_FROM_OWNER\020\215\001" +
      "\022!\n\034REQUEST_LIST_HOSTING_DEVICES\020\216\001\022\"\n\035R" +
      "ESPONSE_LIST_HOSTING_DEVICES\020\217\001\022#\n\036REQUE" +
      "ST_DEVICE_CREATE_COMPLETE\020\220\001\022$\n\037RESPONSE" +
      "_DEVICE_CREATE_COMPLETE\020\221\001\022\036\n\031REQUEST_ST" +
      "ART_DT_CREATION\020\222\001\022\037\n\032RESPONSE_START_DT_" +
      "CREATION\020\223\001\022 \n\033REQUEST_HOSTING_DEVICE_IN",
      "FO\020\224\001\022!\n\034RESPONSE_HOSTING_DEVICE_INFO\020\225\001" +
      "\022&\n!RESPONSE_HOSTING_DEVICE_INFO_NULL\020\227\001" +
      "\022\034\n\027REQUEST_RESET_FAILPOINT\020\230\001\022\035\n\030RESPON" +
      "SE_RESET_FAILPOINT\020\231\001\022\037\n\032REQUEST_DT_BOOT" +
      "STRAP_QUERY\020\232\001\022 \n\033RESPONSE_DT_BOOTSTRAP_" +
      "QUERY\020\233\001\022!\n\034REQUEST_GC_TEST_GET_OBJ_INFO" +
      "\020\234\001\022\"\n\035RESPONSE_GC_TEST_GET_OBJ_INFO\020\235\001\022" +
      "\035\n\030REQUEST_NAMESPACE_CREATE\020\236\001\022\036\n\031RESPON" +
      "SE_NAMESPACE_CREATE\020\237\001\022\032\n\025REQUEST_NAMESP" +
      "ACE_GET\020\240\001\022\033\n\026RESPONSE_NAMESPACE_GET\020\241\001\022",
      "\035\n\030REQUEST_NAMESPACE_DELETE\020\242\001\022\036\n\031RESPON" +
      "SE_NAMESPACE_DELETE\020\243\001\022\035\n\030REQUEST_NAMESP" +
      "ACE_UPDATE\020\244\001\022\036\n\031RESPONSE_NAMESPACE_UPDA" +
      "TE\020\245\001\022\033\n\026REQUEST_NAMESPACE_LIST\020\246\001\022\034\n\027RE" +
      "SPONSE_NAMESPACE_LIST\020\247\001\022\030\n\023REQUEST_PAXO" +
      "S_QUERY\020\250\001\022\031\n\024RESPONSE_PAXOS_QUERY\020\251\001\022\031\n" +
      "\024REQUEST_PAXOS_ACCEPT\020\252\001\022\032\n\025RESPONSE_PAX" +
      "OS_ACCEPT\020\253\001\022\031\n\024REQUEST_PAXOS_COMMIT\020\254\001\022" +
      "\032\n\025RESPONSE_PAXOS_COMMIT\020\255\001\022\027\n\022REQUEST_P" +
      "AXOS_READ\020\256\001\022\030\n\023RESPONSE_PAXOS_READ\020\257\001\022\030",
      "\n\023REQUEST_PAXOS_ABORT\020\260\001\022\031\n\024RESPONSE_PAX" +
      "OS_ABORT\020\261\001\022-\n(REQUEST_GET_JOURNAL_CONSU" +
      "MPTION_PROGRESS\020\262\001\022.\n)RESPONSE_GET_JOURN" +
      "AL_CONSUMPTION_PROGRESS\020\263\001\0228\n3REQUEST_GE" +
      "T_BPLUSTREE_REFERENCE_COLLECTION_PROGRES" +
      "S\020\264\001\0229\n4RESPONSE_GET_BPLUSTREE_REFERENCE" +
      "_COLLECTION_PROGRESS\020\265\001\022-\n(REQUEST_SET_J" +
      "OURNAL_CONSUMPTION_PROGRESS\020\266\001\022.\n)RESPON" +
      "SE_SET_JOURNAL_CONSUMPTION_PROGRESS\020\267\001\022!" +
      "\n\034REQUEST_GET_CAPACITY_DETAILS\020\270\001\022\"\n\035RES",
      "PONSE_GET_CAPACITY_DETAILS\020\271\001\022\035\n\030REQUEST" +
      "_BATCH_EXEC_ENTRY\020\272\001\022\036\n\031RESPONSE_BATCH_E" +
      "XEC_ENTRY\020\273\001\022 \n\033REQUEST_PREPARE_COPY_OBJ" +
      "ECT\020\274\001\022!\n\034RESPONSE_PREPARE_COPY_OBJECT\020\275" +
      "\001\022$\n\037REQUEST_GET_LAST_JOURNAL_REGION\020\276\001\022" +
      "%\n RESPONSE_GET_LAST_JOURNAL_REGION\020\277\001\022+" +
      "\n&REQUEST_RESOURCE_TABLE_INSERT_COMPLETE" +
      "\020\300\001\022,\n\'RESPONSE_RESOURCE_TABLE_INSERT_CO" +
      "MPLETE\020\301\001\022#\n\036REQUEST_REFRESH_OWNERSHIP_I" +
      "NFO\020\302\001\022$\n\037RESPONSE_REFRESH_OWNERSHIP_INF",
      "O\020\303\001\022\031\n\024REQUEST_GEO_LIST_OBJ\020\304\001\022\032\n\025RESPO" +
      "NSE_GEO_LIST_OBJ\020\305\001\022!\n\034REQUEST_GEO_LIST_" +
      "OBJ_UPDATES\020\306\001\022\"\n\035RESPONSE_GEO_LIST_OBJ_" +
      "UPDATES\020\307\001\022\037\n\032REQUEST_GEO_LIST_OBJ_INDEX" +
      "\020\310\001\022 \n\033RESPONSE_GEO_LIST_OBJ_INDEX\020\311\001\022\"\n" +
      "\035REQUEST_GET_OBJECT_LIST_ENTRY\020\312\001\022#\n\036RES" +
      "PONSE_GET_OBJECT_LIST_ENTRY\020\313\001\022\037\n\032REQUES" +
      "T_BLOCK_REALLOCATION\020\314\001\022 \n\033RESPONSE_BLOC" +
      "K_REALLOCATION\020\315\001\022$\n\037BLOCK_REALLOCATION_" +
      "CONFIRMATION\020\316\001\022,\n\'REQUEST_BLOCK_REALLOC",
      "ATION_CONFIRMATION\020\320\001\022-\n(RESPONSE_BLOCK_" +
      "REALLOCATION_CONFIRMATION\020\321\001\022\030\n\023REQUEST_" +
      "USER_CREATE\020\322\001\022\031\n\024RESPONSE_USER_CREATE\020\323" +
      "\001\022\025\n\020REQUEST_USER_GET\020\324\001\022\026\n\021RESPONSE_USE" +
      "R_GET\020\325\001\022\030\n\023REQUEST_USER_DELETE\020\326\001\022\031\n\024RE" +
      "SPONSE_USER_DELETE\020\327\001\022\026\n\021REQUEST_USER_LI" +
      "ST\020\330\001\022\027\n\022RESPONSE_USER_LIST\020\331\001\022\034\n\027REQUES" +
      "T_USER_PASSWD_SET\020\332\001\022\035\n\030RESPONSE_USER_PA" +
      "SSWD_SET\020\333\001\022\037\n\032REQUEST_USER_PASSWD_DELET" +
      "E\020\334\001\022 \n\033RESPONSE_USER_PASSWD_DELETE\020\335\001\022\036",
      "\n\031REQUEST_USER_METADATA_SET\020\336\001\022\037\n\032RESPON" +
      "SE_USER_METADATA_SET\020\337\001\022\036\n\031REQUEST_USER_" +
      "METADATA_GET\020\340\001\022\037\n\032RESPONSE_USER_METADAT" +
      "A_GET\020\341\001\022\032\n\025REQUEST_BUCKET_CREATE\020\342\001\022\033\n\026" +
      "RESPONSE_BUCKET_CREATE\020\343\001\022\027\n\022REQUEST_BUC" +
      "KET_GET\020\344\001\022\030\n\023RESPONSE_BUCKET_GET\020\345\001\022\032\n\025" +
      "REQUEST_BUCKET_DELETE\020\346\001\022\033\n\026RESPONSE_BUC" +
      "KET_DELETE\020\347\001\022\032\n\025REQUEST_BUCKET_UPDATE\020\350" +
      "\001\022\033\n\026RESPONSE_BUCKET_UPDATE\020\351\001\022\030\n\023REQUES" +
      "T_BUCKET_LIST\020\352\001\022\031\n\024RESPONSE_BUCKET_LIST",
      "\020\353\001\022\033\n\026REQUEST_BUCKET_SET_ACL\020\354\001\022\034\n\027RESP" +
      "ONSE_BUCKET_SET_ACL\020\355\001\022\033\n\026REQUEST_BUCKET" +
      "_GET_ACL\020\356\001\022\034\n\027RESPONSE_BUCKET_GET_ACL\020\357" +
      "\001\022 \n\033REQUEST_BUCKET_CHANGE_OWNER\020\360\001\022!\n\034R" +
      "ESPONSE_BUCKET_CHANGE_OWNER\020\361\001\022!\n\034REQUES" +
      "T_BUCKET_SET_CORS_CONF\020\362\001\022\"\n\035RESPONSE_BU" +
      "CKET_SET_CORS_CONF\020\363\001\022)\n$REQUEST_BUCKET_" +
      "SET_EXPIRATION_POLICY\020\364\001\022*\n%RESPONSE_BUC" +
      "KET_SET_EXPIRATION_POLICY\020\365\001\022\"\n\035REQUEST_" +
      "BUCKET_SET_VERSIONING\020\366\001\022#\n\036RESPONSE_BUC",
      "KET_SET_VERSIONING\020\367\001\022$\n\037REQUEST_BUCKET_" +
      "DELETE_CORS_CONF\020\370\001\022%\n RESPONSE_BUCKET_D" +
      "ELETE_CORS_CONF\020\371\001\022,\n\'REQUEST_BUCKET_DEL" +
      "ETE_EXPIRATION_POLICY\020\372\001\022-\n(RESPONSE_BUC" +
      "KET_DELETE_EXPIRATION_POLICY\020\373\001\022)\n$REQUE" +
      "ST_BUCKET_SET_VERSIONING_SOURCE\020\374\001\022*\n%RE" +
      "SPONSE_BUCKET_SET_VERSIONING_SOURCE\020\375\001\022 " +
      "\n\033REQUEST_BUCKET_SET_METADATA\020\376\001\022!\n\034RESP" +
      "ONSE_BUCKET_SET_METADATA\020\377\001\022 \n\033REQUEST_B" +
      "UCKET_GET_METADATA\020\200\002\022!\n\034RESPONSE_BUCKET",
      "_GET_METADATA\020\201\002\022%\n REQUEST_BUCKET_SET_H" +
      "EAD_METADATA\020\202\002\022&\n!RESPONSE_BUCKET_SET_H" +
      "EAD_METADATA\020\203\002\022%\n REQUEST_BUCKET_GET_HE" +
      "AD_METADATA\020\204\002\022&\n!RESPONSE_BUCKET_GET_HE" +
      "AD_METADATA\020\205\002\022\037\n\032REQUEST_DEVICE_INFO_UP" +
      "DATE\020\206\002\022 \n\033RESPONSE_DEVICE_INFO_UPDATE\020\207" +
      "\002\022\026\n\021REQUEST_RG_CREATE\020\210\002\022\027\n\022RESPONSE_RG" +
      "_CREATE\020\211\002\022\026\n\021REQUEST_RG_UPDATE\020\212\002\022\027\n\022RE" +
      "SPONSE_RG_UPDATE\020\213\002\022\026\n\021REQUEST_RG_DELETE" +
      "\020\214\002\022\027\n\022RESPONSE_RG_DELETE\020\215\002\022\024\n\017REQUEST_",
      "RG_LIST\020\216\002\022\025\n\020RESPONSE_RG_LIST\020\217\002\022\023\n\016REQ" +
      "UEST_RG_GET\020\220\002\022\024\n\017RESPONSE_RG_GET\020\221\002\022\032\n\025" +
      "REQUEST_RG_GET_UPDATE\020\222\002\022\033\n\026RESPONSE_RG_" +
      "GET_UPDATE\020\223\002\022\032\n\025REQUEST_RG_UPD_UPDATE\020\224" +
      "\002\022\033\n\026RESPONSE_RG_UPD_UPDATE\020\225\002\022\032\n\025REQUES" +
      "T_RG_DEL_UPDATE\020\226\002\022\033\n\026RESPONSE_RG_DEL_UP" +
      "DATE\020\227\002\022\033\n\026REQUEST_RG_LIST_UPDATE\020\230\002\022\034\n\027" +
      "RESPONSE_RG_LIST_UPDATE\020\231\002\022\037\n\032REQUEST_RG" +
      "_KEY_LIST_UPDATE\020\232\002\022 \n\033RESPONSE_RG_KEY_L" +
      "IST_UPDATE\020\233\002\022\030\n\023REQUEST_RG_ZONE_ADD\020\234\002\022",
      "\031\n\024RESPONSE_RG_ZONE_ADD\020\235\002\022\030\n\023REQUEST_RG" +
      "_ZONE_DEL\020\236\002\022\031\n\024RESPONSE_RG_ZONE_DEL\020\237\002\022" +
      "\036\n\031REQUEST_START_DT_DELETION\020\240\002\022\037\n\032RESPO" +
      "NSE_START_DT_DELETION\020\241\002\022\037\n\032REQUEST_DATA" +
      "STORE_DELETION\020\242\002\022 \n\033RESPONSE_DATASTORE_" +
      "DELETION\020\243\002\022\034\n\027REQUEST_GET_GC_PROGRESS\020\244" +
      "\002\022\035\n\030RESPONSE_GET_GC_PROGRESS\020\245\002\022\035\n\030REQU" +
      "EST_GET_OB_CC_MARKER\020\246\002\022\036\n\031RESPONSE_GET_" +
      "OB_CC_MARKER\020\247\002\022\"\n\035REQUEST_CONFIG_USER_S" +
      "COPE_GET\020\250\002\022#\n\036RESPONSE_CONFIG_USER_SCOP",
      "E_GET\020\251\002\022\"\n\035REQUEST_CONFIG_USER_SCOPE_SE" +
      "T\020\252\002\022#\n\036RESPONSE_CONFIG_USER_SCOPE_SET\020\253" +
      "\002\022 \n\033REQUEST_CONFIG_HAS_USER_SET\020\254\002\022!\n\034R" +
      "ESPONSE_CONFIG_HAS_USER_SET\020\255\002\022\034\n\027REQUES" +
      "T_GET_FLOOR_ENTRY\020\256\002\022\035\n\030RESPONSE_GET_FLO" +
      "OR_ENTRY\020\257\002\022\035\n\030REQUEST_SET_CHUNK_STATUS\020" +
      "\260\002\022\036\n\031RESPONSE_SET_CHUNK_STATUS\020\261\002\022$\n\037RE" +
      "QUEST_GET_CT_PROGRESS_COUNTER\020\262\002\022%\n RESP" +
      "ONSE_GET_CT_PROGRESS_COUNTER\020\263\002\022\030\n\023REQUE" +
      "ST_PAXOS_ELECT\020\264\002\022\031\n\024RESPONSE_PAXOS_ELEC",
      "T\020\265\002\022!\n\034REQUEST_PAXOS_INITIATE_ABORT\020\266\002\022" +
      "\"\n\035RESPONSE_PAXOS_INITIATE_ABORT\020\267\002\022\036\n\031R" +
      "EQUEST_UPDATE_OBJECT_ACL\020\270\002\022\037\n\032RESPONSE_" +
      "UPDATE_OBJECT_ACL\020\271\002\022\026\n\021REQUEST_NODE_MOD" +
      "E\020\272\002\022\027\n\022RESPONSE_NODE_MODE\020\273\002\022$\n\037REQUEST" +
      "_PREPARE_FOR_MAINTENANCE\020\274\002\022%\n RESPONSE_" +
      "PREPARE_FOR_MAINTENANCE\020\275\002\022\030\n\023REQUEST_BT" +
      "REE_PRINT\020\276\002\022\031\n\024RESPONSE_BTREE_PRINT\020\277\002\022" +
      " \n\033REQUEST_RESOURCE_EXPANDABLE\020\300\002\022!\n\034RES" +
      "PONSE_RESOURCE_EXPANDABLE\020\301\002\022\036\n\031REQUEST_",
      "UPDATE_PARENT_DIR\020\306\002\022\037\n\032RESPONSE_UPDATE_" +
      "PARENT_DIR\020\307\002\022 \n\033REQUEST_BUCKET_BILLING_" +
      "INFO\020\310\002\022!\n\034RESPONSE_BUCKET_BILLING_INFO\020" +
      "\311\002\022\"\n\035REQUEST_BUCKET_BILLING_SAMPLE\020\312\002\022#" +
      "\n\036RESPONSE_BUCKET_BILLING_SAMPLE\020\313\002\022#\n\036R" +
      "EQUEST_NAMESPACE_BILLING_INFO\020\314\002\022$\n\037RESP" +
      "ONSE_NAMESPACE_BILLING_INFO\020\315\002\022%\n REQUES" +
      "T_NAMESPACE_BILLING_SAMPLE\020\316\002\022&\n!RESPONS" +
      "E_NAMESPACE_BILLING_SAMPLE\020\317\002\022,\n\'REQUEST" +
      "_INSERT_POSIVITIVE_ON_DISK_DELTA\020\320\002\022-\n(R",
      "ESPONSE_INSERT_POSIVITIVE_ON_DISK_DELTA\020" +
      "\321\002\022+\n&REQUEST_INSERT_NEGATIIVE_ON_DISK_D" +
      "ELTA\020\322\002\022,\n\'RESPONSE_INSERT_NEGATIIVE_ON_" +
      "DISK_DELTA\020\323\002\022\"\n\035REQUEST_INSERT_BANDWIDT" +
      "H_DATA\020\324\002\022#\n\036RESPONSE_INSERT_BANDWIDTH_D" +
      "ATA\020\325\002\022\034\n\027REQUEST_BUCKET_SET_LOCK\020\326\002\022\035\n\030" +
      "RESPONSE_BUCKET_SET_LOCK\020\327\002\022\032\n\025REQUEST_S" +
      "ET_USER_LOCK\020\330\002\022\033\n\026RESPONSE_SET_USER_LOC" +
      "K\020\331\002\0221\n,REQUEST_INSERT_OBMETERCOLLECTOR_" +
      "BTREE_MARKER\020\332\002\0222\n-RESPONSE_INSERT_OBMET",
      "ERCOLLECTOR_BTREE_MARKER\020\333\002\0221\n,REQUEST_R" +
      "EMOVE_OBMETERCOLLECTOR_BTREE_MARKER\020\334\002\0222" +
      "\n-RESPONSE_REMOVE_OBMETERCOLLECTOR_BTREE" +
      "_MARKER\020\335\002\022\035\n\030REQUEST_SET_BUCKET_QUOTA\020\336" +
      "\002\022\036\n\031RESPONSE_SET_BUCKET_QUOTA\020\337\002\022%\n REQ" +
      "UEST_SET_NAMESPACE_SOFT_QUOTA\020\340\002\022&\n!RESP" +
      "ONSE_SET_NAMESPACE_SOFT_QUOTA\020\341\002\022%\n REQU" +
      "EST_LIST_CHUNK_GC_SCAN_TASKS\020\342\002\022&\n!RESPO" +
      "NSE_LIST_CHUNK_GC_SCAN_TASKS\020\343\002\022%\n REQUE" +
      "ST_BLOCK_ASSIGNMENT_CONFIRM\020\344\002\022&\n!RESPON",
      "SE_BLOCK_ASSIGNMENT_CONFIRM\020\345\002\022\031\n\024REQUES" +
      "T_GET_DT_STATS\020\346\002\022\032\n\025RESPONSE_GET_DT_STA" +
      "TS\020\347\002\022(\n#REQUEST_GET_DT_CHUNK_CREATION_S" +
      "TATS\020\350\002\022)\n$RESPONSE_GET_DT_CHUNK_CREATIO" +
      "N_STATS\020\351\002\022 \n\033REQUEST_UPDATE_VNEST_CONFI" +
      "G\020\352\002\022!\n\034RESPONSE_UPDATE_VNEST_CONFIG\020\353\002\022" +
      "\032\n\025REQUEST_GET_DATANODES\020\354\002\022\033\n\026RESPONSE_" +
      "GET_DATANODES\020\355\002\022 \n\033REQUEST_GET_GROUPMEM" +
      "BERSHIP\020\356\002\022!\n\034RESPONSE_GET_GROUPMEMBERSH" +
      "IP\020\357\002\022\"\n\035REQUEST_GROUPMEMBER_BOOTSTRAP\020\360",
      "\002\022#\n\036RESPONSE_GROUPMEMBER_BOOTSTRAP\020\361\002\022&" +
      "\n!REQUEST_GROUPMEMBER_PRE_BOOTSTRAP\020\362\002\022\'" +
      "\n\"RESPONSE_GROUPMEMBER_PRE_BOOTSTRAP\020\363\002\022" +
      "$\n\037REQUEST_UNSEALED_GEO_START_COPY\020\364\002\022%\n" +
      " RESPONSE_UNSEALED_GEO_START_COPY\020\365\002\022%\n " +
      "REQUEST_UNSEALED_GEO_COMMIT_COPY\020\366\002\022&\n!R" +
      "ESPONSE_UNSEALED_GEO_COMMIT_COPY\020\367\002\022#\n\036R" +
      "EQUEST_UNSEALED_GEO_HEARTBEAT\020\370\002\022$\n\037RESP" +
      "ONSE_UNSEALED_GEO_HEARTBEAT\020\371\002\022+\n&REQUES" +
      "T_UNSEALED_GEO_COMMIT_COPY_RANGE\020\372\002\022,\n\'R",
      "ESPONSE_UNSEALED_GEO_COMMIT_COPY_RANGE\020\373" +
      "\002\022#\n\036REQUEST_UPDATE_CHUNK_SECONDARY\020\374\002\022$" +
      "\n\037RESPONSE_UPDATE_CHUNK_SECONDARY\020\375\002\022%\n " +
      "REQUEST_GET_OBJECT_OWNER_HISTORY\020\376\002\022&\n!R" +
      "ESPONSE_GET_OBJECT_OWNER_HISTORY\020\377\002\022(\n#R" +
      "EQUEST_CREATE_OBJECT_OWNER_HISTORY\020\200\003\022)\n" +
      "$RESPONSE_CREATE_OBJECT_OWNER_HISTORY\020\201\003" +
      "\022+\n&REQUEST_APPEND_TO_OBJECT_OWNER_HISTO" +
      "RY\020\202\003\022,\n\'RESPONSE_APPEND_TO_OBJECT_OWNER" +
      "_HISTORY\020\203\003\022\"\n\035REQUEST_GRAB_OBJECT_OWNER",
      "SHIP\020\204\003\022#\n\036RESPONSE_GRAB_OBJECT_OWNERSHI" +
      "P\020\205\003\022\035\n\030REQUEST_UPDATE_DATANODES\020\206\003\022\036\n\031R" +
      "ESPONSE_UPDATE_DATANODES\020\207\003\022\036\n\031REQUEST_G" +
      "ET_DATANODE_INFO\020\210\003\022\037\n\032RESPONSE_GET_DATA" +
      "NODE_INFO\020\211\003\022\031\n\024REQUEST_BUCKET_QUERY\020\212\003\022" +
      "\032\n\025RESPONSE_BUCKET_QUERY\020\213\003\022!\n\034REQUEST_T" +
      "EMP_FAILED_ZONE_GET\020\214\003\022\"\n\035RESPONSE_TEMP_" +
      "FAILED_ZONE_GET\020\215\003\022!\n\034REQUEST_TEMP_FAILE" +
      "D_ZONE_SET\020\216\003\022\"\n\035RESPONSE_TEMP_FAILED_ZO" +
      "NE_SET\020\217\003\022#\n\036REQUEST_TEMP_FAILED_ZONE_UN",
      "SET\020\220\003\022$\n\037RESPONSE_TEMP_FAILED_ZONE_UNSE" +
      "T\020\221\003\022+\n&REQUEST_TEMP_FAILED_ZONE_CHANGE_" +
      "STATUS\020\222\003\022,\n\'RESPONSE_TEMP_FAILED_ZONE_C" +
      "HANGE_STATUS\020\223\003\022!\n\034REQUEST_GET_BTREE_INI" +
      "T_STATS\020\224\003\022\"\n\035RESPONSE_GET_BTREE_INIT_ST" +
      "ATS\020\225\003\022\037\n\032REQUEST_UPDATE_ZK_ENSEMBLE\020\226\003\022" +
      " \n\033RESPONSE_UPDATE_ZK_ENSEMBLE\020\227\003\022\037\n\032REQ" +
      "UEST_REMOTE_VARRAY_LIST\020\230\003\022 \n\033RESPONSE_R" +
      "EMOTE_VARRAY_LIST\020\231\003\022+\n&REQUEST_GET_REFE" +
      "RENCED_REPO_FROM_BTREE\020\232\003\022,\n\'RESPONSE_GE",
      "T_REFERENCED_REPO_FROM_BTREE\020\233\003\022\032\n\025REQUE" +
      "ST_DELETE_OBJECT\020\234\003\022\033\n\026RESPONSE_DELETE_O" +
      "BJECT\020\235\003\022\031\n\024REQUEST_LIST_UPLOADS\020\236\003\022\032\n\025R" +
      "ESPONSE_LIST_UPLOADS\020\237\003\022\027\n\022REQUEST_LIST_" +
      "PARTS\020\240\003\022\030\n\023RESPONSE_LIST_PARTS\020\241\003\022\033\n\026RE" +
      "QUEST_INSERT_MPULIST\020\242\003\022\034\n\027RESPONSE_INSE" +
      "RT_MPULIST\020\243\003\022\035\n\030REQUEST_GET_REMOTE_ZONE" +
      "S\020\244\003\022\036\n\031RESPONSE_GET_REMOTE_ZONES\020\245\003\022\036\n\031" +
      "REQUEST_REJOIN_TASK_BATCH\020\246\003\022\037\n\032RESPONSE" +
      "_REJOIN_TASK_BATCH\020\247\003\022)\n$REQUEST_BUCKET_",
      "CHANGE_ISSTALEALLOWED\020\250\003\022*\n%RESPONSE_BUC" +
      "KET_CHANGE_ISSTALEALLOWED\020\251\003\022-\n(REQUEST_" +
      "PUT_REBUILD_REFTABLE_TASK_MARKER\020\252\003\022.\n)R" +
      "ESPONSE_PUT_REBUILD_REFTABLE_TASK_MARKER" +
      "\020\253\003\022&\n!REQUEST_REBUILD_OBJECT_REFERENCES" +
      "\020\254\003\022\'\n\"RESPONSE_REBUILD_OBJECT_REFERENCE" +
      "S\020\255\003\022,\n\'REQUEST_INSERT_ZONE_LEVEL_METERI" +
      "NG_INFO\020\256\003\022-\n(RESPONSE_INSERT_ZONE_LEVEL" +
      "_METERING_INFO\020\257\003\0221\n,REQUEST_INSERT_ZONE" +
      "_LEVEL_METERING_INFO_BULK\020\260\003\0222\n-RESPONSE",
      "_INSERT_ZONE_LEVEL_METERING_INFO_BULK\020\261\003" +
      "\022%\n REQUEST_ZONE_LEVEL_METERING_INFO\020\262\003\022" +
      "&\n!RESPONSE_ZONE_LEVEL_METERING_INFO\020\263\003\022" +
      "\'\n\"REQUEST_INSERT_BUCKET_INTERMEDIATE\020\264\003" +
      "\022(\n#RESPONSE_INSERT_BUCKET_INTERMEDIATE\020" +
      "\265\003\022*\n%REQUEST_INSERT_NAMESPACE_INTERMEDI" +
      "ATE\020\266\003\022+\n&RESPONSE_INSERT_NAMESPACE_INTE" +
      "RMEDIATE\020\267\003\022,\n\'REQUEST_INSERT_NODE_LEVEL" +
      "_METERING_INFO\020\270\003\022-\n(RESPONSE_INSERT_NOD" +
      "E_LEVEL_METERING_INFO\020\271\003\022%\n REQUEST_NODE",
      "_LEVEL_METERING_INFO\020\272\003\022&\n!RESPONSE_NODE" +
      "_LEVEL_METERING_INFO\020\273\003\022\031\n\024REQUEST_ALERT" +
      "_CREATE\020\274\003\022\032\n\025RESPONSE_ALERT_CREATE\020\275\003\022\026" +
      "\n\021REQUEST_ALERT_GET\020\276\003\022\027\n\022RESPONSE_ALERT" +
      "_GET\020\277\003\022\027\n\022REQUEST_ALERT_LIST\020\300\003\022\030\n\023RESP" +
      "ONSE_ALERT_LIST\020\301\003\022\031\n\024REQUEST_AUDIT_CREA" +
      "TE\020\302\003\022\032\n\025RESPONSE_AUDIT_CREATE\020\303\003\022\026\n\021REQ" +
      "UEST_AUDIT_GET\020\304\003\022\027\n\022RESPONSE_AUDIT_GET\020" +
      "\305\003\022\027\n\022REQUEST_AUDIT_LIST\020\306\003\022\030\n\023RESPONSE_" +
      "AUDIT_LIST\020\307\003\022\027\n\022REQUEST_PAXOS_LIST\020\310\003\022\030",
      "\n\023RESPONSE_PAXOS_LIST\020\311\003\022!\n\034REQUEST_GET_" +
      "COMPACTION_STATE\020\312\003\022\"\n\035RESPONSE_GET_COMP" +
      "ACTION_STATE\020\313\003\022#\n\036REQUEST_INSERT_ENTRY_" +
      "IF_ABSENT\020\314\003\022$\n\037RESPONSE_INSERT_ENTRY_IF" +
      "_ABSENT\020\315\003\022\"\n\035REQUEST_SET_BUCKET_HARD_QU" +
      "OTA\020\316\003\022#\n\036RESPONSE_SET_BUCKET_HARD_QUOTA" +
      "\020\317\003\022\033\n\026REQUEST_ERCA_HEARTBEAT\020\320\003\022\034\n\027RESP" +
      "ONSE_ERCA_HEARTBEAT\020\321\003\022\037\n\032REQUEST_CLIENT" +
      "_EC_COMPLETE\020\322\003\022 \n\033RESPONSE_CLIENT_EC_CO" +
      "MPLETE\020\323\003\022$\n\037REQUEST_GET_REMOTE_FILE_VER",
      "SION\020\326\003\022%\n RESPONSE_GET_REMOTE_FILE_VERS" +
      "ION\020\327\003\022+\n&REQUEST_GET_REMOTE_FILE_VOLATI" +
      "LE_IMAGE\020\330\003\022,\n\'RESPONSE_GET_REMOTE_FILE_" +
      "VOLATILE_IMAGE\020\331\003\022\035\n\030REQUEST_PAXOS_BULK_" +
      "QUERY\020\332\003\022\036\n\031RESPONSE_PAXOS_BULK_QUERY\020\333\003" +
      "\022\031\n\024REQUEST_PAXOS_DELETE\020\334\003\022\032\n\025RESPONSE_" +
      "PAXOS_DELETE\020\335\003\022\"\n\035REQUEST_PAXOS_DELETE_" +
      "COMPLETE\020\336\003\022#\n\036RESPONSE_PAXOS_DELETE_COM" +
      "PLETE\020\337\003\022%\n REQUEST_CREATE_NFS_EXPORT_DE" +
      "VICE\020\340\003\022&\n!RESPONSE_CREATE_NFS_EXPORT_DE",
      "VICE\020\341\003\022.\n)REQUEST_CREATE_NFS_EXPORT_DEV" +
      "ICE_TO_OWNER\020\342\003\0221\n,RESPONSE_CREATE_NFS_E" +
      "XPORT_DEVICE_FROM_OWNER\020\343\003\022\037\n\032REQUEST_NA" +
      "MESPACE_FOR_USER\020\344\003\022 \n\033RESPONSE_NAMESPAC" +
      "E_FOR_USER\020\345\003\022,\n\'REQUEST_WRITE_CURRENT_O" +
      "BJECT_OWNER_FLAG\020\346\003\022-\n(RESPONSE_WRITE_CU" +
      "RRENT_OBJECT_OWNER_FLAG\020\347\003\022\035\n\030REQUEST_OB" +
      "JECT_ACL_QUERY\020\350\003\022\036\n\031RESPONSE_OBJECT_ACL" +
      "_QUERY\020\351\003\022\027\n\022REQUEST_CHECK_NODE\020\352\003\022\030\n\023RE" +
      "SPONSE_CHECK_NODE\020\353\003\022\034\n\027REQUEST_DT_MEMOR",
      "Y_USAGE\020\354\003\022\035\n\030RESPONSE_DT_MEMORY_USAGE\020\355" +
      "\003\022\036\n\031REQUEST_CONFIG_ENCKEY_GET\020\356\003\022\037\n\032RES" +
      "PONSE_CONFIG_ENCKEY_GET\020\357\003\022 \n\033REQUEST_AU" +
      "THPROVIDER_CREATE\020\360\003\022!\n\034RESPONSE_AUTHPRO" +
      "VIDER_CREATE\020\361\003\022\035\n\030REQUEST_AUTHPROVIDER_" +
      "GET\020\362\003\022\036\n\031RESPONSE_AUTHPROVIDER_GET\020\363\003\022 " +
      "\n\033REQUEST_AUTHPROVIDER_UPDATE\020\364\003\022!\n\034RESP" +
      "ONSE_AUTHPROVIDER_UPDATE\020\365\003\022 \n\033REQUEST_A" +
      "UTHPROVIDER_DELETE\020\366\003\022!\n\034RESPONSE_AUTHPR" +
      "OVIDER_DELETE\020\367\003\022\036\n\031REQUEST_AUTHPROVIDER",
      "_LIST\020\370\003\022\037\n\032RESPONSE_AUTHPROVIDER_LIST\020\371" +
      "\003\022\035\n\030REQUEST_CHANGE_LOG_LEVEL\020\372\003\022\036\n\031RESP" +
      "ONSE_CHANGE_LOG_LEVEL\020\373\003\022,\n\'REQUEST_LATE" +
      "ST_ZONE_LEVEL_METERING_INFO\020\374\003\022-\n(RESPON" +
      "SE_LATEST_ZONE_LEVEL_METERING_INFO\020\375\003\022&\n" +
      "!REQUEST_ZONE_LEVEL_METERING_INFOS\020\376\003\022\'\n" +
      "\"RESPONSE_ZONE_LEVEL_METERING_INFOS\020\377\003\022," +
      "\n\'REQUEST_LATEST_NODE_LEVEL_METERING_INF" +
      "O\020\200\004\022-\n(RESPONSE_LATEST_NODE_LEVEL_METER" +
      "ING_INFO\020\201\004\022&\n!REQUEST_NODE_LEVEL_METERI",
      "NG_INFOS\020\202\004\022\'\n\"RESPONSE_NODE_LEVEL_METER" +
      "ING_INFOS\020\203\004\022\036\n\031REQUEST_PAXOS_INSERT_TAS" +
      "K\020\204\004\022\037\n\032RESPONSE_PAXOS_INSERT_TASK\020\205\004\022)\n" +
      "$REQUEST_REBUILD_OBJECT_OWNER_HISTORY\020\206\004" +
      "\022*\n%RESPONSE_REBUILD_OBJECT_OWNER_HISTOR" +
      "Y\020\207\004\022#\n\036REQUEST_ENABLE_NEST_DIAGNOSTIC\020\210" +
      "\004\022$\n\037RESPONSE_ENABLE_NEST_DIAGNOSTIC\020\211\004\022" +
      "&\n!REQUEST_XOR_DECODE_FOR_READ_CHUNK\020\212\004\022" +
      "\'\n\"RESPONSE_XOR_DECODE_FOR_READ_CHUNK\020\213\004" +
      "\022\031\n\024REQUEST_LIST_OBJECTS\020\214\004\022\032\n\025RESPONSE_",
      "LIST_OBJECTS\020\215\004\022!\n\034REQUEST_LIST_OBJECT_V" +
      "ERSIONS\020\216\004\022\"\n\035RESPONSE_LIST_OBJECT_VERSI" +
      "ONS\020\217\004\022\035\n\030REQUEST_CACHE_INVALIDATE\020\220\004\022\036\n" +
      "\031RESPONSE_CACHE_INVALIDATE\020\221\004\022\025\n\020REQUEST" +
      "_FIND_MPU\020\300\004\022\026\n\021RESPONSE_FIND_MPU\020\301\004\022\036\n\031" +
      "REQUEST_GET_MPU_OWNERSHIP\020\302\004\022\037\n\032RESPONSE" +
      "_GET_MPU_OWNERSHIP\020\303\004\022 \n\033REQUEST_RECYCLE" +
      "_MPU_T_ENTRY\020\304\004\022!\n\034RESPONSE_RECYCLE_MPU_" +
      "T_ENTRY\020\305\004\022.\n)REQUEST_DELETE_MPUSCANNER_" +
      "MARKER_PROGRESS\020\306\004\022/\n*RESPONSE_DELETE_MP",
      "USCANNER_MARKER_PROGRESS\020\307\004\022\035\n\030REQUEST_L" +
      "IST_ALL_UPLOADS\020\310\004\022\036\n\031RESPONSE_LIST_ALL_" +
      "UPLOADS\020\311\004\022\036\n\031REQUEST_UPDATE_REPO_USAGE\020" +
      "\312\004\022\037\n\032RESPONSE_UPDATE_REPO_USAGE\020\313\004\022)\n$R" +
      "EQUEST_INSERT_REMOTE_PARTIALGC_TASK\020\314\004\022*" +
      "\n%RESPONSE_INSERT_REMOTE_PARTIALGC_TASK\020" +
      "\315\004\022,\n\'REQUEST_INSERT_REMOTE_PARTIALGC_CO" +
      "NTEXT\020\316\004\022-\n(RESPONSE_INSERT_REMOTE_PARTI" +
      "ALGC_CONTEXT\020\317\004\022(\n#REQUEST_UPDATE_OBJECT" +
      "_FOR_PARTIALGC\020\320\004\022)\n$RESPONSE_UPDATE_OBJ",
      "ECT_FOR_PARTIALGC\020\321\004\022\032\n\025REQUEST_ALERT_SE" +
      "T_ACK\020\322\004\022\033\n\026RESPONSE_ALERT_SET_ACK\020\323\004\022\024\n" +
      "\017REQUEST_GET_KEK\020\324\004\022\025\n\020RESPONSE_GET_KEK\020" +
      "\325\004\022\024\n\017REQUEST_SET_KEK\020\326\004\022\025\n\020RESPONSE_SET" +
      "_KEK\020\327\004\022\025\n\020REQUEST_GET_STAT\020\330\004\022\026\n\021RESPON" +
      "SE_GET_STAT\020\331\004\022\026\n\021REQUEST_PUSH_STAT\020\332\004\022\027" +
      "\n\022RESPONSE_PUSH_STAT\020\333\004\022\030\n\023REQUEST_GET_H" +
      "ISTORY\020\334\004\022\031\n\024RESPONSE_GET_HISTORY\020\335\004\022\030\n\023" +
      "REQUEST_STAT_UPDATE\020\336\004\022\031\n\024RESPONSE_STAT_" +
      "UPDATE\020\337\004\022\030\n\023REQUEST_BACKUP_STAT\020\340\004\022\031\n\024R",
      "ESPONSE_BACKUP_STAT\020\341\004\022\030\n\023REQUEST_STAT_R" +
      "EMOVE\020\342\004\022\031\n\024RESPONSE_STAT_REMOVE\020\343\004\022\034\n\027R" +
      "EQUEST_STAT_RESERVED_5\020\344\004\022\034\n\027REQUEST_STA" +
      "T_RESERVED_6\020\345\004\022+\n&REQUEST_OVERTAKE_OWNE" +
      "R_FOR_FAILED_NODE\020\346\004\022,\n\'RESPONSE_OVERTAK" +
      "E_OWNER_FOR_FAILED_NODE\020\347\004\022\'\n\"REQUEST_SE" +
      "T_ACTIVEMASTERKEY_RECORD\020\350\004\022(\n#RESPONSE_" +
      "SET_ACTIVEMASTERKEY_RECORD\020\351\004\022!\n\034REQUEST" +
      "_SET_MASTERKEY_RECORD\020\352\004\022\"\n\035RESPONSE_SET" +
      "_MASTERKEY_RECORD\020\353\004\022!\n\034REQUEST_GET_MAST",
      "ERKEY_RECORD\020\354\004\022\"\n\035RESPONSE_GET_MASTERKE" +
      "Y_RECORD\020\355\004\022$\n\037REQUEST_CREATE_MASTERKEY_" +
      "RECORD\020\356\004\022%\n RESPONSE_CREATE_MASTERKEY_R" +
      "ECORD\020\357\004\022%\n REQUEST_PARTIALGC_CHECK_DELE" +
      "TING\020\360\004\022&\n!RESPONSE_PARTIALGC_CHECK_DELE" +
      "TING\020\361\004\022\"\n\035REQUEST_SET_BUCKET_ACTIVE_KEY" +
      "\020\362\004\022#\n\036RESPONSE_SET_BUCKET_ACTIVE_KEY\020\363\004" +
      "\022%\n REQUEST_SET_NAMESPACE_ACTIVE_KEY\020\364\004\022" +
      "&\n!RESPONSE_SET_NAMESPACE_ACTIVE_KEY\020\365\004\022" +
      "\'\n\"REQUEST_GET_ACTIVEMASTERKEY_RECORD\020\366\004",
      "\022(\n#RESPONSE_GET_ACTIVEMASTERKEY_RECORD\020" +
      "\367\004\022!\n\034REQUEST_ADD_GENERIC_METADATA\020\370\004\022\"\n" +
      "\035RESPONSE_ADD_GENERIC_METADATA\020\371\004\022$\n\037REQ" +
      "UEST_UPDATE_GENERIC_METADATA\020\372\004\022%\n RESPO" +
      "NSE_UPDATE_GENERIC_METADATA\020\373\004\022$\n\037REQUES" +
      "T_DELETE_GENERIC_METADATA\020\374\004\022%\n RESPONSE" +
      "_DELETE_GENERIC_METADATA\020\375\004\022\036\n\031REQUEST_C" +
      "LEAR_BUCKET_LOCK\020\376\004\022\037\n\032RESPONSE_CLEAR_BU" +
      "CKET_LOCK\020\377\004\022\036\n\031REQUEST_FILEKEYVAL_CREAT" +
      "E\020\204\005\022\037\n\032RESPONSE_FILEKEYVAL_CREATE\020\205\005\022\033\n",
      "\026REQUEST_FILEKEYVAL_GET\020\206\005\022\034\n\027RESPONSE_F" +
      "ILEKEYVAL_GET\020\207\005\022\036\n\031REQUEST_FILEKEYVAL_D" +
      "ELETE\020\210\005\022\037\n\032RESPONSE_FILEKEYVAL_DELETE\020\211" +
      "\005\022\036\n\031REQUEST_FILEKEYVAL_UPDATE\020\212\005\022\037\n\032RES" +
      "PONSE_FILEKEYVAL_UPDATE\020\213\005\022\034\n\027REQUEST_FI" +
      "LEKEYVAL_LIST\020\214\005\022\035\n\030RESPONSE_FILEKEYVAL_" +
      "LIST\020\215\005\022\034\n\027REQUEST_START_PARTIALGC\020\216\005\022\035\n" +
      "\030RESPONSE_START_PARTIALGC\020\217\005\022\035\n\030REQUEST_" +
      "FINISH_PARTIALGC\020\220\005\022\036\n\031RESPONSE_FINISH_P" +
      "ARTIALGC\020\221\005\022$\n\037REQUEST_PARTIALGC_CHUNK_R",
      "EFRESH\020\222\005\022%\n RESPONSE_PARTIALGC_CHUNK_RE" +
      "FRESH\020\223\005\022+\n&REQUEST_CHUNK_SET_SECONDARY_" +
      "REPLICATED\020\224\005\022,\n\'RESPONSE_CHUNK_SET_SECO" +
      "NDARY_REPLICATED\020\225\005\022/\n*REQUEST_BUCKET_SE" +
      "T_ISMETADATASEARCHENABLED\020\226\005\0220\n+RESPONSE" +
      "_BUCKET_SET_ISMETADATASEARCHENABLED\020\227\005\022:" +
      "\n5REQUEST_INGEST_SYSTEM_UNDER_TRANSFORMA" +
      "TION_REPO_CHUNK\020\230\005\022;\n6RESPONSE_INGEST_SY" +
      "STEM_UNDER_TRANSFORMATION_REPO_CHUNK\020\231\005\022" +
      " \n\033REQUEST_NFS_LIST_FILE_LOCKS\020\232\005\022!\n\034RES",
      "PONSE_NFS_LIST_FILE_LOCKS\020\233\005\022!\n\034REQUEST_" +
      "NFS_CREATE_FILE_LOCK\020\234\005\022\"\n\035RESPONSE_NFS_" +
      "CREATE_FILE_LOCK\020\235\005\022#\n\036REQUEST_NFS_LOOKU" +
      "P_PATH_BY_OID\020\236\005\022$\n\037RESPONSE_NFS_LOOKUP_" +
      "PATH_BY_OID\020\237\005\022(\n#REQUEST_DELETE_OBJECT_" +
      "OWNER_HISTORY\020\254\005\022)\n$RESPONSE_DELETE_OBJE" +
      "CT_OWNER_HISTORY\020\255\005\022*\n%REQUEST_TEMP_FAIL" +
      "ED_ZONE_HISTORY_LIST\020\256\005\022+\n&RESPONSE_TEMP" +
      "_FAILED_ZONE_HISTORY_LIST\020\257\005\022 \n\033REQUEST_" +
      "BUCKET_LIST_LOCALLY\020\260\005\022!\n\034RESPONSE_BUCKE",
      "T_LIST_LOCALLY\020\261\005\022(\n#REQUEST_GET_BTREE_O" +
      "NHEAPCACHE_STATS\020\262\005\022)\n$RESPONSE_GET_BTRE" +
      "E_ONHEAPCACHE_STATS\020\263\005\022\033\n\026REQUEST_CHUNK_" +
      "EC_RESET\020\302\005\022\034\n\027RESPONSE_CHUNK_EC_RESET\020\303" +
      "\005\022)\n$REQUEST_CREATE_OBJECT_MI_ENTRY_BATC" +
      "H\020\304\005\022*\n%RESPONSE_CREATE_OBJECT_MI_ENTRY_" +
      "BATCH\020\305\005\0225\n0REQUEST_CREATE_OBJECT_MI_REJ" +
      "OIN_TASK_ENTRY_BATCH\020\306\005\0226\n1RESPONSE_CREA" +
      "TE_OBJECT_MI_REJOIN_TASK_ENTRY_BATCH\020\307\005\022" +
      "5\n0REQUEST_REMOVE_OBJECT_MI_REJOIN_TASK_",
      "ENTRY_BATCH\020\310\005\0226\n1RESPONSE_REMOVE_OBJECT" +
      "_MI_REJOIN_TASK_ENTRY_BATCH\020\311\005\022&\n!REQUES" +
      "T_SKIP_CHUNKS_FOR_PARTIALGC\020\320\005\022\'\n\"RESPON" +
      "SE_SKIP_CHUNKS_FOR_PARTIALGC\020\321\005\022)\n$REQUE" +
      "ST_CHUNK_FIND_VALID_DATA_LENGTH\020\322\005\022*\n%RE" +
      "SPONSE_CHUNK_FIND_VALID_DATA_LENGTH\020\323\005\022#" +
      "\n\036REQUEST_UPDATE_BTREE_REFERENCE\020\324\005\022$\n\037R" +
      "ESPONSE_UPDATE_BTREE_REFERENCE\020\325\005\022\"\n\035REQ" +
      "UEST_SSM_PARTITION_COMMAND\020\264\006\022#\n\036RESPONS" +
      "E_SSM_PARTITION_COMMAND\020\265\006\022!\n\034REQUEST_SS",
      "M_PROGRESS_COMMAND\020\266\006\022\"\n\035RESPONSE_SSM_PR" +
      "OGRESS_COMMAND\020\267\006\022(\n#REQUEST_SSM_SPACECA" +
      "LCULATOR_COMMAND\020\270\006\022)\n$RERPONSE_SSM_SPAC" +
      "ECALCULATOR_COMMAND\020\271\006\022\037\n\032REQUEST_SSM_RE" +
      "CORD_COMMAND\020\272\006\022 \n\033RERPONSE_SSM_RECORD_C" +
      "OMMAND\020\273\006\022#\n\036REQUEST_SSM_FULL_MERGE_COMM" +
      "AND\020\274\006\022$\n\037RERPONSE_SSM_FULL_MERGE_COMMAN" +
      "D\020\275\006\022\035\n\030REQUEST_SSM_NOTIFICATION\020\276\006\022\036\n\031R" +
      "ERPONSE_SSM_NOTIFICATION\020\277\006\022\031\n\024REQUEST_S" +
      "SM_RESERVED\020\202\007\022\032\n\025RESPONSE_SSM_RESERVED\020",
      "\203\007\022\033\n\026REQUEST_TRANSFORMATION\020\204\007\022\034\n\027RESPO" +
      "NSE_TRANSFORMATION\020\205\007\022\037\n\032REQUEST_GIVE_OU" +
      "T_OWNERSHIP\020\216\007\022 \n\033RESPONSE_GIVE_OUT_OWNE" +
      "RSHIP\020\217\007\022\036\n\031REQUEST_CHECK_RECLAIMABLE\020\222\007" +
      "\022\037\n\032RESPONSE_CHECK_RECLAIMABLE\020\223\007\022\032\n\025REQ" +
      "UEST_RR_OPERATIONS\020\224\007\022\033\n\026RESPONSE_RR_OPE" +
      "RATIONS\020\225\007\022*\n%REQUEST_INSERT_REMOTE_REGI" +
      "ON_IN_BATCH\020\266\007\022+\n&RESPONSE_INSERT_REMOTE" +
      "_REGION_IN_BATCH\020\267\007\022*\n%REQUEST_GET_CHUNK" +
      "_GC_SCAN_TASK_VALUES\020\312\007\022+\n&RESPONSE_GET_",
      "CHUNK_GC_SCAN_TASK_VALUES\020\313\007\022\032\n\025REQUEST_" +
      "NFSDIR_CREATE\020\350\007\022\033\n\026RESPONSE_NFSDIR_CREA" +
      "TE\020\351\007\022\036\n\031REQUEST_NFSSYMLINK_CREATE\020\352\007\022\037\n" +
      "\032RESPONSE_NFSSYMLINK_CREATE\020\353\007\022\032\n\025REQUES" +
      "T_NFSDIR_DELETE\020\354\007\022\033\n\026RESPONSE_NFSDIR_DE" +
      "LETE\020\355\007\022\033\n\026REQUEST_NFSFILE_DELETE\020\356\007\022\034\n\027" +
      "RESPONSE_NFSFILE_DELETE\020\357\007\022\036\n\031REQUEST_NF" +
      "SSYMLINK_DELETE\020\360\007\022\037\n\032RESPONSE_NFSSYMLIN" +
      "K_DELETE\020\361\007\022&\n!REQUEST_NFS_GET_OID_AND_O" +
      "WNERZONE\020\362\007\022\'\n\"RESPONSE_NFS_GET_OID_AND_",
      "OWNERZONE\020\363\007\022\027\n\022REQUEST_NFS_LOOKUP\020\364\007\022\030\n" +
      "\023RESPONSE_NFS_LOOKUP\020\365\007\022\033\n\026REQUEST_NFSOB" +
      "JECT_COPY\020\366\007\022\034\n\027RESPONSE_NFSOBJECT_COPY\020" +
      "\367\007\022\035\n\030REQUEST_NFSFILE_TRUNCATE\020\370\007\022\036\n\031RES" +
      "PONSE_NFSFILE_TRUNCATE\020\371\007\022\'\n\"REQUEST_NFS" +
      "_ABORT_MULTIPART_UPLOAD\020\372\007\022(\n#RESPONSE_N" +
      "FS_ABORT_MULTIPART_UPLOAD\020\373\007\022\033\n\026REQUEST_" +
      "NFS_LIST_PARTS\020\374\007\022\034\n\027RESPONSE_NFS_LIST_P" +
      "ARTS\020\375\007\022\036\n\031REQUEST_NFS_GET_RETENTION\020\376\007\022" +
      "\037\n\032RESPONSE_NFS_GET_RETENTION\020\377\007\022\036\n\031REQU",
      "EST_NFS_SET_RETENTION\020\200\010\022\037\n\032RESPONSE_NFS" +
      "_SET_RETENTION\020\201\010\022\030\n\023REQUEST_NFS_GET_ACL" +
      "\020\202\010\022\031\n\024RESPONSE_NFS_GET_ACL\020\203\010\022\030\n\023REQUES" +
      "T_NFS_SET_ACL\020\204\010\022\031\n\024RESPONSE_NFS_SET_ACL" +
      "\020\205\010\022\033\n\026REQUEST_NFS_DELETE_UMD\020\206\010\022\034\n\027RESP" +
      "ONSE_NFS_DELETE_UMD\020\207\010\022 \n\033REQUEST_NFS_DE" +
      "LETE_HEAD_SMD\020\210\010\022!\n\034RESPONSE_NFS_DELETE_" +
      "HEAD_SMD\020\211\010\022\030\n\023REQUEST_NFS_SET_UMD\020\212\010\022\031\n" +
      "\024RESPONSE_NFS_SET_UMD\020\213\010\022\030\n\023REQUEST_NFS_" +
      "SET_SMD\020\214\010\022\031\n\024RESPONSE_NFS_SET_SMD\020\215\010\022\030\n",
      "\023REQUEST_NFS_GET_SMD\020\216\010\022\031\n\024RESPONSE_NFS_" +
      "GET_SMD\020\217\010\022\034\n\027REQUEST_NFS_GET_ALL_SMD\020\220\010" +
      "\022\035\n\030RESPONSE_NFS_GET_ALL_SMD\020\221\010\022\030\n\023REQUE" +
      "ST_NFS_GET_UMD\020\222\010\022\031\n\024RESPONSE_NFS_GET_UM" +
      "D\020\223\010\022\034\n\027REQUEST_NFS_GET_ALL_UMD\020\224\010\022\035\n\030RE" +
      "SPONSE_NFS_GET_ALL_UMD\020\225\010\022\030\n\023REQUEST_NFS" +
      "DIR_LIST\020\226\010\022\031\n\024RESPONSE_NFSDIR_LIST\020\227\010\022\035" +
      "\n\030REQUEST_NFSOBJECT_RENAME\020\230\010\022\036\n\031RESPONS" +
      "E_NFSOBJECT_RENAME\020\231\010\022\037\n\032REQUEST_NFSSYML" +
      "INK_GET_SMD\020\232\010\022 \n\033RESPONSE_NFSSYMLINK_GE",
      "T_SMD\020\233\010\022\033\n\026REQUEST_NFSFILE_CREATE\020\234\010\022\034\n" +
      "\027RESPONSE_NFSFILE_CREATE\020\235\010\022!\n\034REQUEST_F" +
      "ILEKEYVAL_GETANDINC\020\236\010\022\"\n\035RESPONSE_FILEK" +
      "EYVAL_GETANDINC\020\237\010\022$\n\037REQUEST_NFS_GET_AL" +
      "L_SMD_AND_UMD\020\240\010\022%\n RESPONSE_NFS_GET_ALL" +
      "_SMD_AND_UMD\020\241\010\022!\n\034REQUEST_NFS_REPLICATI" +
      "ON_INFO\020\242\010\022\"\n\035RESPONSE_NFS_REPLICATION_I" +
      "NFO\020\243\010\022\025\n\020REQUEST_MI_QUERY\020\244\010\022\026\n\021RESPONS" +
      "E_MI_QUERY\020\245\010\0223\n.REQUEST_GET_OBJECT_OWNE" +
      "RHISTORY_AND_LIST_ENTRY\020\246\010\0224\n/RESPONSE_G",
      "ET_OBJECT_OWNERHISTORY_AND_LIST_ENTRY\020\247\010" +
      "\022%\n REQUEST_LIST_OBJECT_LIST_ENTRIES\020\250\010\022" +
      "&\n!RESPONSE_LIST_OBJECT_LIST_ENTRIES\020\251\010\022" +
      ",\n\'REQUEST_GET_OR_CREATE_BUCKET_ACTIVE_K" +
      "EY\020\256\010\022-\n(RESPONSE_GET_OR_CREATE_BUCKET_A" +
      "CTIVE_KEY\020\257\010\022/\n*REQUEST_GET_OR_CREATE_NA" +
      "MESPACE_ACTIVE_KEY\020\260\010\0220\n+RESPONSE_GET_OR" +
      "_CREATE_NAMESPACE_ACTIVE_KEY\020\261\010\022!\n\034REQUE" +
      "ST_TAKE_BUCKET_SNAPSHOT\020\262\010\022\"\n\035RESPONSE_T" +
      "AKE_BUCKET_SNAPSHOT\020\263\010\022#\n\036REQUEST_REVERT",
      "_BUCKET_SNAPSHOT\020\264\010\022$\n\037RESPONSE_REVERT_B" +
      "UCKET_SNAPSHOT\020\265\010\022#\n\036REQUEST_DELETE_BUCK" +
      "ET_SNAPSHOT\020\266\010\022$\n\037RESPONSE_DELETE_BUCKET" +
      "_SNAPSHOT\020\267\010\022!\n\034REQUEST_LIST_BUCKET_SNAP" +
      "SHOT\020\270\010\022\"\n\035RESPONSE_LIST_BUCKET_SNAPSHOT" +
      "\020\271\010\022#\n\036REQUEST_REVERT_OBJECT_SNAPSHOT\020\272\010" +
      "\022$\n\037RESPONSE_REVERT_OBJECT_SNAPSHOT\020\273\010\022)" +
      "\n$REQUEST_DELETE_BUCKET_STATE_SNAPSHOT\020\274" +
      "\010\022*\n%RESPONSE_DELETE_BUCKET_STATE_SNAPSH" +
      "OT\020\275\010\022.\n)REQUEST_REVERT_OBJECT_LIST_ENTR",
      "Y_SNAPSHOT\020\276\010\022/\n*RESPONSE_REVERT_OBJECT_" +
      "LIST_ENTRY_SNAPSHOT\020\277\010\022 \n\033REQUEST_LIST_O" +
      "BJECTS_BY_TAG\020\314\010\022!\n\034RESPONSE_LIST_OBJECT" +
      "S_BY_TAG\020\315\010\022)\n$REQUEST_QUERY_LISTABLE_TA" +
      "G_HIERARCHY\020\316\010\022*\n%RESPONSE_QUERY_LISTABL" +
      "E_TAG_HIERARCHY\020\317\010\022!\n\034REQUEST_UPGRADE_LI" +
      "STABLE_TAG\020\320\010\022\"\n\035RESPONSE_UPGRADE_LISTAB" +
      "LE_TAG\020\321\010\022 \n\033REQUEST_GET_REJOIN_PROGRESS" +
      "\020\322\010\022!\n\034RESPONSE_GET_REJOIN_PROGRESS\020\323\010\022#" +
      "\n\036REQUEST_DELETE_REJOIN_PROGRESS\020\324\010\022$\n\037R",
      "ESPONSE_DELETE_REJOIN_PROGRESS\020\325\010\022\033\n\026REQ" +
      "UEST_OWNERSHIP_PING\020\260\t\022\034\n\027RESPONSE_OWNER" +
      "SHIP_PING\020\261\t\022!\n\034REQUEST_CHUNK_TABLE_DT_Q" +
      "UERY\020\262\t\022\"\n\035RESPONSE_CHUNK_TABLE_DT_QUERY" +
      "\020\263\t\022\033\n\026REQUEST_CHUNK_GC_READY\020\300\t\022\034\n\027RESP" +
      "ONSE_CHUNK_GC_READY\020\301\t\022\035\n\030REQUEST_VNEST_" +
      "DIAGNOSTIC\020\302\t\022\036\n\031RESPONSE_VNEST_DIAGNOST" +
      "IC\020\303\t\022(\n#REQUEST_INSERT_BANDWIDTH_DATA_G" +
      "ROUP\020\304\t\022)\n$RESPONSE_INSERT_BANDWIDTH_DAT" +
      "A_GROUP\020\305\t\022 \n\033REQUEST_POSITIVE_REF_MARKE",
      "R\020\306\t\022!\n\034RESPONSE_POSITIVE_REF_MARKER\020\307\t\022" +
      ",\n\'REQUEST_UPDATE_METERING_PROGRESS_MARK" +
      "ER\020\310\t\022-\n(RESPONSE_UPDATE_METERING_PROGRE" +
      "SS_MARKER\020\311\t\022/\n*REQUEST_GET_METERING_JOU" +
      "RNAL_PARSER_MARKER\020\312\t\0220\n+RESPONSE_GET_ME" +
      "TERING_JOURNAL_PARSER_MARKER\020\313\t\022/\n*REQUE" +
      "ST_SET_METERING_JOURNAL_PARSER_MARKER\020\314\t" +
      "\0220\n+RESPONSE_SET_METERING_JOURNAL_PARSER" +
      "_MARKER\020\315\t\022$\n\037REQUEST_NFS_LIST_FILES_BY_" +
      "PATHS\020\316\t\022%\n RESPONSE_NFS_LIST_FILES_BY_P",
      "ATHS\020\317\t\022\033\n\026REQUEST_REPLACE_BLOCKS\020\320\t\022\034\n\027" +
      "RESPONSE_REPLACE_BLOCKS\020\321\t\022\034\n\027REQUEST_NF" +
      "S_SET_SMD_UMD\020\322\t\022\035\n\030RESPONSE_NFS_SET_SMD" +
      "_UMD\020\323\t\022\033\n\026REQUEST_GET_CLUSTER_ID\020\324\t\022\034\n\027" +
      "RESPONSE_GET_CLUSTER_ID\020\325\t\022\036\n\031REQUEST_UP" +
      "DATE_CLUSTER_ID\020\326\t\022\037\n\032RESPONSE_UPDATE_CL" +
      "USTER_ID\020\327\t\022#\n\036REQUEST_CHECK_RG_CONTAINS" +
      "_ZONE\020\330\t\022$\n\037RESPONSE_CHECK_RG_CONTAINS_Z" +
      "ONE\020\331\t\022)\n$REQUEST_CREATE_HDFS_DELEGATION" +
      "_TOKEN\020\332\t\022*\n%RESPONSE_CREATE_HDFS_DELEGA",
      "TION_TOKEN\020\333\t\022&\n!REQUEST_GET_HDFS_DELEGA" +
      "TION_TOKEN\020\334\t\022\'\n\"RESPONSE_GET_HDFS_DELEG" +
      "ATION_TOKEN\020\335\t\022\'\n\"REQUEST_LIST_HDFS_DELE" +
      "GATION_TOKEN\020\336\t\022(\n#RESPONSE_LIST_HDFS_DE" +
      "LEGATION_TOKEN\020\337\t\022)\n$REQUEST_DELETE_HDFS" +
      "_DELEGATION_TOKEN\020\340\t\022*\n%RESPONSE_DELETE_" +
      "HDFS_DELEGATION_TOKEN\020\341\t\022)\n$REQUEST_UPDA" +
      "TE_HDFS_DELEGATION_TOKEN\020\342\t\022*\n%RESPONSE_" +
      "UPDATE_HDFS_DELEGATION_TOKEN\020\343\t\022!\n\034REQUE" +
      "ST_WRITE_HDFS_SALT_DATA\020\344\t\022\"\n\035RESPONSE_W",
      "RITE_HDFS_SALT_DATA\020\345\t\022 \n\033REQUEST_READ_H" +
      "DFS_SALT_DATA\020\346\t\022!\n\034RESPONSE_READ_HDFS_S" +
      "ALT_DATA\020\347\t\022\"\n\035REQUEST_DELETE_HDFS_SALT_" +
      "DATA\020\350\t\022#\n\036RESPONSE_DELETE_HDFS_SALT_DAT" +
      "A\020\351\t\022\"\n\035REQUEST_UPDATE_HDFS_SALT_DATA\020\352\t" +
      "\022#\n\036RESPONSE_UPDATE_HDFS_SALT_DATA\020\353\t\022(\n" +
      "#REQUEST_INSERT_BLOB_POS_START_MAJOR\020\354\t\022" +
      ")\n$RESPONSE_INSERT_BLOB_POS_START_MAJOR\020" +
      "\355\t\022%\n REQUEST_GET_BLOB_POS_START_MAJOR\020\356" +
      "\t\022&\n!RESPONSE_GET_BLOB_POS_START_MAJOR\020\357",
      "\t\022 \n\033REQUEST_ENABLE_GEO_REPLAYER\020\360\t\022!\n\034R" +
      "ESPONSE_ENABLE_GEO_REPLAYER\020\361\t\022!\n\034REQUES" +
      "T_DISABLE_GEO_REPLAYER\020\362\t\022\"\n\035RESPONSE_DI" +
      "SABLE_GEO_REPLAYER\020\363\t\022&\n!REQUEST_INSERT_" +
      "TSO_TRANSITION_KEY\020\366\t\022\'\n\"RESPONSE_INSERT" +
      "_TSO_TRANSITION_KEY\020\367\t\022&\n!REQUEST_REMOVE" +
      "_TSO_TRANSITION_KEY\020\370\t\022\'\n\"RESPONSE_REMOV" +
      "E_TSO_TRANSITION_KEY\020\371\t\022\036\n\031REQUEST_VNEST" +
      "_CONTROL_MSG\020\372\t\022\037\n\032RESPONSE_VNEST_CONTRO" +
      "L_MSG\020\373\t\022\034\n\027REQUEST_GET_CLUSTER_KEY\020\374\t\022\035",
      "\n\030RESPONSE_GET_CLUSTER_KEY\020\375\t\0224\n/REQUEST" +
      "_CREATE_OBJECT_LIST_ENTRY_FOR_TSO_BUCKET" +
      "\020\224\n\0225\n0RESPONSE_CREATE_OBJECT_LIST_ENTRY" +
      "_FOR_TSO_BUCKET\020\225\n\022%\n REQUEST_GEO_LIST_O" +
      "BJ_INDEX_RANGE\020\226\n\022&\n!RESPONSE_GEO_LIST_O" +
      "BJ_INDEX_RANGE\020\227\n\022\036\n\031REQUEST_BUCKET_SET_" +
      "POLICY\020\230\n\022\037\n\032RESPONSE_BUCKET_SET_POLICY\020" +
      "\231\n\022\036\n\031REQUEST_BUCKET_GET_POLICY\020\232\n\022\037\n\032RE" +
      "SPONSE_BUCKET_GET_POLICY\020\233\n\022(\n#REQUEST_B" +
      "UCKET_DELETE_BUCKET_POLICY\020\234\n\022)\n$RESPONS",
      "E_BUCKET_DELETE_BUCKET_POLICY\020\235\n\022\034\n\027REQU" +
      "EST_UPDATE_USER_TAG\020\236\n\022\035\n\030RESPONSE_UPDAT" +
      "E_USER_TAG\020\237\n\022\034\n\027REQUEST_DELETE_USER_TAG" +
      "\020\240\n\022\035\n\030RESPONSE_DELETE_USER_TAG\020\241\n\022\034\n\027RE" +
      "QUEST_USER_TAGS_QUERY\020\242\n\022\035\n\030RESPONSE_USE" +
      "R_TAGS_QUERY\020\243\n\0220\n+REQUEST_REMOVE_REBUIL" +
      "D_REFTABLE_TASK_MARKER\020\244\n\0221\n,RESPONSE_RE" +
      "MOVE_REBUILD_REFTABLE_TASK_MARKER\020\245\n\022\"\n\035" +
      "REQUEST_RESET_BOOTSTRAP_TASKS\020\306\n\022#\n\036RESP" +
      "ONSE_RESET_BOOTSTRAP_TASKS\020\307\n\022$\n\037REQUEST",
      "_INSERT_BOOTSTRAP_MARKER\020\310\n\022%\n RESPONSE_" +
      "INSERT_BOOTSTRAP_MARKER\020\311\n\022$\n\037REQUEST_RE" +
      "MOVE_BOOTSTRAP_MARKER\020\312\n\022%\n RESPONSE_REM" +
      "OVE_BOOTSTRAP_MARKER\020\313\n\022#\n\036REQUEST_INSER" +
      "T_BOOTSTRAP_TASKS\020\314\n\022$\n\037RESPONSE_INSERT_" +
      "BOOTSTRAP_TASKS\020\315\n\0224\n/REQUEST_RESET_BOOT" +
      "STRAP_TASKS_WITH_ADOPTED_TREE\020\316\n\0225\n0RESP" +
      "ONSE_RESET_BOOTSTRAP_TASKS_WITH_ADOPTED_" +
      "TREE\020\317\n\022!\n\034REQUEST_ALERT_FABRIC_SEQ_NUM\020" +
      "\340\n\022\"\n\035RESPONSE_ALERT_FABRIC_SEQ_NUM\020\341\n\022!",
      "\n\034REQUEST_AUDIT_FABRIC_SEQ_NUM\020\342\n\022\"\n\035RES" +
      "PONSE_AUDIT_FABRIC_SEQ_NUM\020\343\n\022!\n\034REQUEST" +
      "_GET_ORIGINAL_IP_LIST\020\344\n\022\"\n\035RESPONSE_GET" +
      "_ORIGINAL_IP_LIST\020\345\n\022\037\n\032REQUEST_GET_ORIG" +
      "INALIP_KEY\020\346\n\022 \n\033RESPONSE_GET_ORIGINALIP" +
      "_KEY\020\347\n\022\037\n\032REQUEST_PUT_ORIGINALIP_KEY\020\350\n" +
      "\022 \n\033RESPONSE_PUT_ORIGINALIP_KEY\020\351\n\0220\n+RE" +
      "QUEST_INSERT_GEO_NODE_LEVEL_METERING_INF" +
      "O\020\320\n\0221\n,RESPONSE_INSERT_GEO_NODE_LEVEL_M" +
      "ETERING_INFO\020\321\n\022.\n)REQUEST_GEO_RG_LEVEL_",
      "METERING_LATEST_INFO\020\322\n\022/\n*RESPONSE_GEO_" +
      "RG_LEVEL_METERING_LATEST_INFO\020\323\n\0220\n+REQU" +
      "EST_GEO_ZONE_LEVEL_LATEST_METERING_INFO\020" +
      "\324\n\0221\n,RESPONSE_GEO_ZONE_LEVEL_LATEST_MET" +
      "ERING_INFO\020\325\n\022.\n)REQUEST_GEO_RG_LEVEL_ME" +
      "TERING_SAMPLE_INFO\020\326\n\022/\n*RESPONSE_GEO_RG" +
      "_LEVEL_METERING_SAMPLE_INFO\020\327\n\0220\n+REQUES" +
      "T_GEO_ZONE_LEVEL_METERING_SAMPLE_INFO\020\330\n" +
      "\0221\n,RESPONSE_GEO_ZONE_LEVEL_METERING_SAM" +
      "PLE_INFO\020\331\n\0220\n+REQUEST_INSERT_JOURNAL_RE",
      "PLICATE_TASK_RANGE\020\332\n\0221\n,RESPONSE_INSERT" +
      "_JOURNAL_REPLICATE_TASK_RANGE\020\333\n\022)\n$REQU" +
      "EST_SET_NOTIFIED_FOR_REMOTE_ZONE\020\370\n\022*\n%R" +
      "ESPONSE_SET_NOTIFIED_FOR_REMOTE_ZONE\020\371\n\022" +
      "5\n0REQUEST_REDO_FAILURE_MODE_REPLAY_FOR_" +
      "REMOTE_ZONE\020\372\n\0226\n1RESPONSE_REDO_FAILURE_" +
      "MODE_REPLAY_FOR_REMOTE_ZONE\020\373\n\022\032\n\025REQUES" +
      "T_REMOVE_REGION\020\374\n\022\033\n\026RESPONSE_REMOVE_RE" +
      "GION\020\375\n\022\027\n\022REQUEST_TRIGGER_IC\020\376\n\022\030\n\023RESP" +
      "ONSE_TRIGGER_IC\020\377\n\022&\n!REQUEST_INSERT_REC",
      "ONSTRUCTION_KEY\020\200\013\022\'\n\"RESPONSE_INSERT_RE" +
      "CONSTRUCTION_KEY\020\201\013\022\032\n\025REQUEST_SENSOR_CR" +
      "EATE\020\202\013\022\033\n\026RESPONSE_SENSOR_CREATE\020\203\013\022\027\n\022" +
      "REQUEST_SENSOR_GET\020\204\013\022\030\n\023RESPONSE_SENSOR" +
      "_GET\020\205\013\022\030\n\023REQUEST_SENSOR_LIST\020\206\013\022\031\n\024RES" +
      "PONSE_SENSOR_LIST\020\207\013\022\032\n\025REQUEST_SENSOR_D" +
      "ELETE\020\210\013\022\033\n\026RESPONSE_SENSOR_DELETE\020\211\013\022\032\n" +
      "\025REQUEST_SENSOR_UPDATE\020\212\013\022\033\n\026RESPONSE_SE" +
      "NSOR_UPDATE\020\213\013\022\036\n\031REQUEST_SENSOR_STATUS_" +
      "GET\020\214\013\022\037\n\032RESPONSE_SENSOR_STATUS_GET\020\215\013\022",
      "\036\n\031REQUEST_SENSOR_STATUS_SET\020\216\013\022\037\n\032RESPO" +
      "NSE_SENSOR_STATUS_SET\020\217\013\022.\n)REQUEST_OBJE" +
      "CTGC_LOCAL_REFERENCE_PROGRESS\020\226\013\022/\n*RESP" +
      "ONSE_OBJECTGC_LOCAL_REFERENCE_PROGRESS\020\227" +
      "\013\022\033\n\026REQUEST_OBJECTGC_STATS\020\230\013\022\034\n\027RESPON" +
      "SE_OBJECTGC_STATS\020\231\013\022\037\n\032REQUEST_OBJECTGC" +
      "_NODE_TIME\020\232\013\022 \n\033RESPONSE_OBJECTGC_NODE_" +
      "TIME\020\233\013\022*\n%REQUEST_CHUNK_RANGE_REPLICATI" +
      "ON_CHECK\020\326\013\022+\n&RESPONSE_CHUNK_RANGE_REPL" +
      "ICATION_CHECK\020\327\013\022$\n\037REQUEST_OBJECT_REPLI",
      "CATION_INFO\020\330\013\022%\n RESPONSE_OBJECT_REPLIC" +
      "ATION_INFO\020\331\013\022/\n*REQUEST_GEO_CHECK_OBJEC" +
      "T_INDEX_REPLICATION\020\332\013\0220\n+RESPONSE_GEO_C" +
      "HECK_OBJECT_INDEX_REPLICATION\020\333\013\022#\n\036REQU" +
      "EST_POLL_SERVICE_READINESS\020\334\013\022$\n\037RESPONS" +
      "E_POLL_SERVICE_READINESS\020\335\013\022%\n REQUEST_I" +
      "NSERT_BUCKET_STAT_BATCH\020\336\013\022&\n!RESPONSE_I" +
      "NSERT_BUCKET_STAT_BATCH\020\337\013\022\036\n\031REQUEST_RE" +
      "CYCLE_MPU_PARTS\020\340\013\022\037\n\032RESPONSE_RECYCLE_M" +
      "PU_PARTS\020\341\013\022\024\n\017REQUEST_DT_PING\020\342\013\022\025\n\020RES",
      "PONSE_DT_PING\020\343\013\022!\n\034REQUEST_NFSOBJECT_MU" +
      "LTI_COPY\020\346\013\022\"\n\035RESPONSE_NFSOBJECT_MULTI_" +
      "COPY\020\347\013\022)\n$REQUEST_GET_METERING_PROGRESS" +
      "_MARKER\020\350\013\022*\n%RESPONSE_GET_METERING_PROG" +
      "RESS_MARKER\020\351\013\022&\n!REQUEST_LIST_BACKGROUN" +
      "D_OPERATORS\020\352\013\022\'\n\"RESPONSE_LIST_BACKGROU" +
      "ND_OPERATORS\020\353\013\022$\n\037REQUEST_GET_CAPACITY_" +
      "STATISTICS\020\354\013\022%\n RESPONSE_GET_CAPACITY_S" +
      "TATISTICS\020\355\013\022*\n%REQUEST_UPDATE_CHUNK_VER" +
      "IFICATION_SEQ\020\356\013\022+\n&RESPONSE_UPDATE_CHUN",
      "K_VERIFICATION_SEQ\020\357\013\022-\n(REQUEST_GET_CRO" +
      "SS_REFERENCE_CHECK_STATUS\020\360\013\022.\n)RESPONSE" +
      "_GET_CROSS_REFERENCE_CHECK_STATUS\020\361\013\0225\n0" +
      "REQUEST_CHECK_POSITIVE_REFERNCE_FOR_REMO" +
      "TE_CHUNK\020\362\013\0226\n1RESPONSE_CHECK_POSITIVE_R" +
      "EFERNCE_FOR_REMOTE_CHUNK\020\363\013\022,\n\'REQUEST_V" +
      "ERIFY_REFERENCE_FROM_REMOTE_RR\020\364\013\022-\n(RES" +
      "PONSE_VERIFY_REFERENCE_FROM_REMOTE_RR\020\365\013" +
      "\022 \n\033REQUEST_GET_RR_SEQUENCE_KEY\020\370\013\022 \n\033RE" +
      "PONSE_GET_RR_SEQUENCE_KEY\020\371\013\022%\n REQUEST_",
      "UPDATE_COPY_JOB_PROGRESS\020\372\013\022&\n!RESPONSE_" +
      "UPDATE_COPY_JOB_PROGRESS\020\373\013\022\'\n\"REQUEST_F" +
      "ORCE_CHUNK_GC_VERFICATION\020\374\013\022(\n#RESPONSE" +
      "_FORCE_CHUNK_GC_VERFICATION\020\375\013\022 \n\033REQUES" +
      "T_ALERT_POLICY_CREATE\020\376\013\022!\n\034RESPONSE_ALE" +
      "RT_POLICY_CREATE\020\377\013\022\035\n\030REQUEST_ALERT_POL" +
      "ICY_GET\020\200\014\022\036\n\031RESPONSE_ALERT_POLICY_GET\020" +
      "\201\014\022 \n\033REQUEST_ALERT_POLICY_DELETE\020\202\014\022!\n\034" +
      "RESPONSE_ALERT_POLICY_DELETE\020\203\014\022\036\n\031REQUE" +
      "ST_ALERT_POLICY_LIST\020\204\014\022\037\n\032RESPONSE_ALER",
      "T_POLICY_LIST\020\205\014\022*\n%REQUEST_UPDATE_PARTI" +
      "AL_GC_COPIED_DATA\020\206\014\022+\n&RESPONSE_UPDATE_" +
      "PARTIAL_GC_COPIED_DATA\020\207\014\022\035\n\030REQUEST_EKM" +
      "SERVER_CREATE\020\210\014\022\036\n\031RESPONSE_EKMSERVER_C" +
      "REATE\020\211\014\022\032\n\025REQUEST_EKMSERVER_GET\020\212\014\022\033\n\026" +
      "RESPONSE_EKMSERVER_GET\020\213\014\022\033\n\026REQUEST_EKM" +
      "SERVER_LIST\020\214\014\022\034\n\027RESPONSE_EKMSERVER_LIS" +
      "T\020\215\014\022\035\n\030REQUEST_EKMSERVER_DELETE\020\216\014\022\036\n\031R" +
      "ESPONSE_EKMSERVER_DELETE\020\217\014\022\035\n\030REQUEST_E" +
      "KMSERVER_UPDATE\020\220\014\022\036\n\031RESPONSE_EKMSERVER",
      "_UPDATE\020\221\014\022\036\n\031REQUEST_EKMCLUSTER_CREATE\020" +
      "\222\014\022\037\n\032RESPONSE_EKMCLUSTER_CREATE\020\223\014\022\033\n\026R" +
      "EQUEST_EKMCLUSTER_GET\020\224\014\022\034\n\027RESPONSE_EKM" +
      "CLUSTER_GET\020\225\014\022\034\n\027REQUEST_EKMCLUSTER_LIS" +
      "T\020\226\014\022\035\n\030RESPONSE_EKMCLUSTER_LIST\020\227\014\022\036\n\031R" +
      "EQUEST_EKMCLUSTER_DELETE\020\230\014\022\037\n\032RESPONSE_" +
      "EKMCLUSTER_DELETE\020\231\014\022\036\n\031REQUEST_EKMCLUST" +
      "ER_UPDATE\020\232\014\022\037\n\032RESPONSE_EKMCLUSTER_UPDA" +
      "TE\020\233\014\022\"\n\035REQUEST_EKMCLUSTER_STATUS_GET\020\234" +
      "\014\022#\n\036RESPONSE_EKMCLUSTER_STATUS_GET\020\235\014\022\"",
      "\n\035REQUEST_EKMCLUSTER_STATUS_SET\020\236\014\022#\n\036RE" +
      "SPONSE_EKMCLUSTER_STATUS_SET\020\237\014\022 \n\033REQUE" +
      "ST_ROTATIONTASK_CREATE\020\240\014\022!\n\034RESPONSE_RO" +
      "TATIONTASK_CREATE\020\241\014\022\035\n\030REQUEST_ROTATION" +
      "TASK_GET\020\242\014\022\036\n\031RESPONSE_ROTATIONTASK_GET" +
      "\020\243\014\022\036\n\031REQUEST_ROTATIONTASK_LIST\020\244\014\022\037\n\032R" +
      "ESPONSE_ROTATIONTASK_LIST\020\245\014\022 \n\033REQUEST_" +
      "ROTATIONTASK_DELETE\020\246\014\022!\n\034RESPONSE_ROTAT" +
      "IONTASK_DELETE\020\247\014\022 \n\033REQUEST_ROTATIONTAS" +
      "K_UPDATE\020\250\014\022!\n\034RESPONSE_ROTATIONTASK_UPD",
      "ATE\020\251\014\022$\n\037REQUEST_ROTATIONTASK_STATUS_GE" +
      "T\020\252\014\022%\n RESPONSE_ROTATIONTASK_STATUS_GET" +
      "\020\253\014\022$\n\037REQUEST_ROTATIONTASK_STATUS_SET\020\254" +
      "\014\022%\n RESPONSE_ROTATIONTASK_STATUS_SET\020\255\014" +
      "\0222\n-REQUEST_GET_OR_CREATE_ROTATIONTASK_A" +
      "CTIVE_KEY\020\256\014\0223\n.RESPONSE_GET_OR_CREATE_R" +
      "OTATIONTASK_ACTIVE_KEY\020\257\014\022(\n#REQUEST_SET" +
      "_ROTATIONTASK_ACTIVE_KEY\020\260\014\022)\n$RESPONSE_" +
      "SET_ROTATIONTASK_ACTIVE_KEY\020\261\014\0222\n-REQUES" +
      "T_SET_ACTIVE_ROTATION_MASTER_KEY_RECORD\020",
      "\306\014\0223\n.RESPONSE_SET_ACTIVE_ROTATION_MASTE" +
      "R_KEY_RECORD\020\307\014\0222\n-REQUEST_GET_ACTIVE_RO" +
      "TATION_MASTER_KEY_RECORD\020\310\014\0223\n.RESPONSE_" +
      "GET_ACTIVE_ROTATION_MASTER_KEY_RECORD\020\311\014" +
      "\022&\n!REQUEST_CREATE_KEY_ROTATION_EVENT\020\314\014" +
      "\022\'\n\"RESPONSE_CREATE_KEY_ROTATION_EVENT\020\315" +
      "\014\022#\n\036REQUEST_GET_KEY_ROTATION_EVENT\020\316\014\022$" +
      "\n\037RESPONSE_GET_KEY_ROTATION_EVENT\020\317\014\022&\n!" +
      "REQUEST_UPDATE_KEY_ROTATION_EVENT\020\320\014\022\'\n\"" +
      "RESPONSE_UPDATE_KEY_ROTATION_EVENT\020\321\014\022$\n",
      "\037REQUEST_LIST_KEY_ROTATION_EVENT\020\322\014\022%\n R" +
      "ESPONSE_LIST_KEY_ROTATION_EVENT\020\323\014\022)\n$RE" +
      "QUEST_NAMESPACE_REWRAP_TASK_CREATE\020\330\014\022*\n" +
      "%RESPONSE_NAMESPACE_REWRAP_TASK_CREATE\020\331" +
      "\014\022&\n!REQUEST_NAMESPACE_REWRAP_TASK_GET\020\332" +
      "\014\022\'\n\"RESPONSE_NAMESPACE_REWRAP_TASK_GET\020" +
      "\333\014\022)\n$REQUEST_NAMESPACE_REWRAP_TASK_UPDA" +
      "TE\020\334\014\022*\n%RESPONSE_NAMESPACE_REWRAP_TASK_" +
      "UPDATE\020\335\014\022)\n$REQUEST_NAMESPACE_REWRAP_TA" +
      "SK_DELETE\020\336\014\022*\n%RESPONSE_NAMESPACE_REWRA",
      "P_TASK_DELETE\020\337\014\022\'\n\"REQUEST_NAMESPACE_RE" +
      "WRAP_TASK_LIST\020\340\014\022(\n#RESPONSE_NAMESPACE_" +
      "REWRAP_TASK_LIST\020\341\014\022\'\n\"REQUEST_EKMCLUSTE" +
      "R_STATUS_ACTIVATE\020\342\014\022(\n#RESPONSE_EKMCLUS" +
      "TER_STATUS_ACTIVATE\020\343\014\022)\n$REQUEST_EKMCLU" +
      "STER_STATUS_DEACTIVATE\020\344\014\022*\n%RESPONSE_EK" +
      "MCLUSTER_STATUS_DEACTIVATE\020\345\014\022+\n&REQUEST" +
      "_SET_ACTIVE_ROTATION_KEY_RECORD\020\346\014\022,\n\'RE" +
      "SPONSE_SET_ACTIVE_ROTATION_KEY_RECORD\020\347\014" +
      "\022+\n&REQUEST_GET_ACTIVE_ROTATION_KEY_RECO",
      "RD\020\350\014\022,\n\'RESPONSE_GET_ACTIVE_ROTATION_KE" +
      "Y_RECORD\020\351\014\022.\n)REQUEST_ROTATE_ACTIVE_ROT" +
      "ATION_KEY_RECORD\020\352\014\022/\n*RESPONSE_ROTATE_A" +
      "CTIVE_ROTATION_KEY_RECORD\020\353\014\022#\n\036REQUEST_" +
      "PROCESS_BULK_ALERT_ACK\020\354\014\022$\n\037RESPONSE_PR" +
      "OCESS_BULK_ALERT_ACK\020\355\014\022\034\n\027REQUEST_GET_A" +
      "LERT_STATS\020\356\014\022\035\n\030RESPONSE_GET_ALERT_STAT" +
      "S\020\357\014\022\'\n\"REQUEST_GET_BPLUSTREE_FOR_BTREE_" +
      "GC\020\360\014\022(\n#RESPONSE_GET_BPLUSTREE_FOR_BTRE" +
      "E_GC\020\361\014\022(\n#REQUEST_DT_SYNC_ADOPTED_TREE_",
      "ATTACH\020\370\014\022\036\n\031REQUEST_LIST_CLEAN_UP_JOB\020\372" +
      "\014\022\037\n\032RESPONSE_LIST_CLEAN_UP_JOB\020\373\014\022,\n\'RE" +
      "QUEST_CHANGE_CLEAN_UP_JOB_EXPIRE_TIME\020\374\014" +
      "\022-\n(RESPONSE_CHANGE_CLEAN_UP_JOB_EXPIRE_" +
      "TIME\020\375\014\022&\n!REQUEST_CREATE_BULK_ALERT_ACK" +
      "_KEY\020\376\014\022\'\n\"RESPONSE_CREATE_BULK_ALERT_AC" +
      "K_KEY\020\377\014\022#\n\036REQUEST_GET_BULK_ALERT_ACK_K" +
      "EY\020\200\r\022$\n\037RESPONSE_GET_BULK_ALERT_ACK_KEY" +
      "\020\201\r\022%\n REQUEST_CLEAR_BULK_ALERT_ACK_KEY\020" +
      "\202\r\022&\n!RESPONSE_CLEAR_BULK_ALERT_ACK_KEY\020",
      "\203\r\022\'\n\"REQUEST_PROCESS_BULK_ALERT_ACK_KEY" +
      "\020\204\r\022(\n#RESPONSE_PROCESS_BULK_ALERT_ACK_K" +
      "EY\020\205\r\022&\n!REQUEST_UPDATE_BULK_ALERT_ACK_K" +
      "EY\020\206\r\022\'\n\"RESPONSE_UPDATE_BULK_ALERT_ACK_" +
      "KEY\020\207\r\0227\n2REQUEST_INSERT_BATCHKV_AND_REM" +
      "OVE_COLLECTOR_STATUS\020\210\r\0228\n3RESPONSE_INSE" +
      "RT_BATCHKV_AND_REMOVE_COLLECTOR_STATUS\020\211" +
      "\r\022%\n REQUEST_LISTING_REPLICATION_INFO\020\212\r" +
      "\022&\n!RESPONSE_LISTING_REPLICATION_INFO\020\213\r" +
      "\0220\n+REQUEST_GEO_CHECK_LISTING_INDEX_REPL",
      "ICATION\020\214\r\0221\n,RESPONSE_GEO_CHECK_LISTING" +
      "_INDEX_REPLICATION\020\215\r\022/\n*REQUEST_GET_LAS" +
      "T_PAGE_TABLE_JOURNAL_REGION\020\216\r\0220\n+RESPON" +
      "SE_GET_LAST_PAGE_TABLE_JOURNAL_REGION\020\217\r" +
      "\022(\n#REQUEST_LIST_PAGE_TABLE_BASE_RECORD\020" +
      "\220\r\022)\n$RESPONSE_LIST_PAGE_TABLE_BASE_RECO" +
      "RD\020\221\r\022+\n&REQUEST_LIST_PAGE_TABLE_JOURNAL" +
      "_REGION\020\222\r\022,\n\'RESPONSE_LIST_PAGE_TABLE_J" +
      "OURNAL_REGION\020\223\r\022/\n*REQUEST_DELETE_PAGE_" +
      "TABLE_JOURNAL_AND_BASE\020\224\r\0220\n+RESPONSE_DE",
      "LETE_PAGE_TABLE_JOURNAL_AND_BASE\020\225\r\022.\n)R" +
      "EQUEST_LIST_PAGE_TABLE_BASE_INDEX_RECORD" +
      "\020\226\r\022/\n*RESPONSE_LIST_PAGE_TABLE_BASE_IND" +
      "EX_RECORD\020\227\r\0222\n-REQUEST_GET_LAST_PAGE_TA" +
      "BLE_BASE_INDEX_RECORD\020\230\r\0223\n.RESPONSE_GET" +
      "_LAST_PAGE_TABLE_BASE_INDEX_RECORD\020\231\r\0225\n" +
      "0REQUEST_INSERT_REMOTE_PAGE_TABLE_REGION" +
      "_IN_BATCH\020\232\r\0226\n1RESPONSE_INSERT_REMOTE_P" +
      "AGE_TABLE_REGION_IN_BATCH\020\233\r\0229\n4REQUEST_" +
      "INSERT_REMOTE_PAGE_TABLE_BASE_INDEX_IN_B",
      "ATCH\020\234\r\022:\n5RESPONSE_INSERT_REMOTE_PAGE_T" +
      "ABLE_BASE_INDEX_IN_BATCH\020\235\r\022\037\n\032REQUEST_S" +
      "ET_BULK_ALERT_ACK\020\236\r\022 \n\033RESPONSE_SET_BUL" +
      "K_ALERT_ACK\020\237\r\022!\n\034REQUEST_PAGE_TABLE_BAS" +
      "E_SYNC\020\240\r\022\"\n\035RESPONSE_PAGE_TABLE_BASE_SY" +
      "NC\020\241\r\022%\n REQUEST_DT_RESET_PAGE_TABLE_MOD" +
      "E\020\242\r\022&\n!RESPONSE_DT_RESET_PAGE_TABLE_MOD" +
      "E\020\243\r\022*\n%REQUEST_LISTING_SWITCH_TASKS_PRO" +
      "GRESS\020\244\r\022+\n&RESPONSE_LISTING_SWITCH_TASK" +
      "S_PROGRESS\020\245\r\022\'\n\"REQUEST_REMOTE_DT_BOOTS",
      "TRAP_STATUS\020\246\r\022(\n#RESPONSE_REMOTE_DT_BOO" +
      "TSTRAP_STATUS\020\247\r\022*\n%REQUEST_GET_ADDRESS_" +
      "FOR_PAGE_TABLE_ID\020\250\r\022+\n&RESPONSE_GET_ADD" +
      "RESS_FOR_PAGE_TABLE_ID\020\251\r\022\036\n\031REQUEST_CRE" +
      "ATE_SAN_DEVICE\020\252\r\022\037\n\032RESPONSE_CREATE_SAN" +
      "_DEVICE\020\253\r\022\'\n\"REQUEST_CREATE_SAN_DEVICE_" +
      "TO_OWNER\020\254\r\022*\n%RESPONSE_CREATE_SAN_DEVIC" +
      "E_FROM_OWNER\020\255\r\022&\n!REQUEST_AGGREGATION_P" +
      "UBLISH_TOP_N\020\256\r\022\'\n\"RESPONSE_AGGREGATION_" +
      "PUBLISH_TOP_N\020\257\r\022(\n#REQUEST_UPDATE_PARTI",
      "TION_TOTALSPACE\020\260\r\022)\n$RESPONSE_UPDATE_PA" +
      "RTITION_TOTALSPACE\020\261\r\022#\n\036REQUEST_XOR_DEC" +
      "ODE_FOR_DTQUERY\020\262\r\022$\n\037RESPONSE_XOR_DECOD" +
      "E_FOR_DTQUERY\020\263\r\022-\n(REQUEST_DATA_MIGRATI" +
      "ON_STATUS_KEY_CREATE\020\264\r\022.\n)RESPONSE_DATA" +
      "_MIGRATION_STATUS_KEY_CREATE\020\265\r\022-\n(REQUE" +
      "ST_DATA_MIGRATION_STATUS_KEY_DELETE\020\266\r\022." +
      "\n)RESPONSE_DATA_MIGRATION_STATUS_KEY_DEL" +
      "ETE\020\267\r\022*\n%REQUEST_DATA_MIGRATION_STATUS_" +
      "KEY_GET\020\270\r\022+\n&RESPONSE_DATA_MIGRATION_ST",
      "ATUS_KEY_GET\020\271\r\022(\n#REQUEST_DATA_MIGRATIO" +
      "N_UPDATE_CHUNK\020\272\r\022)\n$RESPONSE_DATA_MIGRA" +
      "TION_UPDATE_CHUNK\020\273\r\022%\n REQUEST_ALLOCATE" +
      "_BLOCK_MIGRATION\020\274\r\022&\n!RESPONSE_ALLOCATE" +
      "_BLOCK_MIGRATION\020\275\r\022\'\n\"REQUEST_SEAL_LOCA" +
      "L_CHUNK_MIGRATION\020\276\r\022(\n#RESPONSE_SEAL_LO" +
      "CAL_CHUNK_MIGRATION\020\277\r\022!\n\034REQUEST_GET_MI" +
      "GRATE_SEQUENCE\020\300\r\022\"\n\035RESPONSE_GET_MIGRAT" +
      "E_SEQUENCE\020\301\r\022!\n\034REQUEST_SET_MIGRATION_S" +
      "TATUS\020\302\r\022\"\n\035RESPONSE_SET_MIGRATION_STATU",
      "S\020\303\r\022\030\n\023REQUEST_IAMUSER_GET\020\304\r\022\031\n\024RESPON" +
      "SE_IAMUSER_GET\020\305\r\022\031\n\024REQUEST_IAMUSER_LIS" +
      "T\020\306\r\022\032\n\025RESPONSE_IAMUSER_LIST\020\307\r\022\033\n\026REQU" +
      "EST_IAMUSER_DELETE\020\310\r\022\034\n\027RESPONSE_IAMUSE" +
      "R_DELETE\020\311\r\022\033\n\026REQUEST_IAMUSER_UPDATE\020\312\r" +
      "\022\034\n\027RESPONSE_IAMUSER_UPDATE\020\313\r\022\033\n\026REQUES" +
      "T_IAMUSER_CREATE\020\314\r\022\034\n\027RESPONSE_IAMUSER_" +
      "CREATE\020\315\r\022\031\n\024REQUEST_IAMGROUP_GET\020\316\r\022\032\n\025" +
      "RESPONSE_IAMGROUP_GET\020\317\r\022\032\n\025REQUEST_IAMG" +
      "ROUP_LIST\020\320\r\022\033\n\026RESPONSE_IAMGROUP_LIST\020\321",
      "\r\022\034\n\027REQUEST_IAMGROUP_DELETE\020\322\r\022\035\n\030RESPO" +
      "NSE_IAMGROUP_DELETE\020\323\r\022\034\n\027REQUEST_IAMGRO" +
      "UP_UPDATE\020\324\r\022\035\n\030RESPONSE_IAMGROUP_UPDATE" +
      "\020\325\r\022\034\n\027REQUEST_IAMGROUP_CREATE\020\326\r\022\035\n\030RES" +
      "PONSE_IAMGROUP_CREATE\020\327\r\022\030\n\023REQUEST_IAMR" +
      "OLE_GET\020\330\r\022\031\n\024RESPONSE_IAMROLE_GET\020\331\r\022\031\n" +
      "\024REQUEST_IAMROLE_LIST\020\332\r\022\032\n\025RESPONSE_IAM" +
      "ROLE_LIST\020\333\r\022\033\n\026REQUEST_IAMROLE_DELETE\020\334" +
      "\r\022\034\n\027RESPONSE_IAMROLE_DELETE\020\335\r\022\033\n\026REQUE" +
      "ST_IAMROLE_UPDATE\020\336\r\022\034\n\027RESPONSE_IAMROLE",
      "_UPDATE\020\337\r\022\033\n\026REQUEST_IAMROLE_CREATE\020\340\r\022" +
      "\034\n\027RESPONSE_IAMROLE_CREATE\020\341\r\022$\n\037REQUEST" +
      "_IAMUSER_ACCESS_KEY_LIST\020\342\r\022%\n RESPONSE_" +
      "IAMUSER_ACCESS_KEY_LIST\020\343\r\022&\n!REQUEST_IA" +
      "MUSER_ACCESS_KEY_DELETE\020\344\r\022\'\n\"RESPONSE_I" +
      "AMUSER_ACCESS_KEY_DELETE\020\345\r\022&\n!REQUEST_I" +
      "AMUSER_ACCESS_KEY_UPDATE\020\346\r\022\'\n\"RESPONSE_" +
      "IAMUSER_ACCESS_KEY_UPDATE\020\347\r\022#\n\036REQUEST_" +
      "IAMUSER_ACCESS_KEY_GET\020\350\r\022$\n\037RESPONSE_IA" +
      "MUSER_ACCESS_KEY_GET\020\351\r\022&\n!REQUEST_IAMUS",
      "ER_ACCESS_KEY_CREATE\020\352\r\022\'\n\"RESPONSE_IAMU" +
      "SER_ACCESS_KEY_CREATE\020\353\r\022!\n\034REQUEST_IAMM" +
      "ANAGEDPOLICY_GET\020\354\r\022\"\n\035RESPONSE_IAMMANAG" +
      "EDPOLICY_GET\020\355\r\022\"\n\035REQUEST_IAMMANAGEDPOL" +
      "ICY_LIST\020\356\r\022#\n\036RESPONSE_IAMMANAGEDPOLICY" +
      "_LIST\020\357\r\022$\n\037REQUEST_IAMMANAGEDPOLICY_DEL" +
      "ETE\020\360\r\022%\n RESPONSE_IAMMANAGEDPOLICY_DELE" +
      "TE\020\361\r\022$\n\037REQUEST_IAMMANAGEDPOLICY_UPDATE" +
      "\020\362\r\022%\n RESPONSE_IAMMANAGEDPOLICY_UPDATE\020" +
      "\363\r\022,\n\'REQUEST_IAMMANAGEDPOLICY_VERSION_D",
      "ELETE\020\364\r\022-\n(RESPONSE_IAMMANAGEDPOLICY_VE" +
      "RSION_DELETE\020\365\r\0221\n,REQUEST_IAMMANAGEDPOL" +
      "ICY_SET_DEFAULT_VERSION\020\366\r\0222\n-RESPONSE_I" +
      "AMMANAGEDPOLICY_SET_DEFAULT_VERSION\020\367\r\022)" +
      "\n$REQUEST_IAMMANAGEDPOLICY_VERSION_GET\020\370" +
      "\r\022*\n%RESPONSE_IAMMANAGEDPOLICY_VERSION_G" +
      "ET\020\371\r\022#\n\036REQUEST_IAM_MANAGED_ENTRY_LIST\020" +
      "\372\r\022$\n\037RESPONSE_IAM_MANAGED_ENTRY_LIST\020\373\r" +
      "\022$\n\037REQUEST_IAMMANAGEDPOLICY_CREATE\020\374\r\022%" +
      "\n RESPONSE_IAMMANAGEDPOLICY_CREATE\020\375\r\022\037\n",
      "\032REQUEST_IAMPROVIDER_CREATE\020\376\r\022 \n\033RESPON" +
      "SE_IAMPROVIDER_CREATE\020\377\r\022\034\n\027REQUEST_IAMP" +
      "ROVIDER_GET\020\200\016\022\035\n\030RESPONSE_IAMPROVIDER_G" +
      "ET\020\201\016\022\035\n\030REQUEST_IAMPROVIDER_LIST\020\202\016\022\036\n\031" +
      "RESPONSE_IAMPROVIDER_LIST\020\203\016\022\037\n\032REQUEST_" +
      "IAMPROVIDER_DELETE\020\204\016\022 \n\033RESPONSE_IAMPRO" +
      "VIDER_DELETE\020\205\016\022\037\n\032REQUEST_IAMPROVIDER_U" +
      "PDATE\020\206\016\022 \n\033RESPONSE_IAMPROVIDER_UPDATE\020" +
      "\207\016\022&\n!REQUEST_IAMSERVICEPROVIDER_CREATE\020" +
      "\210\016\022\'\n\"RESPONSE_IAMSERVICEPROVIDER_CREATE",
      "\020\211\016\022#\n\036REQUEST_IAMSERVICEPROVIDER_GET\020\212\016" +
      "\022$\n\037RESPONSE_IAMSERVICEPROVIDER_GET\020\213\016\022&" +
      "\n!REQUEST_IAMSERVICEPROVIDER_DELETE\020\214\016\022\'" +
      "\n\"RESPONSE_IAMSERVICEPROVIDER_DELETE\020\215\016\022" +
      "&\n!REQUEST_IAMSERVICEPROVIDER_UPDATE\020\216\016\022" +
      "\'\n\"RESPONSE_IAMSERVICEPROVIDER_UPDATE\020\217\016" +
      "\022&\n!REQUEST_IAMNAMESPACE_LIMIT_UPDATE\020\220\016" +
      "\022\'\n\"RESPONSE_IAMNAMESPACE_LIMIT_UPDATE\020\221" +
      "\016\022#\n\036REQUEST_IAMNAMESPACE_LIMIT_GET\020\222\016\022$" +
      "\n\037RESPONSE_IAMNAMESPACE_LIMIT_GET\020\223\016\022!\n\034",
      "REQUEST_CLEAN_SSD_READ_CACHE\020\224\016\022\"\n\035RESPO" +
      "NSE_CLEAN_SSD_READ_CACHE\020\225\016\022/\n*REQUEST_G" +
      "ET_SSD_READ_CACHE_PREFETCH_STATUS\020\226\016\0220\n+" +
      "RESPONSE_GET_SSD_READ_CACHE_PREFETCH_STA" +
      "TUS\020\227\016\022(\n#REQUEST_QUERY_SSD_READ_CACHE_S" +
      "TATUS\020\230\016\022)\n$RESPONSE_QUERY_SSD_READ_CACH" +
      "E_STATUS\020\231\016\022%\n REQUEST_GET_VNEST_NODE_MI" +
      "GRATION\020\232\016\022&\n!RESPONSE_GET_VNEST_NODE_MI" +
      "GRATION\020\233\016\022&\n!REQUEST_RESET_TIME_BEFORE_" +
      "SUSPECT\020\234\016\022\'\n\"RESPONSE_RESET_TIME_BEFORE",
      "_SUSPECT\020\235\016\022&\n!REQUEST_UPDATE_CHUNK_CUST" +
      "OM_STATE\020\236\016\022\'\n\"RESPONSE_UPDATE_CHUNK_CUS" +
      "TOM_STATE\020\237\016\022\032\n\025REQUEST_GET_DT_STATUS\020\240\016" +
      "\022\033\n\026RESPONSE_GET_DT_STATUS\020\241\016\022*\n%REQUEST" +
      "_IAMUSER_ACCESS_KEY_USE_UPDATE\020\242\016\022+\n&RES" +
      "PONSE_IAMUSER_ACCESS_KEY_USE_UPDATE\020\243\016\022\036" +
      "\n\031REQUEST_DT_OWNERSHIP_XFER\020\244\016\022\037\n\032RESPON" +
      "SE_DT_OWNERSHIP_XFER\020\245\016\022!\n\034REQUEST_GET_D" +
      "T_GIVEOUT_STATS\020\246\016\022\"\n\035RESPONSE_GET_DT_GI" +
      "VEOUT_STATS\020\247\016\022#\n\036REQUEST_MODIFY_BOOTSTR",
      "AP_TASKS\020\250\016\022$\n\037RESPONSE_MODIFY_BOOTSTRAP" +
      "_TASKS\020\251\016\0228\n3REQUEST_INSERT_BOOTSTRAP_TA" +
      "SKS_WITH_MAJOR_AND_MINOR\020\252\016\0229\n4RESPONSE_" +
      "INSERT_BOOTSTRAP_TASKS_WITH_MAJOR_AND_MI" +
      "NOR\020\253\016\022\036\n\031REQUEST_DTSM_CAPABILITIES\020\254\016\022\036" +
      "\n\031RESPOSE_DTSM_CAPABILITIES\020\255\016\022\037\n\032REQUES" +
      "T_DTSM_BPLUSTREEDUMP\020\256\016\022\037\n\032RESPOSE_DTSM_" +
      "BPLUSTREEDUMP\020\257\016\022&\n!REQUEST_DTSM_BPLUSTR" +
      "EEDUMP_STATUS\020\260\016\022&\n!RESPOSE_DTSM_BPLUSTR" +
      "EEDUMP_STATUS\020\261\016\0221\n,REQUEST_DTSM_BPLUSTR",
      "EEDUMP_GETLASTDUMPRESULT\020\262\016\0221\n,RESPOSE_D" +
      "TSM_BPLUSTREEDUMP_GETLASTDUMPRESULT\020\263\016\022%" +
      "\n REQUEST_DTSM_BPLUSTREEDUMP_ABORT\020\264\016\022%\n" +
      " RESPOSE_DTSM_BPLUSTREEDUMP_ABORT\020\265\016\022&\n!" +
      "REQUEST_FANOUT_CLIENT_EC_COMPLETE\020\266\016\022\'\n\"" +
      "RESPONSE_FANOUT_CLIENT_EC_COMPLETE\020\267\016\022,\n" +
      "\'REQUEST_ROTATION_KEY_REWRAP_TASK_CREATE" +
      "\020\270\016\022-\n(RESPONSE_ROTATION_KEY_REWRAP_TASK" +
      "_CREATE\020\271\016\022)\n$REQUEST_ROTATION_KEY_REWRA" +
      "P_TASK_GET\020\272\016\022*\n%RESPONSE_ROTATION_KEY_R",
      "EWRAP_TASK_GET\020\273\016\022,\n\'REQUEST_ROTATION_KE" +
      "Y_REWRAP_TASK_UPDATE\020\274\016\022-\n(RESPONSE_ROTA" +
      "TION_KEY_REWRAP_TASK_UPDATE\020\275\016\022,\n\'REQUES" +
      "T_ROTATION_KEY_REWRAP_TASK_DELETE\020\276\016\022-\n(" +
      "RESPONSE_ROTATION_KEY_REWRAP_TASK_DELETE" +
      "\020\277\016\022*\n%REQUEST_ROTATION_KEY_REWRAP_TASK_" +
      "LIST\020\300\016\022+\n&RESPONSE_ROTATION_KEY_REWRAP_" +
      "TASK_LIST\020\301\016\022\'\n\"REQUEST_FEDERATION_CONFI" +
      "G_LIST_ADD\020\304\016\022(\n#RESPONSE_FEDERATION_CON" +
      "FIG_LIST_ADD\020\305\016\022*\n%REQUEST_FEDERATION_CO",
      "NFIG_LIST_REMOVE\020\306\016\022+\n&RESPONSE_FEDERATI" +
      "ON_CONFIG_LIST_REMOVE\020\307\016\022\'\n\"REQUEST_FEDE" +
      "RATION_CONFIG_LIST_GET\020\310\016\022(\n#RESPONSE_FE" +
      "DERATION_CONFIG_LIST_GET\020\311\016\022(\n#REQUEST_F" +
      "EDERATION_CONFIG_LIST_LIST\020\312\016\022)\n$RESPONS" +
      "E_FEDERATION_CONFIG_LIST_LIST\020\313\016\022!\n\034REQU" +
      "EST_OBJECT_IN_USE_CHUNKS\020\300\017\022\"\n\035RESPONSE_" +
      "OBJECT_IN_USE_CHUNKS\020\301\017\022\032\n\025REQUEST_IS_MP" +
      "U_ACTIVE\020\302\017\022\033\n\026RESPONSE_IS_MPU_ACTIVE\020\303\017" +
      "\022\'\n\"REQUEST_OBJECT_QUERY_LIST_VERSIONS\020\342",
      "\017\022(\n#RESPONSE_OBJECT_QUERY_LIST_VERSIONS" +
      "\020\343\017\022 \n\033REQUEST_DELETE_CHUNK_OBJECT\020\262\020\022!\n" +
      "\034RESPONSE_DELETE_CHUNK_OBJECT\020\263\020*\260\005\n\023Rem" +
      "oteProcessStatus\022\t\n\005READY\020\000\022\023\n\017NOT_INITI" +
      "ALIZED\020\001\022\025\n\021INITIALIZE_FAILED\020\002\022\035\n\031STOP_" +
      "SERVING_FOR_FAILOVER\020\003\022\016\n\nNOT_SERVED\020\004\022\034" +
      "\n\030SERVED_BUT_NOT_EFFECTIVE\020\005\022\034\n\030SERVED_B" +
      "UT_LEASE_EXPIRED\020\006\022\034\n\030SERVED_BUT_WRONG_V" +
      "ERSION\020\007\022\020\n\014SERVICE_BUSY\020\010\022\023\n\017UNKNOWN_RE" +
      "QUEST\020\t\022\022\n\016INTERNAL_ERROR\020\n\022\024\n\020DT_PAUSE_",
      "SERVING\020\013\022\013\n\007TIMEOUT\020\014\022\020\n\014NOT_LICENSED\020\r" +
      "\022\031\n\025OPERATION_NOT_ALLOWED\020\016\022\033\n\027OPERATION" +
      "_NOT_SUPPORTED\020\017\022\031\n\025DT_TYPE_IS_NOT_SERVE" +
      "D\020\020\022%\n!REQUEST_PROCESSOR_NOT_INITIALIZED" +
      "\020\021\022\035\n\031CACHE_INVALIDATION_FAILED\020\022\022\034\n\030CAC" +
      "HE_STATE_INCONSISTENT\020\023\022\022\n\016KEYPOOL_LOCKE" +
      "D\020\024\022\027\n\023INVALID_CLUSTER_KEY\020\025\022\024\n\020CONFIG_N" +
      "OT_FOUND\020\026\022\026\n\022REJECTED_EXECUTION\020\027\022\026\n\022BT" +
      "REE_DUMP_FAILURE\020\030\022\035\n\031REMOTE_INDEXSTORE_" +
      "FAILURE\020\031\022 \n\034UNSEALED_GEO_PROCESS_FAILUR",
      "E\020\033BB\n>io.pravega.segmentstore.storage.i" +
      "mpl.chunkstream.storageos.rpcP\000"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_io_pravega_segmentstore_storage_impl_chunkstream_storageos_rpc_FileOperationsPayload_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_io_pravega_segmentstore_storage_impl_chunkstream_storageos_rpc_FileOperationsPayload_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_io_pravega_segmentstore_storage_impl_chunkstream_storageos_rpc_FileOperationsPayload_descriptor,
        new java.lang.String[] { "CommandType", "RequestId", "Cos", "Type", "KeyHash", "Payload", "RemoteProcessStatus", "DeprecatedForNowSendTime", "Failure", "Level", "ResponsePort", "ServerIp", "CallerId", "NoRetryOnFailure", "NoRetryOnTimeout", "TxcContext", "ClusterKey", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
