package io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.rm;

option java_package = "io.pravega.segmentstore.storage.impl.chunkstream.storageos.rpc.rm";
option java_outer_classname = "OwnershipInfoRecords";
option java_multiple_files = false;

message OwnershipInfoRecord {
    // Id
    required string id = 1;

    // VirtualPool
    required string virtualPool = 2;

    // Directory type
    required string type = 3;

    // Reminder of the modulo function
    required int32 remainder = 4;

    // Divisor for the modulo function
    required int32 divisor = 5;

    // Owner ipAddress of the directory
    required string ownerIpAddress = 6;

    // Directory version #
    required int32 version = 7;

    // Epoch
    required int32 epoch = 8;

    // Directory table's level
    required int32 level = 9;

    // epoch number in ZK
    required string zkEpoch = 10;

    // Hosting device where the associated directory table locates
    optional string device = 11;

    // Whether creation of the DT is completed
    optional bool creationCompleted = 12;

    // list of sourceZone -> destinationZone mapping,
    // meaning object with owner zone as sourceZone
    // will actually have owner zone as destinationZone,
    // mapping can be chained
    repeated ZoneMapping zoneMappings = 13;

    // update sequence
    optional int32 updateSequence = 14;

    optional OwnershipChangeCause lastChangeCause = 15;

}

enum OwnershipChangeCause {
    OVERTAKE = 0;
    GIVE_OUT = 1;
    NEW_DIRECTORY = 2;
    RECLAIM = 3;
    BUMP_VERSION = 4;
    SET_CREATE_COMPLETE = 5;
    UPDATE_EPOCH = 6;
    UPDATE_ZONE_MAPPING = 7;
}

message ZoneMapping {
    required string sourceZone = 1;

    required string destinationZone = 2;
}

message GetOwnershipInfoRequest {
    required string directoryId = 1;

    required string directoryType = 2;
}

enum RmOperationStatus {
     SUCCESS = 0;
     ERROR_INTERNAL = 1;
     ERROR_NOT_FOUND = 2;
}

message GetOwnershipInfoResponse {
    required RmOperationStatus status = 1 [default = SUCCESS];

    optional OwnershipInfoRecord ownershipInfo = 2;
}

message GetOwnershipInfoForTypesRequest {
    repeated string type = 1;
}

message GetOwnershipInfoForTypesResponse {
    required RmOperationStatus status = 1 [default = SUCCESS];

    repeated OwnershipInfoRecord ownershipInfo = 2;
}